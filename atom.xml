<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://github.com/ZjuYTW/atom.xml" rel="self"/>
  
  <link href="https://github.com/ZjuYTW/"/>
  <updated>2021-08-09T04:07:37.526Z</updated>
  <id>https://github.com/ZjuYTW/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/ZjuYTW/2021/08/09/hello-world/"/>
    <id>https://github.com/ZjuYTW/2021/08/09/hello-world/</id>
    <published>2021-08-09T03:10:31.995Z</published>
    <updated>2021-08-09T04:07:37.526Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>5841. Find the Longest Valid Obstacle Course at Each Position</title>
    <link href="https://github.com/ZjuYTW/2021/08/09/5841.%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/"/>
    <id>https://github.com/ZjuYTW/2021/08/09/5841.%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/</id>
    <published>2021-08-08T17:04:57.677Z</published>
    <updated>2021-08-09T05:44:37.460Z</updated>
    
    <content type="html"><![CDATA[<h1>5841. Find the Longest Valid Obstacle Course at Each Position</h1><p>tag: monotone-stack, greedy, Maximum Increasing Subsequence</p><h2>Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5841.%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/5841-1.png" alt="5841-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5841.%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/5841-2.png" alt="5841-2"></p><h2>Solution</h2><p>Use monotone-stack to find the longest subsequence end with <code>obstacles[i]</code></p><p>Greedily replace the very <code>obstacles[j], j &lt; i</code> that exactly greater than <code>obstacles[i]</code>, other elements in the stack just remain</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 7 4</span><br><span class="line"></span><br><span class="line">stack : 1 3 5 7</span><br><span class="line">after : 1 3 4 7</span><br></pre></td></tr></table></figure><p><strong>Just be careful about the same number should also be inclueded, so just binary search for (obstacle[i] + 1)</strong></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">longestObstacleCourseAtEachPosition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; obstacles)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obstacles.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> pos = <span class="built_in">lower_bound</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), obstacles[i]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(pos != dp.<span class="built_in">end</span>())&#123;</span><br><span class="line">                *pos = obstacles[i];</span><br><span class="line">                res.<span class="built_in">push_back</span>(pos - dp.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp.<span class="built_in">push_back</span>(obstacles[i]);</span><br><span class="line">                res.<span class="built_in">push_back</span>(dp.<span class="built_in">size</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5841.%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/5841-3.png" alt="5841-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5841. Find the Longest Valid Obstacle Course at Each Position&lt;/h1&gt;

&lt;p&gt;tag: monotone-stack, greedy, Maximum Increasing Subsequence&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="monotone-stack" scheme="https://github.com/ZjuYTW/tags/monotone-stack/"/>
    
    <category term="greedy" scheme="https://github.com/ZjuYTW/tags/greedy/"/>
    
    <category term="maximum increasing subsequence" scheme="https://github.com/ZjuYTW/tags/maximum-increasing-subsequence/"/>
    
  </entry>
  
  <entry>
    <title>5840. Minimum Number of Swaps to Make the String Balanced</title>
    <link href="https://github.com/ZjuYTW/2021/08/09/5840.%20Minimum%20Number%20of%20Swaps%20to%20Make%20the%20String%20Balanced/"/>
    <id>https://github.com/ZjuYTW/2021/08/09/5840.%20Minimum%20Number%20of%20Swaps%20to%20Make%20the%20String%20Balanced/</id>
    <published>2021-08-08T17:00:27.810Z</published>
    <updated>2021-08-09T05:43:33.628Z</updated>
    
    <content type="html"><![CDATA[<h1>5840. Minimum Number of Swaps to Make the String Balanced</h1><p>tag: stack, greedy</p><h2>Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5840.%20Minimum%20Number%20of%20Swaps%20to%20Make%20the%20String%20Balanced/5840-1.png" alt="5840-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5840.%20Minimum%20Number%20of%20Swaps%20to%20Make%20the%20String%20Balanced/5840-2.png" alt="5840-2"></p><h2>Solution</h2><p>In each switch, brackets are reduced mostly 2, at least 1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//Just swap the first dismatched ] with second dismatched [</span><br><span class="line">2 for: ]]] [[[ -&gt; []] [][. </span><br><span class="line">1 for just 1 pair left, switch them then all done</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwaps</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只要[的右边有对应个数个]即可</span></span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stk.<span class="built_in">empty</span>())</span><br><span class="line">                    res++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res - res/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/5840.%20Minimum%20Number%20of%20Swaps%20to%20Make%20the%20String%20Balanced/5840-3.png" alt="5840-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5840. Minimum Number of Swaps to Make the String Balanced&lt;/h1&gt;

&lt;p&gt;tag: stack, greedy&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/ZjuYTW/Zju</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="greedy" scheme="https://github.com/ZjuYTW/tags/greedy/"/>
    
    <category term="stack" scheme="https://github.com/ZjuYTW/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>1792.Maximum Average Pass Ratio</title>
    <link href="https://github.com/ZjuYTW/2021/08/09/1792.%20Maximum%20Average%20Pass%20Ratio/"/>
    <id>https://github.com/ZjuYTW/2021/08/09/1792.%20Maximum%20Average%20Pass%20Ratio/</id>
    <published>2021-08-08T16:54:36.226Z</published>
    <updated>2021-08-09T05:42:12.238Z</updated>
    
    <content type="html"><![CDATA[<h1>1792.Maximum Average Pass Ratio</h1><p>tag : Heap, No AC first time</p><h2>Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/1792.%20Maximum%20Average%20Pass%20Ratio/1792-1.png" alt="1792-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/1792.%20Maximum%20Average%20Pass%20Ratio/1792-2.png" alt="1792-2"></p><h2>Solution</h2><p>I feel shamed for I failed to AC it at first time…</p><p>Use a heap to store the whole <code>develop rate</code> for each class, and find the max dr and use it.</p><p>O(NlogN)</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">maxAverageRatio</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; classes, <span class="keyword">int</span> extraStudents)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">int</span>&gt;&gt;, less&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">double</span> passrate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classes.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            passrate += <span class="number">1.0</span> * classes[i][<span class="number">0</span>] / classes[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">double</span> pr = <span class="built_in">calPR</span>(classes[i][<span class="number">0</span>]++,classes[i][<span class="number">1</span>]++);</span><br><span class="line">            pq.<span class="built_in">emplace</span>(pr, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(extraStudents--)&#123;</span><br><span class="line">            <span class="keyword">auto</span> [dr, index] = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            passrate += dr;</span><br><span class="line">            pq.<span class="built_in">emplace</span>(<span class="built_in">calPR</span>(classes[index][<span class="number">0</span>]++, classes[index][<span class="number">1</span>]++), index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> passrate/classes.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calPR</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> * (p + <span class="number">1</span>) / (t + <span class="number">1</span>) - <span class="number">1.0</span> * p / t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/09/1792.%20Maximum%20Average%20Pass%20Ratio/1792-3.png" alt="1792-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1792.Maximum Average Pass Ratio&lt;/h1&gt;

&lt;p&gt;tag : Heap, No AC first time&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/ZjuYTW/ZjuYTW/2021/08/09/1</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://github.com/ZjuYTW/tags/No-AC-first-time/"/>
    
    <category term="Heap" scheme="https://github.com/ZjuYTW/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>1036. Escape a Large Maze</title>
    <link href="https://github.com/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%20Maze/"/>
    <id>https://github.com/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%20Maze/</id>
    <published>2021-08-07T14:12:50.626Z</published>
    <updated>2021-08-09T06:02:08.072Z</updated>
    
    <content type="html"><![CDATA[<h1>1036. Escape a Large Maze</h1><p>tag: BFS</p><h2>Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%20Maze/1036-1.png" alt="1036-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%20Maze/1036-2.png" alt="1036-2"></p><h2>Solution</h2><p>BFS + early quit.</p><p>Because 1M * 1M is too large for BFS, so we need to find a way to return quickly.</p><p><code>blocked.length &lt;= 200</code> is a good quality we can look into. In a square, the best way to lock an area is laying all blocks 45°  as following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0th      _________________________</span><br><span class="line">                        |O O O O O O O X</span><br><span class="line">                        |O O O O O O X</span><br><span class="line">                        |O O O O O X</span><br><span class="line">                        |O O O O X</span><br><span class="line">                        .O O O X</span><br><span class="line">                        .O O X</span><br><span class="line">                        .O X</span><br><span class="line">                200th   |X</span><br></pre></td></tr></table></figure><p>And there are maximally (199 + 1) * 199 /2 = 19900 grids. The exceeding of  this number means we can not block one source. So we can return quickly by determine if 19901’s grid has been visited.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> dir[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> , <span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEscapePossible</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; blocked, vector&lt;<span class="keyword">int</span>&gt;&amp; source, vector&lt;<span class="keyword">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; blocks;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> block : blocked)</span><br><span class="line">            blocks.<span class="built_in">emplace</span>(block[<span class="number">0</span>],block[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bfs</span>(source, blocks, target) &amp;&amp; <span class="built_in">bfs</span>(target, blocks, source);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; source, set&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; blocks, vector&lt;<span class="keyword">int</span>&gt; &amp;target)</span></span>&#123;</span><br><span class="line">        queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q1;</span><br><span class="line">        q1.<span class="built_in">emplace</span>(source[<span class="number">0</span>], source[<span class="number">1</span>]);</span><br><span class="line">        set&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; seen;</span><br><span class="line">        seen.<span class="built_in">insert</span>(&#123;source[<span class="number">0</span>], source[<span class="number">1</span>]&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i ++)&#123;</span><br><span class="line">                <span class="keyword">auto</span> [r,c] = q1.<span class="built_in">front</span>();</span><br><span class="line">                q1.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = r + dir[j<span class="number">-1</span>], y = c + dir[j];</span><br><span class="line">                    <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">1E6</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">1E6</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!seen.<span class="built_in">count</span>(&#123;x,y&#125;) &amp;&amp; !blocks.<span class="built_in">count</span>(&#123;x,y&#125;))&#123;</span><br><span class="line">                            <span class="keyword">if</span>(x == target[<span class="number">0</span>] &amp;&amp; y == target[<span class="number">1</span>])</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                            q1.<span class="built_in">emplace</span>(x,y);</span><br><span class="line">                            seen.<span class="built_in">insert</span>(&#123;x,y&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(seen.<span class="built_in">size</span>() &gt;= <span class="number">19901</span>)&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Oversized&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%20Maze/1036-3.png" alt="1036-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1036. Escape a Large Maze&lt;/h1&gt;

&lt;p&gt;tag: BFS&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/ZjuYTW/ZjuYTW/2021/08/07/1036.%20Escape%20a%20Large%</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://github.com/ZjuYTW/tags/BFS/"/>
    
    <category term="No AC first time" scheme="https://github.com/ZjuYTW/tags/No-AC-first-time/"/>
    
  </entry>
  
  <entry>
    <title>1671. Minimum Number of Removals to Make Mountain Array</title>
    <link href="https://github.com/ZjuYTW/2021/08/07/1671.%20Minimum%20Number%20of%20Removals%20to%20Make%20Mountain%20Array/"/>
    <id>https://github.com/ZjuYTW/2021/08/07/1671.%20Minimum%20Number%20of%20Removals%20to%20Make%20Mountain%20Array/</id>
    <published>2021-08-07T13:13:10.709Z</published>
    <updated>2021-08-09T05:44:43.910Z</updated>
    
    <content type="html"><![CDATA[<h1>1671. Minimum Number of Removals to Make Mountain Array</h1><p>Tag: monotone-stack, DP, No AC first time</p><h2> Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1671.%20Minimum%20Number%20of%20Removals%20to%20Make%20Mountain%20Array/1671-1.png" alt="1671-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1671.%20Minimum%20Number%20of%20Removals%20to%20Make%20Mountain%20Array/1671-2.png" alt="1671-2"></p><h2>Solution</h2><p>For each index, we can calculate its preceding minimum delete number and its succeeding delete number. Then search for the minimum sum.</p><p>So how to calculate deleting number? -&gt; <strong>calculate longest monotonous sequence</strong></p><ul><li>A naive way, use DP to calculate: Find the very nums[j] that lower than nums[i], then inherit its by length + 1 </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = max(dp[j] + 1) for all nums[j] &lt; nums[i]</span><br></pre></td></tr></table></figure><ul><li>A more efficient way is to maintain a monotone-stack, and greedily replace the very nums[j] that  exact greater than nums[i]. Example:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 7 4</span><br><span class="line"></span><br><span class="line">stack : 1 3 5 7</span><br><span class="line">after : 1 3 4 7</span><br></pre></td></tr></table></figure><p>​        So that we can maximally insert  number into this monotone-stack which means can get the longest sequence.</p><h2>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumMountainRemovals</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(n,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> pos = <span class="built_in">lower_bound</span>(stk.<span class="built_in">begin</span>(), stk.<span class="built_in">end</span>(), nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(pos != stk.<span class="built_in">end</span>())&#123;</span><br><span class="line">                *pos = nums[i];</span><br><span class="line">                dp[i].first = pos - stk.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stk.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                dp[i].first = stk.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">auto</span> pos = <span class="built_in">lower_bound</span>(stk.<span class="built_in">begin</span>(), stk.<span class="built_in">end</span>(), nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(pos != stk.<span class="built_in">end</span>())&#123;</span><br><span class="line">                *pos = nums[i];</span><br><span class="line">                dp[i].second = pos - stk.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stk.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                dp[i].second = stk.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n <span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i].first &gt;= <span class="number">2</span> &amp;&amp; dp[i].second &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, n - dp[i].first - dp[i].second + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/1671.%20Minimum%20Number%20of%20Removals%20to%20Make%20Mountain%20Array/1671-3.png" alt="1671-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1671. Minimum Number of Removals to Make Mountain Array&lt;/h1&gt;

&lt;p&gt;Tag: monotone-stack, DP, No AC first time&lt;/p&gt;
&lt;h2&gt; Description&lt;/h2&gt;

&lt;p</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://github.com/ZjuYTW/tags/No-AC-first-time/"/>
    
    <category term="monotone-stack" scheme="https://github.com/ZjuYTW/tags/monotone-stack/"/>
    
    <category term="greedy" scheme="https://github.com/ZjuYTW/tags/greedy/"/>
    
    <category term="DP" scheme="https://github.com/ZjuYTW/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>457. Circular Array Loop</title>
    <link href="https://github.com/ZjuYTW/2021/08/07/457.%20Circular%20Array%20Loop/"/>
    <id>https://github.com/ZjuYTW/2021/08/07/457.%20Circular%20Array%20Loop/</id>
    <published>2021-08-07T04:17:12.129Z</published>
    <updated>2021-08-09T05:39:23.991Z</updated>
    
    <content type="html"><![CDATA[<h1>457. Circular Array Loop</h1><p>Tag: Fast-Slow pointers, No AC first time</p><h2>Description</h2><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/457.%20Circular%20Array%20Loop/457-1.png" alt="457-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/457.%20Circular%20Array%20Loop/457-2.png" alt="457-2"></p><h2>Solution</h2><p>To determine a cycle, Fast-Slow pointers is a good way for solving it in linear time and constant space.</p><h3>Some tricky points</h3><ul><li>Determine <code>all positive</code> or <code>all negative</code></li><li>Determine length <code>k&gt;1</code></li></ul><p>We can do a product of two nums to judge whether they are same positive or not, and do <code>slow == Next(slow)</code> to judge loop’s length == 1</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">circularArrayLoop</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> fast = <span class="built_in">getNext</span>(n, i, nums[i]), slow = i;</span><br><span class="line">            <span class="keyword">bool</span> pos = nums[i] &gt; <span class="number">0</span>, res = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(nums[slow] * nums[fast] &gt; <span class="number">0</span> &amp;&amp; nums[slow] * nums[<span class="built_in">getNext</span>(n, fast, nums[fast])] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(slow != <span class="built_in">getNext</span>(n, slow, nums[slow]))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                slow = <span class="built_in">getNext</span>(n,slow, nums[slow]);</span><br><span class="line">                fast = <span class="built_in">getNext</span>(n, fast, nums[fast]);</span><br><span class="line">                fast = <span class="built_in">getNext</span>(n, fast, nums[fast]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">while</span>(nums[tmp] * nums[<span class="built_in">getNext</span>(n, tmp, nums[tmp])] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> step = nums[tmp];</span><br><span class="line">                nums[tmp] = <span class="number">0</span>;</span><br><span class="line">                tmp = <span class="built_in">getNext</span>(n, tmp, step);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> i, <span class="keyword">int</span> move)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i + move &lt; <span class="number">0</span>)</span><br><span class="line">            i += size;</span><br><span class="line">        <span class="keyword">while</span>(i + move &gt;= size)</span><br><span class="line">            i -= size;</span><br><span class="line">        <span class="keyword">return</span> i + move;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/457.%20Circular%20Array%20Loop/457-3.png" alt="457-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;457. Circular Array Loop&lt;/h1&gt;

&lt;p&gt;Tag: Fast-Slow pointers, No AC first time&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/ZjuYTW/ZjuYTW/2021/0</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://github.com/ZjuYTW/tags/No-AC-first-time/"/>
    
    <category term="Fast-Slow pointers" scheme="https://github.com/ZjuYTW/tags/Fast-Slow-pointers/"/>
    
  </entry>
  
  <entry>
    <title>847. Shortest Path Visiting All Nodes</title>
    <link href="https://github.com/ZjuYTW/2021/08/07/847.%20Shortest%20Path%20Visiting%20All%20Nodes/"/>
    <id>https://github.com/ZjuYTW/2021/08/07/847.%20Shortest%20Path%20Visiting%20All%20Nodes/</id>
    <published>2021-08-07T02:42:37.295Z</published>
    <updated>2021-08-09T05:40:01.338Z</updated>
    
    <content type="html"><![CDATA[<h1>847. Shortest Path Visiting All Nodes</h1><p>Tag: State Compression, BFS, No AC first time</p><h2>Description</h2><p><img src=".//Images//847-1.png" alt="847-1"></p><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/847.%20Shortest%20Path%20Visiting%20All%20Nodes/847-2.png" alt="847-2"></p><h2>Solutions</h2><p>We can see from constrains that <code>n&lt;=12</code>, so we can use state compression. Also, the weight of each edge is 1, which reminds us of BFS to search for the lowest distance to reach final state <code>1&lt;&lt;n - 1</code></p><h3>Some tricky points</h3><ul><li>Use tuple to store a three tuple, <code>&#123;node, mask, dist&#125;</code> for the current node, mask and current distance.</li><li>Use a array or map to store the visited state, states should be distinct by their mask and current node. </li></ul><h2>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shortestPathLength</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.<span class="built_in">size</span>();</span><br><span class="line">        queue&lt;tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="comment">//&#123;node, mask, dist&#125;</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">seen</span>(n, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(i, <span class="number">1</span> &lt;&lt; i, <span class="number">0</span>);</span><br><span class="line">            seen[i][<span class="number">1</span>&lt;&lt;i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [u, mask, dist] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(mask == (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>)&#123;</span><br><span class="line">                ans = dist;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//search adjecent nodes</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> next : graph[u])&#123;</span><br><span class="line">                <span class="keyword">int</span> nxtMask = mask | <span class="number">1</span> &lt;&lt; next;</span><br><span class="line">                <span class="keyword">if</span>(!seen[next][nxtMask])&#123;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(next, nxtMask, dist+<span class="number">1</span>);</span><br><span class="line">                    seen[next][nxtMask] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/ZjuYTW/ZjuYTW/2021/08/07/847.%20Shortest%20Path%20Visiting%20All%20Nodes/847-3.png" alt="847-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;847. Shortest Path Visiting All Nodes&lt;/h1&gt;

&lt;p&gt;Tag: State Compression, BFS, No AC first time&lt;/p&gt;
&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;.//I</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://github.com/ZjuYTW/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://github.com/ZjuYTW/tags/BFS/"/>
    
    <category term="No AC first time" scheme="https://github.com/ZjuYTW/tags/No-AC-first-time/"/>
    
    <category term="State Compression" scheme="https://github.com/ZjuYTW/tags/State-Compression/"/>
    
  </entry>
  
</feed>
