<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://zjuytw.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjuytw.github.io/"/>
  <updated>2021-08-11T15:42:18.197Z</updated>
  <id>https://zjuytw.github.io/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>446. Arithmetic Slices II - Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/</id>
    <published>2021-08-11T15:42:52.096Z</published>
    <updated>2021-08-11T15:42:18.197Z</updated>
    
    <content type="html"><![CDATA[<h1>446. Arithmetic Slices II - Subsequence</h1><h2>Description</h2><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-1.png" alt="image-20210811233829175"></p><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-2.png" alt="image-20210811233842286"></p><h2>Solution</h2><p>DP to check out the previous subsequence number satisfied requirement.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][d] = In position i, the number satisfied requirement that difference is d</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="comment">// int res = 0;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_map&lt;LL,<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                LL d = <span class="number">1LL</span> * nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">int</span> cnt = ((dp[j].<span class="built_in">find</span>(d) != dp[j].<span class="built_in">end</span>()) ? dp[j][d] : <span class="number">0</span>);</span><br><span class="line">                res += cnt;</span><br><span class="line">                dp[i][d] += cnt+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-3.png" alt="image-20210811234154579"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;446. Arithmetic Slices II - Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subse</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>679. 24 Game</title>
    <link href="https://zjuytw.github.io/2021/08/11/679.%2024%20Game/"/>
    <id>https://zjuytw.github.io/2021/08/11/679.%2024%20Game/</id>
    <published>2021-08-11T15:42:52.075Z</published>
    <updated>2021-08-11T15:36:55.771Z</updated>
    
    <content type="html"><![CDATA[<h1>679. 24 Game</h1><h2>Description</h2><p><img src="/2021/08/11/679.%2024%20Game/679-1.png" alt="image-20210811232640270"></p><h2>Solution</h2><p>Recursively check all the potential combination of the 4 numbers. In each round, we iteratively select 2 out of N numbers, calculate the result of <code>+, -, *, /</code> then put back the result into next round.</p><p>Don’t forget the function return condition is <code>if N == 1, nums[0] == 24 </code> . And for float number, we should do this in <code>abs() &lt; 1e-6</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint24</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">double</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> card : cards)</span><br><span class="line">            nums.<span class="built_in">push_back</span>(<span class="number">1.0</span> * card);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="keyword">double</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">abs</span>(nums[<span class="number">0</span>] - <span class="number">24</span>) &lt; <span class="number">1e-6</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">double</span> a = nums[i], b = nums[j];</span><br><span class="line">                vector&lt;<span class="keyword">double</span>&gt; newnums;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                        newnums.<span class="built_in">push_back</span>(nums[k]);</span><br><span class="line">                </span><br><span class="line">                newnums.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="comment">//iterate all operators</span></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a + b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a - b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a * b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">                    newnums.<span class="built_in">back</span>() = a / b;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/679.%2024%20Game/679-2.jpg" alt="679-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;679. 24 Game&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/679.%2024%20Game/679-1.png&quot; alt=&quot;image-20210811232640270&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Sol</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>133. Clone Graph</title>
    <link href="https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/"/>
    <id>https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/</id>
    <published>2021-08-10T16:15:38.395Z</published>
    <updated>2021-08-10T16:13:21.379Z</updated>
    
    <content type="html"><![CDATA[<h1>133. Clone Graph</h1><h2>Description</h2><p><img src="/2021/08/11/133.%20Clone%20Graph/133-1.png" alt="image-20210811000504275"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-2.jpg" alt="133-2"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-4.jpg" alt="133-4"><img src="/2021/08/11/133.%20Clone%20Graph/133-3.jpg" alt="133-3"></p><h2>Solution</h2><p>I uses two map to store the <code>visited</code> and <code>waiting</code> nodes, then BFS for the next node be copied.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; neighbors;</span></span><br><span class="line"><span class="comment">    Node() &#123;</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; visited;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; waited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        Node* root = <span class="keyword">new</span> <span class="built_in">Node</span>(node-&gt;val, node-&gt;neighbors);</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        waited[root-&gt;val] = root;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">auto</span> top = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top-&gt;neighbors.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> nbor = top-&gt;neighbors[i];</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(nbor-&gt;val) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">                        <span class="keyword">if</span>(waited.<span class="built_in">find</span>(nbor-&gt;val) == waited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                            next = <span class="keyword">new</span> <span class="built_in">Node</span>(nbor-&gt;val, nbor-&gt;neighbors);</span><br><span class="line">                            waited[nbor-&gt;val] = next;</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                            next = waited[nbor-&gt;val];</span><br><span class="line">                        top-&gt;neighbors[i] = next;</span><br><span class="line">                        q.<span class="built_in">push</span>(top-&gt;neighbors[i]);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        top-&gt;neighbors[i] = visited[nbor-&gt;val];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[top-&gt;val] = top;</span><br><span class="line">                waited.<span class="built_in">erase</span>(top-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/133.%20Clone%20Graph/133-5.jpg" alt="133-5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;133. Clone Graph&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/133.%20Clone%20Graph/133-1.png&quot; alt=&quot;image-20210811000504275&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://zjuytw.github.io/tags/BFS/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>491.Increasing Subsequences</title>
    <link href="https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/"/>
    <id>https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/</id>
    <published>2021-08-10T16:15:38.362Z</published>
    <updated>2021-08-10T16:15:08.836Z</updated>
    
    <content type="html"><![CDATA[<h1>491.Increasing Subsequences</h1><h2>Description</h2><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-1.png" alt="image-20210810235346772"></p><h2>Solution</h2><p>Two solutions:</p><ul><li>DP, use <code>set&lt;vector&lt;int&gt;&gt;</code> to deduplicate</li><li>Back Tracking, don’t forget deduplicating</li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        set&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; Set;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            dp[i].<span class="built_in">push_back</span>(&#123;nums[i]&#125;);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt;= nums[j])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> sequence: dp[j])&#123;</span><br><span class="line">                        <span class="comment">//sequence -&gt; vector&lt;int&gt;</span></span><br><span class="line">                        dp[i].<span class="built_in">push_back</span>(sequence);</span><br><span class="line">                        dp[i].<span class="built_in">back</span>().<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        Set.<span class="built_in">insert</span>(dp[i].<span class="built_in">back</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> seq : Set)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(seq);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution2 :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; curRes;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, curRes);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> curPos, vector&lt;<span class="keyword">int</span>&gt;&amp; curres)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curres.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">            res.<span class="built_in">push_back</span>(curres);</span><br><span class="line">        <span class="keyword">if</span>(curPos == nums.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; seen;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curres.<span class="built_in">size</span>()&gt;<span class="number">0</span> &amp;&amp; nums[i] &lt; curres.<span class="built_in">back</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(seen.<span class="built_in">count</span>(nums[i]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            curres.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, i+<span class="number">1</span>, curres);</span><br><span class="line">            curres.<span class="built_in">pop_back</span>();</span><br><span class="line">            seen.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-2.jpg" alt="491-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;491.Increasing Subsequences&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/491.%20Increasing%20Subsequences/491-1.png&quot; alt=&quot;image-</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Back Tracking" scheme="https://zjuytw.github.io/tags/Back-Tracking/"/>
    
  </entry>
  
  <entry>
    <title>413. Arithmetic Slices</title>
    <link href="https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/"/>
    <id>https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/</id>
    <published>2021-08-10T16:15:38.359Z</published>
    <updated>2021-08-10T16:12:47.366Z</updated>
    
    <content type="html"><![CDATA[<h1>413. Arithmetic Slices</h1><h2>Description</h2><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-1.png" alt="image-20210811000154179"></p><h2>Solution</h2><p>Iteration to find <code>start &amp; end</code> of each <code>Arithmetic</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diff</span><span class="params">(nums.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            diff[i<span class="number">-1</span>] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prev = diff[<span class="number">0</span>], count = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev == diff[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                res += count;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-2.jpg" alt="413-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;413. Arithmetic Slices&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/413.%20Arithmetic%20Slices/413-1.png&quot; alt=&quot;image-20210811000</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Iteration" scheme="https://zjuytw.github.io/tags/Iteration/"/>
    
  </entry>
  
  <entry>
    <title>727. Minimum Window Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/</id>
    <published>2021-08-09T16:39:05.536Z</published>
    <updated>2021-08-09T16:37:26.337Z</updated>
    
    <content type="html"><![CDATA[<h1>727. Minimum Window Subsequence</h1><h2>Description</h2><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png" alt="457-1"></p><h2>Solution</h2><p>There are two solutions, one is original DP(very common solution that must think of it when encounter a string problem), another is Finite State Machine solution.</p><h3>DP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DP[i][j] = the minimum subsequence length k</span><br><span class="line">//e.g, s2[0 : j] is a subsequence of s1[i - k + 1: i]</span><br><span class="line"></span><br><span class="line">if s1[i] == s2[j]</span><br><span class="line">dp[i][j] = dp[i-1][j-1] + 1</span><br><span class="line">else</span><br><span class="line">dp[i][j] = dp[i-1][j] + 1</span><br><span class="line"></span><br><span class="line">return min&#123;dp[i][N]&#125; for i= 1,2,3..M</span><br></pre></td></tr></table></figure><h3>Finite State Machine</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Define a array next[i][ch]: look right from position i, the pos of the nearest ch</span><br><span class="line"></span><br><span class="line">With the next[][], we directly jump into next nearest matched postion without iterate.</span><br><span class="line"></span><br><span class="line">And the way to calculate next is DP, we see from back to front</span><br><span class="line"></span><br><span class="line">next[i][ch] = next[i+1][ch](except next[i][s[i+1] - &#x27;a&#x27;] = i+1)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//DP</span></span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;int&gt;&gt; dp(s1.size() + 1, vector&lt;int&gt;(s2.size() + 1, INT_MAX));</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt;= s1.size(); i++)</span></span><br><span class="line">        <span class="comment">//     dp[i][0] = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j = 1; j &lt;= s2.size() &amp;&amp; j &lt;= i; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(s1[i-1] == s2[j-1] &amp;&amp; dp[i-1][j-1] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j-1] + 1;</span></span><br><span class="line">        <span class="comment">//         else if(s1[i-1] != s2[j-1] &amp;&amp; dp[i-1][j] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j] + 1;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// string res = &quot;&quot;;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if((res == &quot;&quot; &amp;&amp; dp[i][s2.size()] != INT_MAX) || res.size() &gt; dp[i][s2.size()])&#123;</span></span><br><span class="line">        <span class="comment">//         res = s1.substr(i-dp[i][s2.size()], dp[i][s2.size()]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Finite-State-Machine</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">next</span>(s1.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            next[s1.<span class="built_in">size</span>()<span class="number">-1</span>][i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s1.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</span><br><span class="line">                next[i][j] = next[i+<span class="number">1</span>][j];</span><br><span class="line">            next[i][s1[i+<span class="number">1</span>] - <span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> length = INT_MAX, start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i] == s2[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i, s2i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(s2i &lt; s2.<span class="built_in">size</span>() &amp;&amp; next[j][s2[s2i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">-1</span>)&#123;</span><br><span class="line">                    j = next[j][s2[s2i++] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s2i == s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; j - i + <span class="number">1</span>)&#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        length = j - i + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length != INT_MAX)</span><br><span class="line">            res = s1.<span class="built_in">substr</span>(start, length);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-2.png" alt="457-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;727. Minimum Window Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Finite State Machine" scheme="https://zjuytw.github.io/tags/Finite-State-Machine/"/>
    
  </entry>
  
  <entry>
    <title>313. Super Ugly Number</title>
    <link href="https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/"/>
    <id>https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/</id>
    <published>2021-08-09T16:39:05.535Z</published>
    <updated>2021-08-09T16:38:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1>313. Super Ugly Number</h1><h2>Description</h2><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png" alt="image-20210810003242724"></p><h2>Solution</h2><p>Use priority_queue to find the smallest number</p><p>Be careful about integer overflow.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; primes)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">long</span>, vector&lt;<span class="keyword">long</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">long</span> top;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            top = pq.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() == top)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> prime: primes)</span><br><span class="line">                pq.<span class="built_in">push</span>(top * prime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-3.jpg" alt="313-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;313. Super Ugly Number&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png&quot; alt=&quot;image-202108100</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1353. Maximum Number of Events That Can Be Attended</title>
    <link href="https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/"/>
    <id>https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/</id>
    <published>2021-08-09T16:39:05.516Z</published>
    <updated>2021-08-09T16:38:24.239Z</updated>
    
    <content type="html"><![CDATA[<h1>1353. Maximum Number of Events That Can Be Attended</h1><h2>Description</h2><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-1.png" alt="image-20210810002606817"></p><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-2.jpg" alt="1353-2"></p><h2>Solution</h2><p>Use priority_queue to find the closed DDL’s event and handle it in the day.</p><p>There is are tricky programming point that we can directly iterate the whole [earliest start time, latest finish time] to find each day’s best strategy or we can also iterate every sorted event.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(events.<span class="built_in">begin</span>(), events.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">1E5</span>; day++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; events.<span class="built_in">size</span>() &amp;&amp; events[i][<span class="number">0</span>] == day)&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(events[i++][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &lt; day)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &gt;= day)&#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// int curt = events[0][0];</span></span><br><span class="line">        <span class="comment">// int res = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; events.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if(curt == events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//         while(!pq.empty() &amp;&amp; curt &lt; events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//             curt++;</span></span><br><span class="line">        <span class="comment">//             res++;</span></span><br><span class="line">        <span class="comment">//             pq.pop();</span></span><br><span class="line">        <span class="comment">//             while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//                 pq.pop();</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         curt = events[i][0];</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// while(!pq.empty() &amp;&amp; pq.top() &gt;= curt)&#123;</span></span><br><span class="line">        <span class="comment">//     curt++;</span></span><br><span class="line">        <span class="comment">//     res++;</span></span><br><span class="line">        <span class="comment">//     pq.pop();</span></span><br><span class="line">        <span class="comment">//     while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//         pq.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-3.jpg" alt="1353-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1353. Maximum Number of Events That Can Be Attended&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/1353.%20Maximum%20Number%20of%2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Bitcoin lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-19.%20Bitcoin/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-19.%20Bitcoin/</id>
    <published>2021-08-09T09:13:23.361Z</published>
    <updated>2021-08-09T10:06:13.523Z</updated>
    
    <content type="html"><![CDATA[<h1>Bitcoin</h1><p>As mentioned in Satoshi Nakamoto’s paper that bitcoin is aimed to prevent double-spending as well as reduce the cost of third party involvement. </p><p>Bitcoin has three features that makes it Epoch-making</p><ul><li>Decentralization</li><li>Using Peer-to-Peer Technology</li><li>Low-cost transaction</li></ul><h2>Brief Intro </h2><p>Bitcoin is a distributed ledger which implement decentralization. Bitcoin ‘s design should solve Byzantine Generals Problem because it is running through public Internet. Bitcoin systems reply on <em>Proof of Work</em> to verify each node’s validation to prove itself running on a true CPU. Bitcoin also promise that : Malicious nodes’ blockchain won’t grow long, if most of nodes in the network are meritorious.</p><p>For double-spending problem, block-chain ensures that even if blockchain may fork at some point, but only one fork will be accepted in the end.</p><h3>Drawbacks</h3><ul><li>Every new transaction need 10 min before recording on the blockchain</li><li>The trustworthiness grows as the chain grows longer, but still have chance to be waived by receiving a longer chain from other node.</li><li>Waste energy</li></ul><h2>Extends</h2><p>You may read paper and watch lecture to get more detailed information about bitcoin.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Bitcoin&lt;/h1&gt;

&lt;p&gt;As mentioned in Satoshi Nakamoto’s paper that bitcoin is aimed to prevent double-spending as well as reduce the cost of</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Bitcoin" scheme="https://zjuytw.github.io/tags/Bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>6.824 CT lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/</id>
    <published>2021-08-09T09:13:23.356Z</published>
    <updated>2021-08-09T10:45:57.253Z</updated>
    
    <content type="html"><![CDATA[<h1> Certificate Transparency</h1><h2>Introduce</h2><p>First review the vulnerability of HTTP and an example of  Man in the Middle Attack.</p><h4> HTTP</h4><blockquote><p>HTTP is a request response protocol to communicate asynchronously between client and server.</p><p>For websites and pages the browser acts as a client and a web-server like Apache or IIS acts as server. The server hosts the files (like html , audio , video files etc) and returns are responds to client requests with the data. Depending on the request a response contains the status of the request.</p><p>The process involves a series of messages that go back and forth between the client and server. The process starts with initiating a connection. After that a process known as TCP slow start kicks in. At this point data is passed between the two parties via data packets and often requires multiple round trips.</p><p>TCP slow start is designed to gradually expand the amount of data traversing the wire each round trip. The initial packet size is 16kb and doubles on subsequent round trips until a max size is reached. This can vary, but tends to be around 4MB for most connections.</p><p>This process is used because the server does not know how much bandwidth the client can handle. Rather than overflowing the client the server uses a gentle size and continues to increase until a limit is found.</p><p>As data or request bodies move between the client and the server it is done using clear or plain text. This is viewable by anyone or software watching the network traffic.</p><p>This is not that important for general content. However, today even when you don’t think sensitive data is moving between the two parties more sessions do transport identifying information. This is why every website should use TLS to secure HTTP connections.</p></blockquote><h4> Man in the Middle Attack</h4><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/man-in-the-middle-mitm-attack.png" alt="man-in-the-middle-mitm-attack"></p><p>A third-party may easily hijack the connection towards target website and redirect to its own rogue web, for no further check mechanism in HTTP.</p><h4>Certificate, SSL, TLS, HTTPS</h4><p><strong>HTTPS work flow:</strong></p><p><img src="https-connection-sequence-diagram.png" alt="https-connection-sequence-diagram"></p><p>Particularly, server should request a certificate from <em>CA(Certificate Authority)</em>. Whenever client send a connection request to server, it will receive a CERT from server.</p><table><thead><tr><th>Certificate</th></tr></thead><tbody><tr><td>Server name, eg: “gmail.com”</td></tr><tr><td>Public Key of server</td></tr><tr><td>CA’s Signature</td></tr></tbody></table><p>CA’s unique signature ensures that just CA can issue the certificate to server that no one else can counterfeit.</p><p><strong>NOTE:</strong> A vulnerability of this scheme is that once a CA was broken into or something else happened and caused CA issued a malicious certificate. Client may have chance to talk to a rogue web and info may get leaked.</p><h2>Certificate Transparency</h2><p>Certificate Transparency is a system that stores certificate logs which are stored distributed and append-only on CT. CT can provide user certificate verification to keep CA from issuing malicious certificate and the certificate even keep in CA for longer time.</p><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/CT_work_flow.png" alt="CT work flow"></p><p>CT promises following:</p><ul><li>Certificates are deposited in public, transparent logs</li><li>Logs are cryptographically monitored</li></ul><h3>Implementation</h3><p>Each certificates are stored as a node in Merkle Tree in CT. <img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/MerkleTree.png" alt="Merkle Tree"></p><p>Each node in each level is the value of the output of <em>cryptographic hash function</em> that maps an arbitrary-size message <em>M</em> to a small fixed-size output H(<em>M</em>), with the property that it is infeasible in practice to produce any pair of distinct messages <em>M1</em> ≠ <em>M2</em> with identical hashes H(<em>M1</em>) = H(<em>M2</em>). And the we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h(0, K) = H(record K)</span><br><span class="line">h(L+1, K) = H(h(L, 2 K), h(L, 2 K+1))</span><br></pre></td></tr></table></figure><p>With the property of above, we can determine whether a specific certificate stored in the tree, we can recompute hash(<em>the certificate</em>) and the hash value of its siblings and relatives to finally get the top-level’s hash. If H(4,0) == recomputed H(4,0), then proved.</p><p><strong>Example:</strong></p><p>For example, suppose we want to prove that a certain bit string <em>B</em> is in fact record 9 in a tree of 16 records with top-level hash <em>T</em>. We can provide those bits along with the other hash inputs needed to reconstruct the overall tree hash using those bits. Specifically, the client can derive as well as we can that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T = h(4, 0)</span><br><span class="line">= H(h(3, 0), h(3, 1))</span><br><span class="line">= H(h(3, 0), H(h(2, 2), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(h(1, 4), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), h(0, 9)), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), H(record 9)), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), H(B)), h(1, 5)), h(2, 3)))</span><br></pre></td></tr></table></figure><h3> Fork Attack (Fork Consistency)</h3><p>The proof of fork consistency, image a log servers have a chain of logs and once the log server wants to fork (like, to trick a user for a malicious certificate but not seen by other monitors etc.) CT has a mechanism to detect the inconsistency by <em>gossip</em></p><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/ForkConsistencyEg.png" alt="Fork Consistency eg"></p><p>Like the example, once a log server has a fork line that starts with B for bogus and have a current STH(signed tree head, the top-level hash value). We can simply calculate if STH1’s log a prefix log of STH2’s log by the same way prove if STH1’s log is inside STH2’s log tree.</p><p>If return a false, which means STH1 is on a different fork.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt; Certificate Transparency&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;First review the vulnerability of HTTP and an example of  Man in the Middle Attac</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Certificate Transparency" scheme="https://zjuytw.github.io/tags/Certificate-Transparency/"/>
    
  </entry>
  
  <entry>
    <title>6.824 COPS lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-17.COPS(Causal%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-17.COPS(Causal%20Consistency)/</id>
    <published>2021-08-09T09:13:23.348Z</published>
    <updated>2021-08-09T10:06:00.232Z</updated>
    
    <content type="html"><![CDATA[<h1> COPS</h1><h2>Introduce</h2><p>Still the website Front-End read from DB storage cluster model. We are gonna explore another possibility as local read and local write to speed up transactions. How to achieve <em>stronger</em> Consistency in terms of CAP Theorem.</p><p>Consider [Spanner](./13.Spanner(Strong Consistency RW).md) and [Memcache](./16.Memcache(Cache Consistency).md)’s scheme</p><ul><li>Spanner</li></ul><blockquote><p>Linearizability</p><p>For R/W transaction, Use PAXOS and 2PC to write to remote replication. (Wait for quorum’s acknowledge)</p><p>For R/O transaction, read from local. Use Snapshot Isolation and TrueTime clock mechanism to ensure local serializability.</p></blockquote><ul><li>Memcache</li></ul><blockquote><p>Eventual Consistency</p><p>Introduce memcache layer to achieve write to DB and read from memcache.</p><p>Write need receive DB’s acknowledge and read has no need to wait.</p></blockquote><p>For COPS,  it figures out a new way to make more efficient read and write by implementing <em>causal consistency</em>, which is stronger than eventual consistency but weaker than linearizability.</p><h2>Implementation</h2><p><img src="/2021/08/09/6.824-17.COPS(Causal%20Consistency)/COPS.png" alt="COPS"></p><p>COPS, aka Cluster of Order-Preserving Servers, a key-value store that delivers causal-consistency model across the wide-area. Every Data Center has a local COPS cluster, which maintains a complete replica of stored data. So client can just talk to local cluster for data’s read and write.</p><p>In each Data Center, data are divided into many shards, which is linearizable and clients access each partition independently. So the whole cluster is linearizable as well. The problem comes when clusters communicate with each other to remain sync. </p><p>To achieve causal consistency, COPS have a prime node be responsible for local writing. After local writing is finished, prime will send it to other cluster’s prime node, and a version number will be sent as well to keep causal order.</p><h2> Causality</h2><p>​     <em>Potential Causality definition</em> </p><ul><li><p><strong>Execution Thread</strong>. If a and b are two operations in a single thread of execution, then a -&gt; b if operation a happens before operation b</p></li><li><p><strong>Gets From</strong>. If a is a put operation and b is a get operation that returns the value written by a, then a -&gt; b</p></li><li><p><strong>Transitivity</strong>. For operations a, b, and c, if a -&gt; b and b -&gt; c, then a -&gt; c</p></li></ul><p><strong>Example</strong>:</p><p><img src="/2021/08/09/6.824-17.COPS(Causal%20Consistency)/causal.png" alt="causal"></p><p>We can learn from the figure that <em>put(z,5)</em> is derived from <em>get(x) = 4</em>, which means to execute <em>put(z,5)</em> we have ensured that what is logically happened earlier than it. </p><p><strong>Note:</strong> If the system can not tell weather two operation’s happening order, since there is no explicit reason about they, We can simply define they are concurrent, so system can decide the order they happen. But for two <em>put</em> concurrently write to the same key, there is a conflict.</p><p>So to deal with conflicts, <code>Last write win</code> is a proper way to deal with it but if we want to do<code>append &amp; atomical count</code> like thing, this strategy may not work.</p><h2> Context</h2><p>Each client maintains a context to explicitly mark their state. After each operation, the client will append a entry of keys’ version. So DC can  simply use this entries to verify the dependencies of one operation.</p><p><strong>Example</strong>:</p><p>We have 3 Data Centers, and one client calls put(Z, value, Zver3, Xver2, Yver4) to put Z = value. To forward this operation to other DC, DC1 will check the dependencies of Zver3, Xver2, Yver4 in other DC, if others’ are not in this stage, it will wait till other DCs reach or exceed the dependencies’ version number</p><h2>Lamport Timestamp</h2><p>To achieve global order, COPS use <code>Lamport Timestamp in higher bits + unique ID For Data Center in lower bits</code> . Combining with Logical timeclock and Wall Clock, we can give a global sequence despite of large inaccuracy.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tmax = highest version seen (from self and others)</span><br><span class="line">T = max(Tmax + 1, wall-clock time)</span><br></pre></td></tr></table></figure><h2>Write</h2><p>Client -&gt; Local Data Store Cluster -&gt; other DCs</p><p>When client sends a <em>put(key, value …)</em> , client library will calculate the dependencies according to the context. The local prime will wait till cluster has indeed store all the dependencies( check by version number). Then send to remote clusters, do the same.</p><h2>Read</h2><p>Read from local cluster, the library function provide both read the latest version of key and a specific older one by explicitly send a context with get.</p><h2> limitation </h2><ul><li><p>Causal Consistency can not be aware of external dependency. For example, Alice told Bob to check a new status of the key, and then Bob sent a get request via client. Now Bob may see old value of key because the system do not know that Alice calls Bob yields Bob’s get request.</p><p>And this is also discussed by lamport in &lt;Time, Clocks, and the Ordering of Events in a Distributed System&gt;</p></li><li><p>It’s hard to manage conflict, <code>Last write win</code> is not generic </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt; COPS&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Still the website Front-End read from DB storage cluster model. We are gonna explore another possibil</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="COPS" scheme="https://zjuytw.github.io/tags/COPS/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Memcache lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/</id>
    <published>2021-08-09T09:13:23.342Z</published>
    <updated>2021-08-09T10:05:56.458Z</updated>
    
    <content type="html"><![CDATA[<h1>Memcahce at Facebook </h1><h2>Intro</h2><p>In a popular webserver scenario, we have web application that clients send request (especially most reads and a few writes) to Data Base, and as we both know things get worse when one peer in the system suffer a throughput bottleneck. To achieve better performance and also get stronger consistency.</p><ul><li>Single Web Server(eg, running on Apache Tomcat) + Single  DataBase(eg, MySQL/ Oracle)</li></ul><p>​        &#8595; </p><ul><li><p>Muti-Stateless Web Server + Single DB</p><p>&#8595;</p></li><li><p>Mutl-Stateless Web Server + DB cluster(sharded  by key, in both scheme and table layer)</p></li></ul><p>​       &#8595;</p><ul><li>Mutl-Stateless Web Server + Memcache (For speeding up reads) + DB cluster</li></ul><h2>Implementation</h2><p>Facebook noticed that their customers consume an ordered of magnitude more content that they create, so fetching data is the domain element for the performance bottleneck. Also, they have various storage services, like MySQL, HDFS etc, which means a flexible caching strategy is needed.</p><p>Finally, they came up with an architecture that separate caching layer from the persistence layer, which means that for a group a Web server, they combine with a group of Memcache to form a <em>Front-End Cluster</em>, then a Front-End Cluster combine with a data-completed DB to form a <em>region</em>(AKA Data Center). So as the distributed spread of region, users from different area of USA can access to the Web server with lowest latency by choosing different region.</p><p><img src="/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/Memcache1.png" alt="Memcache1"></p><p>Because of the tolerance of stale message differs in different situation</p><ul><li>User can stand for transient stale data, but not too long</li><li>User tend to observe their latest data after writing it</li></ul><p>So the Memcache can achieve eventual consistency by using its R/W strategy.<img src="/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/Memcache2.png" alt="Memcache2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Read Scheme:</span><br><span class="line">v = get(k)</span><br><span class="line">if v == nil</span><br><span class="line">v = fetch from DB</span><br><span class="line">set(k,v)</span><br><span class="line"></span><br><span class="line">Write Scheme:</span><br><span class="line">send k,v to DB</span><br><span class="line">delete(k) in MC</span><br></pre></td></tr></table></figure><h4>Hint</h4><ul><li><p>This scheme can not prevent users from seeing stale data</p><ul><li>If user read exactly after <em>line 8</em>, at this point, Memcache still holds the stale data but DB has updated the key to the new value</li></ul></li><li><p>Q: Why not delete key in the MC first before <em>send k,v to DB</em>?</p><ul><li>A: Because if at the time deleted the key in MC but another server did not see key in MC, it will send fetch to DB then may get the stale data that might be deleted afterwards and store to MC. Then MC may store the stale data until another write is fired up.</li></ul></li><li><p>Q: Why not just set(k,v) in MV in <em>line 9</em></p><ul><li>A : Because delete is idempotent while set is not. Check in the example:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C1 : x = 1 -&gt; DB</span><br><span class="line">C2 : x = 2 -&gt; DB</span><br><span class="line"> set(x,2)</span><br><span class="line">C1 : set(x,1)</span><br><span class="line">// makes stale data stored</span><br></pre></td></tr></table></figure></li><li><p>Prime &amp; Secondary Scheme</p><ul><li>For many regions, there is one master region and many salve region</li><li>Local Read and Prime Write<ul><li>For read, each FE read use <em>Read Scheme</em> in local region. This is super fast</li><li>For write, slave’s write need to be send to primary region</li></ul></li><li>Prime&amp;Secondary replication, primary DB always send info to remote DB to stay in sync</li></ul></li></ul><h2>Performance</h2><p>Let’s talk about two parallel process strategies.</p><ul><li>Partition<ul><li>increase RAM efficiency that each Key just store once </li><li>Not good for  some hot keys</li><li>Client may talk to many part for one website’s resource</li></ul></li><li>Replication<ul><li>Good for hot key</li><li>Fewer TCP connection</li><li>RAM wasted for more replica</li></ul></li></ul><p>For Facebook’s architecture, we have two completed replicated asynchronized region that brings fault-tolerance also low-latency for different area’s user. In each region, FB partitioned DB then using many Memcache to cache hot keys to reduce DB’s load. There is also a regional Memcache cluster in each region to cache those not too hot keys.</p><h2> Lease</h2><p> FB uses lease mechanism to fix the <em>Thunder Herd and Race Condition</em>.</p><ul><li><p>Thunder Herd – If many FE are simultaneously read the same key from Memcache and at this time, one FE do a write() and delete the old key in Memcache. Then DB may have the risk of flooded by too many queries for one key.</p></li><li><p>Race Condition – Example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C1 : get(k) -&gt; miss</span><br><span class="line">C1 : read k from DB -&gt; value1</span><br><span class="line">C2 : write k = value2 -&gt; DB</span><br><span class="line">C2 : delete(k) to MC</span><br><span class="line">C1 : set(k,v1) to MC</span><br><span class="line">// In this situation, stale data of value1 will store on MC forever</span><br></pre></td></tr></table></figure><h4>Solution</h4><p>To each get(k), Memcache server should issue FE a lease for a period of time.</p><ul><li>Thunder Herd, if one FE get the lease, then others that also send get(k) will block till the first FE calls put(k,v, l) or lease expired</li><li>Race Condition, C1’s get(k) will be issued a lease, but C2’s delete will invalid the old lease, the when C1 fetch value1 from DB then calls put(k,v1, l), the Memcache server will reject it.</li></ul></li></ul><h2>Extend</h2><p>Another introduce of twitter’s cache system in <a href="https://tanxinyu.work/twitter-cache-analysis-thesis/">Twitter 内存缓存系统分析论文阅读</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Memcahce at Facebook &lt;/h1&gt;

&lt;h2&gt;Intro&lt;/h2&gt;

&lt;p&gt;In a popular webserver scenario, we have web application that clients send request (espec</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Memcache@FB" scheme="https://zjuytw.github.io/tags/Memcache-FB/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Spark lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/</id>
    <published>2021-08-09T09:13:23.335Z</published>
    <updated>2021-08-09T10:06:04.918Z</updated>
    
    <content type="html"><![CDATA[<h1>Spark</h1><h2>Introduce</h2><p>Spark is a successor of MapReduce to process distributed big-data computing tasks.  Frameworks like MapReduce, Dryad, and Spark help data scientists to focus on their business rather than wasting time on designing the distributed tasks and fault-tolerance. </p><p>There are some constraints in previous frameworks that MapReduce lacks abstractions for leveraging distributed memory so makes it inefficient for those that reuse intermediate results across multiple computations and lacks high interactive flexibility, programmers may have trouble implementing some complex algorithms. </p><p>Spark is an implementation of a new abstraction called resilient distributed datasets(RDDs), which are fault-tolerant, parallel data structures that let users explicitly persist intermediate results in memory, control their partitioning to optimize data placement, and manipulate them using a rich set of operators.</p><h2> RDD</h2><p>RDD(Resilient Distributed Dataset) is a collection of Read-Only and Partitioned records. RDDs can only be created through deterministic operations on either 1) data in stable storage or 2) other RDDs. Spark uses <em>Lineage</em> to keep track of how each RDD is transformed from previous datasets.<img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/lineage.jpg" alt="lineage"></p><p>Spark provides <em>Action</em> as well as <em>Transformation</em>. Action calculate RDDs and gets a result. Transformation imports data from external sources or transform an old RDD to a new Read-Only RDD.</p><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/Transformation_Action.jpg" alt="Transformation_Action"></p><h2>Computation Schedule</h2><p>RDDs are stored in distributed servers, so when we need to do Transformation,  systems need to fetch previous RDD in the corresponding servers. There are two kinds of Transformations that forms different dependency between RDDs</p><ul><li>Narrow Dependency : Each partition of the parent RDD is used by at most one partition of  the child RDD.</li><li>Wide Dependency : Multiple child partitions may depend on the parent RDD.</li></ul><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/Dependencies.png" alt="Dependencies"></p><p>Spark speeds up Transformation by optimizing the Transformations related to <em>Narrow Dependency</em>. First, narrow dependencies allow for pipelined execution on one cluster node, which can compute all the parent partitions.  Second, recovery after a node failure is more efficient with a narrow dependency, as only the lost parent partitions need to be recomputed.</p><p>In contrast, in a lineage graph with wide dependencies, a single failed node might cause the loss of some partition form all the ancestors of an RDD, requiring a complete re-execution.</p><p>Overall, a RDD are consistent of  the following elements:</p><ul><li>Its partitions</li><li>Its parent partitions</li><li>Transformation</li><li>Its metadata(eg, data type, storage position etc.)</li></ul><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/stage.jpg" alt="stage"></p><p>When user calls Action to process computation on RDD, Spark will build different stages according to lineages. Hence, Spark can build a job stage that contains as many Narrow Dependencies as possible to speed up the whole system’s efficiency. The boundaries of the stages are the shuffle operations required for wide dependencies, or any already computed partitions that can short-circuit the computations of a parent RDD. After building the job stages, Spark then launches tasks to compute missing partitions from each stage until it has computed the target RDD.</p><p>While scheduling Tasks, Spark assigns tasks to machines based on data locality. The task will directly be processed by those nodes that is already holds the partition needed in memory. Otherwise, if a task processes a partition for which the containing RDD provides preferred locations(eg, an HDFS file), we send it to those.</p><h2>Fault-Tolerance</h2><p>Spark can re-compute the content of a failed RDD by dependencies from lineage graph. But there is a wide dependency during the re-computation, which means we have to re-compute all the RDD it depends, also, Spark won’t store all the RDD in the memory, or it will soon run out of memory. So we have to manually do persist, if necessary. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.persist(REPLICATE)</span><br></pre></td></tr></table></figure><h2>Conclusion</h2><p>Spark RDD has the feature of:</p><ul><li>Store all info directly on memory</li><li>Interactive API</li><li>Find both Narrow and Wide Dependencies, while narrow one is more efficiency</li><li>Have Checkpoint to failover from wide dependency failure</li></ul><p>But we still need to be aware that Spark is not a replacement for MapReduce: For those model and algorithms already fit in MapReduce, Spark won’t have a more efficient result for them.</p><p>&lt;h2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Spark&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Spark is a successor of MapReduce to process distributed big-data computing tasks.  Frameworks like M</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Spark" scheme="https://zjuytw.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>6.824 CRAQ lecture note(Pending for updated)</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-14.OCC(FaRM)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-14.OCC(FaRM)/</id>
    <published>2021-08-09T09:13:23.329Z</published>
    <updated>2021-08-09T10:44:28.217Z</updated>
    
    <content type="html"><![CDATA[<h1>FaRM (To be updated...)</h1><h2>Introduce</h2><p>Microsoft’s main memory distributed computing platform, FaRM can provide distributed transactions with serializability, high performance, durability, and high availability using RDMA and a new, inexpensive approach to providing non-volatile DRAM.</p><h3>NVRAM</h3><ul><li>Strategy to become non-volatile:<ul><li>Using battery as back-up power, once the electric power fails, the system goes with battery and do all context saving work then shut down</li><li><strong>Note:</strong> This scheme is just helpful when encounters power failure, is not applicable for hardware/ software failure. –Because otherwise the system just shut down directly.</li></ul></li></ul><h2>Optimistic Concurrency Control</h2><p>For a optimistic lock, we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Xaction begin</span><br><span class="line">read all values without lock</span><br><span class="line">use a buffer to store write</span><br><span class="line">commit write</span><br><span class="line">Xaction end</span><br></pre></td></tr></table></figure><p>Before commit transaction to storage, system need to verify the validation of the transaction. If success, then commit, else abort all the operation related to transaction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tx.create()</span><br><span class="line">o = tx.copyRead(OID)</span><br><span class="line">o.value += 1</span><br><span class="line">tx.write(OID, o)</span><br><span class="line">ok := tx.commt()</span><br></pre></td></tr></table></figure><h2>Transaction Management</h2><p><img src="/2021/08/09/6.824-14.OCC(FaRM)/Farm1.jpg" alt="Farm1"></p><p> <img src="/2021/08/09/6.824-14.OCC(FaRM)/OCC_commit_protocol.png" alt="OCC commit protocol"></p><p>Refer to the above figures about server layout and OCC commit protocol. Let’s talk about FaRM’s transaction management. FaRM uses OCC and 2PC to achieve its serializability.</p><p><strong>2PC strategy</strong></p><ul><li> Read without lock, read(&amp; value, &amp;version)</li><li>use one-side RDMA to read</li><li>Lock the revised data<ul><li>primary polling for data which is (use DRMA to poll)<ul><li>locked, so send reject</li><li>VERS changed, then send reject</li><li>else, then set the lock and send yes.( To avoid racing, use CHECK&amp;SET atomic operation here)</li></ul></li></ul></li><li>do validation for those no changed shard<ul><li>To check if version changed or locked]</li></ul></li><li>Commit</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;FaRM (To be updated...)&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Microsoft’s main memory distributed computing platform, FaRM can provide distribute</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="FaRM" scheme="https://zjuytw.github.io/tags/FaRM/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Spanner lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/</id>
    <published>2021-08-09T09:13:19.948Z</published>
    <updated>2021-08-09T10:05:42.935Z</updated>
    
    <content type="html"><![CDATA[<h1>Spanner </h1><h1>Introduce</h1><p>Spanner is Google’s scalable, multi-version, globally-distributed, and synchronously-replicated data. Spanner is the first global distributed Database and support external consistency. It is a big framework, but I just want to focus on some particular points – Mainly about external consistency and True-Time mechanism.</p><p>You may look for more detailed illustration on Google’s Spanner paper or other’s blog about spanner.</p><h2>Consistency</h2><p><img src="/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/spanner1.webp" alt="spanner1"></p><p>Assume that if we have 3 Data Centers, we have to send data across all data centers to keep consistency.  To keep a strong consistency, Google uses paxos to send logs and reach consensus. Moreover, google has its True-Time mechanism to reach external consistency, but let’s talk about it later.</p><h3>R/W transactions</h3><p>For a transaction both need to read and write,spanner uses 2PC.</p><ul><li>Pick a unique transaction ID to identify</li><li>Do all the reads first then do all writes</li><li>Send read request to all leaders in DCs, then DC lock the resources and reply</li><li>Choose a leader as transaction coordinator</li><li>Send writes request to all leaders, and leader gonna send prepared msg to followers into paxos log to make sure leader isn’t crashed and lost lock</li><li>Once one leader finishes promising to followers, it sends a Yes to the coordinator</li><li>Once coordinate received all Yes signal, it start to commit writes to its followers</li><li>Then tell other leader to commit</li></ul><h3>R/O transactions</h3><p>For Read-Only transactions, spanner speeds up this type by no 2PC and no locks.</p><blockquote><p> Start with a question that why we not directly read the latest value of each key needed?</p><p>Answer: </p><p>For a transaction T3 that print(x,y), if we have the timeline of below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1 :  wx,wy,commit</span><br><span class="line">T2 :                      wx,wy,commit               </span><br><span class="line">T3 :                 Rx                 Ry</span><br></pre></td></tr></table></figure><p>T3 just saw x,y yielded by different transaction which breaks the serializability.</p></blockquote><p>From the example above, we know that our read need to fetch data in the same version. So spanner need to at least reach level of <em>Snapshot Isolation</em>.</p><pre><code>&lt;h4&gt; Snapshot Isolation&lt;/h4&gt;</code></pre><p>Spanner gives each transaction a timestamp, which makes all transactions execute in Timestamp order.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R/W&#x27;s TS = commit time</span><br><span class="line">R/O&#x27;s TS = start time</span><br></pre></td></tr></table></figure><p> Because Spanner has a multi-versions DB, that stores many versions (Not all version but a transient period’s versions). For R/O Xactions, DB can find the value with latest version less than R/O’s start time.</p><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T1 @TS10:  wx,wy,commit()</span><br><span class="line">                    ⬆x@10 = 9, y@10 = 10</span><br><span class="line">T2 @TS20:                      wx,wy,commit</span><br><span class="line">                               ⬆x@20 = 8, y@10 = 12</span><br><span class="line">T3 @TS15:                 Rx                 Ry</span><br><span class="line">   ⬆ read the TS of 10</span><br></pre></td></tr></table></figure><blockquote><p>Q: what if local replica is minority, how to get latest version less than TS?</p><p>A: Every paxos peer gets log from leader, if one follower’s last log’s Timestamp &lt; TS, it will wait for leader’s msg till last log’s TS exceeds required TS</p></blockquote><h2> True-Time mechanism</h2><p>Because of working volts and inner CPU frequency , it is likely every DC’s time can not keep sync without outside’s help. We have two consequence:</p><blockquote><ol><li><p>R/O transaction’s TS too large</p><p> Answer: correct in practice but slow, it will wait for paxo replicas to catch up</p></li><li><p>R/O transaction’s TS too small</p><p>Answer: it may miss recent writes, and not external consistent</p></li></ol></blockquote><p>In Spanner’s scheme, Google has a satellites to keep synchronize its official time to each DC.  In considering of latency in transportation, Spanner give each TT a range to mark its {earliest, latest} arrival time.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TT interval = [Earliest, Latest]</span><br></pre></td></tr></table></figure><p>And we have a start rule: </p><ul><li><p>TS = TT.now(). latest</p></li><li><p>For R/O, TS is the latest TT on start</p></li><li><p>For R/W, TS is the latest TT on commit</p></li><li><p>Commit Delay strategy</p><ul><li>R/W transaction delays till transaction’s commit time &lt; TS.now().earliest</li><li>To make sure commit time in the past.</li></ul></li></ul><h2>Extends</h2><p>There are many details I haven’t covered, if you are interest in them. You can just search on Google for English Blogs, as for Chinese Blogs, I do recommend <a href="https://www.jianshu.com/p/6ae6e7989161">Google-Spanner 论文的思考</a> and <a href="https://toutiao.io/posts/zdqrx0/preview">Spanner, 真时和CAP理论</a></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Spanner &lt;/h1&gt;

&lt;h1&gt;Introduce&lt;/h1&gt;

&lt;p&gt;Spanner is Google’s scalable, multi-version, globally-distributed, and synchronously-replicated da</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Spanner" scheme="https://zjuytw.github.io/tags/Spanner/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Frangipani lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-11.Frangipani(Cache%20Consitency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-11.Frangipani(Cache%20Consitency)/</id>
    <published>2021-08-09T09:12:42.351Z</published>
    <updated>2021-08-09T10:05:31.237Z</updated>
    
    <content type="html"><![CDATA[<h1>Frangipani(To be updaed)</h1><h2>Introduce</h2><p>While Frangipani is a paper published in 1997, I just want to talk about cache consistency in detail.</p><p>The paper are mainly discussed following 3 aspects:</p><ul><li>cache coherence</li><li>distributed transactions</li><li>distributed crash recovery</li></ul><h2>Cache consistency</h2><p>Rules for cache coherence</p><ul><li>No cached data without data’s lock</li><li>acquire lock then read from petal</li><li>write to petal then release lock</li></ul><h2>Extends</h2><p>For more details, you may refer to this Blog<a href="https://www.cnblogs.com/jamgun/p/14668522.html">Frangipani: A Scalable Distributed File System 论文阅读</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Frangipani(To be updaed)&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;While Frangipani is a paper published in 1997, I just want to talk about cache con</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Frangipani" scheme="https://zjuytw.github.io/tags/Frangipani/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Aurora lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-10.Aurora/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-10.Aurora/</id>
    <published>2021-08-09T09:11:36.427Z</published>
    <updated>2021-08-09T10:05:22.628Z</updated>
    
    <content type="html"><![CDATA[<h1>Aurora</h1><h2>Introduce</h2><p>Amazon Aurora is a relational database service for OLTP workloads offered as part of Amazon Web Services. Aurora is designed to address the constraint of bottleneck of network throughput, it also allows for fast crash recovery, failovers to replicas and fault-tolerant.</p><h2> History</h2><h3> EC2</h3><p>EC2 is Elastic Cloud 2 for short. Users can rent instances of EC to deploy their Web Server or DB services. </p><p>Each instance of EC2 are running in the Virtual Machine on the physical node, and all their storage is redirected to a external locally attached disk via VMM(Virtual Machine Monitor). </p><ul><li>For stateless web server, EC2 is convenient for its scalability and high-performance</li><li>For a storage system like DB service, there are bunch of contraint:<ul><li>Limited expansion : MySQL on EC2 is not able to do write expansion</li><li>Limited fault-tolerance : Once the node fails, we can not access to locally attached disk for data</li></ul></li></ul><p><img src="/2021/08/09/6.824-10.Aurora/EC2.png" alt="EC2"></p><h3>EBS</h3><p>EBS is Elastic Block Store for short. It is the progress of EC2 that Amazon uses a multiple instances of EBS to do a <em>Chain-Replication</em> to have fault-tolerance.</p><p>Constraints:</p><ul><li>Network bottleneck because of large amount of data is sending by network</li><li>Not FT, for Amazon always put EBS in same Data Center.</li></ul><h3>RDS</h3><p>To deal with the constraints mentioned above, Amazon provides a more fault-tolerance system,  Relational Database Service<img src="/2021/08/09/6.824-10.Aurora/Aurora-RDS.png" alt="Aurora-RDS"></p><p>Compared with EBS, RDS can survive if a whole AZ(Available Zone) fails, but have to send write between primary and replica, which means the performance of write decreases as well as the data of cross-AZ increases dramatically.</p><h2> Aurora</h2><p>For a new system, Amazon was eager to have both fault-tolerance and performance done well, as following:</p><ul><li>Write although one AZ down</li><li>Read although one AZ down + one replica down</li><li>Minor slow won’t affect overall efficiency</li><li>Fast Re-replication</li></ul><p><img src="/2021/08/09/6.824-10.Aurora/Aurora.png" alt="Aurora"></p><p>Feature of Aurora:</p><ul><li>Only send log record– The storage server can apply the log to page, so Aurora can just apply log without applying dirty page, which reduces the network workload</li><li>Only 4 Nodes required to make consensus</li></ul><h3>Quorum Scheme</h3><p>If we have:</p><ul><li>N Replicas<ul><li>W for Writers’ consensus to move</li><li>R for Readers’ consensus to move</li></ul></li><li>R + W = N +1, this makes sure W &amp; R will get least one overlap</li></ul><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = 3</span><br><span class="line">R = W = 2 or R=3, W = 1</span><br><span class="line">We can adjust speed of R or W by adjusting the number of them</span><br></pre></td></tr></table></figure><p>In Aurora, N = 6, W = 4, R =3</p><h3>Conclusion</h3><p>In a word, Aurora optimized data transportation type and used quorum write scheme which got 35 times speeds up compared with RDS’s MySQL.</p><h2>Extends</h2><p>You can find more detailed description of Aurora’s work flow in <a href="https://zhuanlan.zhihu.com/p/319806107">Amazon Aurora: 避免分布式一致性</a> and <a href="https://zhuanlan.zhihu.com/p/338582762">浅谈Amazon Aurora</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Aurora&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Amazon Aurora is a relational database service for OLTP workloads offered as part of Amazon Web Serv</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Aurora" scheme="https://zjuytw.github.io/tags/Aurora/"/>
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
  </entry>
  
  <entry>
    <title>6.824 CRAQ lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-9.CRAQ/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-9.CRAQ/</id>
    <published>2021-08-09T09:08:08.068Z</published>
    <updated>2021-08-09T10:05:27.977Z</updated>
    
    <content type="html"><![CDATA[<h1>CRAQ</h1><h2>Introduce</h2><p>Start with awareness that Paxos, Raft’s consensus algorithms have bottleneck in leader, because leader need to send logs to all followers and wait for majority of their reply.</p><p>Chain replication is purposed in 2004, its scheme ensures serializability meanwhile the whole workload is distributed among the system(to each node).</p><p>CRAQ is an improvement on Chain Replication, maintains strong consistency while greatly improving read throughput. <strong>But in this article, I will just mainly talk about Chain Replication.</strong></p><h2>Chain Replication</h2><p><img src="/2021/08/09/6.824-9.CRAQ/CR.png" alt="CR"></p><p>Use the chain on Figure 1 and a remote coordinating cluster like ZK, Raft or Paxos to check heartbeat and send configurations to nodes on the chain.</p> <h3>Failure Recovery</h3><ul><li>Head fails: Its successor becomes head</li><li>Tail fails: Its predecessor becomes tail</li><li>Intermediate fails: predecessor send MSG to its successor</li></ul><h3> Evaluation </h3><ul><li>Pros:<ul><li>Head’s workload is far less than Raft’s leader’s. Because leader needs to send sync. packets and handle R/W log</li></ul></li><li>Cons:<ul><li>Every node can slow down the whole system. Raft, instead, just need a majority of nodes keep running.</li></ul></li></ul><h2> Extend</h2><p>To read more about CRAQ, you may find articles in <a href="https://zhuanlan.zhihu.com/p/344808961">浅谈Primary-Back Replication和Chain Replication</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CRAQ&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Start with awareness that Paxos, Raft’s consensus algorithms have bottleneck in leader, because leader</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="CRAQ" scheme="https://zjuytw.github.io/tags/CRAQ/"/>
    
  </entry>
  
  <entry>
    <title>6.824 ZooKeeper lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-8.ZooKeeper/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-8.ZooKeeper/</id>
    <published>2021-08-09T09:07:17.945Z</published>
    <updated>2021-08-09T10:44:13.292Z</updated>
    
    <content type="html"><![CDATA[<h1>ZooKeeper(To be continuely updated)</h1><h2>Introduction</h2><p>ZooKeeper is a very popular service for coordinating processes of distributed applications, it provides a simple and high performance kernel for building more complex coordination primitives. We users can deploy ZK in many distributed applications like, services registration and discovery, cluster management as a coordinator.</p><p>ZooKeeper has the following features:</p><ul><li><p>Sequential Consistence</p><p> All client see the same data that one client’s transactions will applied on ZK in its original order</p></li><li><p>Atomicity</p></li><li><p>Single View</p><p>Clients see the same data no matter it talk to which server</p></li><li><p>High performance</p></li><li><p>High availability</p></li></ul><h2>Implementation</h2><p>The node in the tree is called <em>znode</em>, which stores data and node information. The main task for ZK is to coordinate but not file storage, so znode’s file size is smaller than 1MB</p><p><img src="/2021/08/09/6.824-8.ZooKeeper/ZooKeeper_namespace.png" alt="ZooKeeper namespace"></p><p>There are two types of znode</p><ul><li>Ephemeral : ZK will automated delete it, after session finishes</li><li>Persistent : Need client to delete explicitly</li></ul><h3>Node information</h3><p>Znode has a <em>sequential</em> flag, it will be issued a monotonically increased number  if flag is true when created, to mark the global sequential order of the znode. It also maintains a state information table call <em>Stat</em>.</p><p><img src="/2021/08/09/6.824-8.ZooKeeper/Znode_stat.png" alt="Znode stat"></p><h3>Sequential Consistency</h3><p>To achieve sequential consistency, ZK uses its own ZAB consensus algorithm, like Raft and Paxos in implementation but different in some details.</p><p>ZK guarantees the <strong>single client</strong> FIFO transactions order. For R/W, ZK has different rules</p><ul><li>For reads, Leader/Follower/Observer all can directly handle read request. (read locally)</li><li>For write, all writes requests need to send to leader then wait till reaching consensus.</li></ul><p><strong>Note:</strong> For those need read a fresh data, client may send a <sync> to leader, then send read to replica.</sync></p><h2> Conclusion</h2><p>This is a simply discussion about ZK, I am just dabble in distributed systems, so I will keep updating this article as my concept of ZK grows </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ZooKeeper(To be continuely updated)&lt;/h1&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;ZooKeeper is a very popular service for coordinating processes of di</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="ZooKeeper" scheme="https://zjuytw.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Lab4</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-lab4/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-lab4/</id>
    <published>2021-08-09T08:55:23.224Z</published>
    <updated>2021-08-09T10:47:25.908Z</updated>
    
    <content type="html"><![CDATA[<h1>Lab4</h1><h2> Overview </h2><p>Finally, we make it to the final lab, no doubt that it’s the most challenging work among 4 labs. In this part, we gonna implement two main K-V storage system, one is shardmaster and one is shardkv. The specific service of them will be discussed in FRAMEWORK part, let’s talk how much workload this lab may take first.</p><p>Compared with former labs, we have no paper to refer to  and no framework to follow. This lab emphasizes more on real producing environment that we need balance load (<strong>so shard comes</strong>) and make shard movable among muti-raft. So <em>shardmaster</em> is a configuration center that decides which raft group servers which shards, and <em>shardkv</em> is exactly one raft group that need to provide <em>PUT/APPEND/GET</em> service to their served shards. (I will put a figure in **conclusion **to make you easier to understanding)</p><h2> Lab4A</h2><p>Now we are to build shardmaster, which is a group consensus configuration center and records current serving raft groups and which shards one raft group servers. Our task is to adjust shards and dispatch every configuration it receives. The whole design frame is alike as <em>lab3</em>, so we can just copy lab3’s code and revise some part to satisfy the need of <strong>Rebalance Shards</strong> in each raft group.</p><p>So what we gonna do is:</p><ul><li>Build the basic K/V storage system based on lab3</li><li>Design a Shard Rebalance mechanism that meet the lab’s request that <em>The shardmaster should react by creating a new configuration that includes the new replica groups. The new configuration should divide the shards as evenly as possible among the full set of groups, and should move as few shards as possible to achieve that goal. The shardmaster should allow re-use of a GID if it’s not part of the current configuration</em></li><li>Implement <em>Join( ), Leave(), Move(), Query()</em> </li></ul><h3>Implementation</h3><p>The whole design is similar to <em>kvraft</em>, because we have implemented consistency and deduplicated underlayer, we can just mainly focus on <em>Join() &amp; Leave( )</em>. I just simply use the strategy that move one shard from largest group (which owns most shards) to smallest group. The boundary condition is:</p><ul><li>Group 0 should have no shards, which means once group 0 has shard, we should select it as largest group and no select it when its shards is least.</li><li>Every raft group’s shards disparity should &lt;= 1</li></ul><p>So let’s consider query() and move() first:  For query(<em>idx int</em>), just return <em>idx-th</em> index’s config and return latest config if <em>idx</em> == -1. <strong>Note : If idx exceeds the array length,  we should return a invalid config for upper layer’s double check rather than throwing a exception and exit</strong>. For <em>move()</em>, we just move one shard from one raft group to another. No more adjusting needed.</p><p>Then Join() and Leave(), these two function have both <em>Rebalance Shards</em> part which need we think carefully before coding. There is two allocation strategies: one is that I formerly described and another is <em>consistent hash</em>, it is a more realistic way to address <em>load balance</em>. (But I just use the straightforward way). Once we decided the <em>rebalance strategy</em>, what left is much easier that to handle Join(), we can just append a group has no shard then call <em>rebalance()</em>, to handle Leave(), we can just assign left group’s shards to group 0 then call rebalance().</p><p>Once one of <em>join, leave, move</em> is done, append a new config corresponding to it to <em>configs</em>.</p><h2> Lab4B</h2><p>This part takes me longest time to consider whole logic and the same time to debug. So I hope there are some problem to be addressed before programming.</p><p>First, what should one <em>shardKV</em> do. <em>shardKV</em> is a raft group which <em>shardMaster</em> previously recorded in config, to make you easier to understand, the normal format is like: “[server-101-0 server-101-1 server-101-2]” which means raft group 101 has 3 raft peers from 0 - 2. So these 3 servers is required to provide Key/Value service for their served shards. So simply speaking, if shards are statistic, a shardKV is just like kvraft.</p><p>Second, shards movement. Because shards are not fixed on one group, we should move shard from one group to another, so problem comes that <strong>which information should be delivered and how to make all group remains consistence.</strong></p><p>Third, which operations should be asynchronized in a group. If you haven’t have a figure of the whole frame in your head it’s OK, but let’s image first what we should do in this program. Start with configuration fetch, we should routinely check if there is a newer config then try to update. Then the migration method, it is unwise that once you need to get or send one shard’s data, you just stuck and wait for a reply. Third the GC thread, (optional)</p><p>Finally, how to achieve consistency on moving shards. It’s not hard to answer, we should just use leader to launch every request, use <em>rf.Start() to record</em>, once received command in <em>AppCh</em>, then start to process the command.</p><h3>Implementation</h3><p>To pass all test, we should consider Garbage Collection and Non-Stuck service when other shards are pulling. In whole program, we mainly implement ConfigFetch(), ShardMigration(), ShardGC(). All data structure and data stored is involved with these 3 main functions.</p><h4>Config Update</h4><p>As we discussed above, we will launch a thread to routinely fetch new config. Once we get a new config whose version number is <strong>exactly</strong> current number + 1, then we should set current config as new one. <strong>But here is the problem, how to deal with old data?</strong>  No matter we are gonna fetch shard from shrink group or push shard to escalated group, we both need to know the RPC address by <em>make_end(server_name string)</em>. So we need at least one previous config to send RPC call, **but do we need more previous config? ** If we apply every config once we detect a new one, it is likely we haven’t pull or push data before config change. So we need to save all previous config, and make sure one version’s shard data is all transported then we can recollect the memory. But it is much tremendous compared with another implementation I learned from <a href="http://tanxinyu.work/6-824/">Xinyu Tan’s Repo</a>that, we just wait till all group’s all shards are ready. So we can make sure that all group which apply new config are clear with previous shards’ data.</p><h4>ShardMigration</h4><p>For one shard move from one group to another, it is both OK that we can choose pull or push from either side. In my implementation, I choose to pull from shrink group. Now we can consider what data should be stored, like previous lab, we need both <em>kvtable &amp; ClerkRecord</em> to deduplicate. It is a general thought we can store these info. for every shard and migrate with shard. Also, we need a status id to notify current status. We need 4 status to mark different states.</p><ul><li>Serving (ready state)</li><li>Pulling (Config changes and this shard is prepared to serve after pulling data from previous one)</li><li>BePulling(Config changes and this shard is prepared to be pulled data by new group)</li><li>GCing (After fetch shard’s data, we need a new RPC call to tell previous one to delete shard)</li></ul><h4>ShardGC</h4><p>For those shards shrunk from previous config to current one, we are respond to recollect these memory. So we design a new mechanism to process GC, which means once new group successfully fetched shard data from previous one, (Pulling -&gt; GCing), there are a thread routinely check <em>GCing</em> state and send GC signal to other group to tell it, it’s OK to delete data.</p><h4> Hints</h4><ul><li><p>Every shard can receive request from client if they are in <em>Serving</em> and <em>GCing</em></p></li><li><p>All Thread should check if it’s leader, then begin to process formal job</p></li><li><p> To deal with unreliable network, we should use configure number to check if is the right request.</p></li><li><p>In GC step, the GCed group should first use Raft record the GC command then delete and send reply.(Or once this time it crashed, no one will notify it to GC again, because the current shard’s group has received the reply and turn GCing to Serving)</p></li><li><p>Time to detect <em>Wrong Group</em></p><ul><li>In previous design, we just exam <em>Sequence number</em>, but now we should do group exam to block those not serving shard’s request</li><li>It is not enough to exam it at first, just imagine a situation</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *ShardKV)</span> <span class="title">putAndAppend</span><span class="params">(cmd *Op)</span></span>&#123;</span><br><span class="line">key, value, op, cid, seq := cmd.Key, cmd.Value, cmd.Op, cmd.Cid, cmd.Seq</span><br><span class="line">kv.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> kv.mu.Unlock()</span><br><span class="line"><span class="comment">//shard := key2shard(key)</span></span><br><span class="line"><span class="comment">//if ok := kv.checkShard(shard); !ok&#123;</span></span><br><span class="line"><span class="comment">//cmd.Err = ErrWrongGroup</span></span><br><span class="line"><span class="comment">//return</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">ok := kv.updateClerkMap(cid, seq, shard)</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line">then ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    if we do not exam shard in <em>Put, Append, Get</em>, we may have inconsistency consequence</p><ul><li>Shard have updated(Because of asynchrony flow), and it is now not serving in this group. Data do have <em>Put, Append, Get</em> and clerkRecord updated. But it won’t be watched in new serving group</li></ul></li></ul><p>So we need a mechanism to tell previous Public interface (Put(), Append(), Get()) that our shards have changed, that there is an ErrWrongGroup out there. Thus I adapted a different way to watch progress of each operation, channel. That every operation gets its channel identified by the return index value of <em>rf.Start()</em>. So once the command is executed, the kvraft will notify interface that operation has been done by channel(as well as err).</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *ShardKV)</span> <span class="title">getChan</span><span class="params">(raftIndex <span class="keyword">int</span>, create <span class="keyword">bool</span>)</span><span class="title">chan</span> <span class="title">Op</span></span>&#123;</span><br><span class="line">kv.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> kv.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> _,ok := kv.chanMap[raftIndex]; !ok&#123;</span><br><span class="line"><span class="keyword">if</span> !create&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">kv.chanMap[raftIndex] = <span class="built_in">make</span>(<span class="keyword">chan</span> Op,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> kv.chanMap[raftIndex]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> kv.chanMap[raftIndex]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kv *ShardKV)</span> <span class="title">listen</span><span class="params">(ch <span class="keyword">chan</span> Op, index <span class="keyword">int</span>)</span> <span class="title">Op</span></span>&#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> op,ok := &lt;-ch:</span><br><span class="line"><span class="keyword">if</span> ok&#123;</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line">kv.mu.Lock()</span><br><span class="line"><span class="built_in">delete</span>(kv.chanMap, index)</span><br><span class="line">kv.mu.Unlock()</span><br><span class="line"><span class="keyword">return</span> op</span><br><span class="line"><span class="keyword">case</span> &lt;- time.After(time.Duration(<span class="number">500</span>) * time.Millisecond):</span><br><span class="line"><span class="keyword">return</span> Op&#123;Err: ErrWrongLeader&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test Result:</p><p><img src="/2021/08/09/6.824-lab4/Lab4SingleTest.png" alt="Lab4 SingleTest"></p><p>100 times tests result:<img src="/2021/08/09/6.824-lab4/lab4TestA.png" alt="lab4 TestA"></p><p><img src="/2021/08/09/6.824-lab4/lab4TestB.png" alt="lab4 TestB"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Lab4&lt;/h1&gt;

&lt;h2&gt; Overview &lt;/h2&gt;

&lt;p&gt;Finally, we make it to the final lab, no doubt that it’s the most challenging work among 4 labs. In t</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Lab Note" scheme="https://zjuytw.github.io/tags/Lab-Note/"/>
    
    <category term="ShardKV Storage" scheme="https://zjuytw.github.io/tags/ShardKV-Storage/"/>
    
  </entry>
  
</feed>
