<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://zjuytw.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjuytw.github.io/"/>
  <updated>2021-09-10T17:11:30.920Z</updated>
  <id>https://zjuytw.github.io/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1894. Find the Student that Will Replace the Chalk</title>
    <link href="https://zjuytw.github.io/2021/09/11/1894.%20Find%20the%20Student%20that%20Will%20Replace%20the%20Chalk/"/>
    <id>https://zjuytw.github.io/2021/09/11/1894.%20Find%20the%20Student%20that%20Will%20Replace%20the%20Chalk/</id>
    <published>2021-09-10T17:11:51.276Z</published>
    <updated>2021-09-10T17:11:30.920Z</updated>
    
    <content type="html"><![CDATA[<h1>1894. Find the Student that Will Replace the Chalk</h1><h2>Description</h2><p><img src="/2021/09/11/1894.%20Find%20the%20Student%20that%20Will%20Replace%20the%20Chalk/1894-1.png" alt="image-20210911010942519"></p><p><img src="/2021/09/11/1894.%20Find%20the%20Student%20that%20Will%20Replace%20the%20Chalk/1894-2.png" alt="image-20210911010953883"></p><h2>Solution</h2><p>presum + binary search</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">chalkReplacer</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; chalk, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(chalk[<span class="number">0</span>] &gt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chalk.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            chalk[i] += chalk[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(chalk[i] &gt; k) <span class="keyword">return</span> i; </span><br><span class="line">        &#125;</span><br><span class="line">        k %= chalk.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">upper_bound</span>(chalk.<span class="built_in">begin</span>(), chalk.<span class="built_in">end</span>(), k) - chalk.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1894. Find the Student that Will Replace the Chalk&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/11/1894.%20Find%20the%20Student%20t</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Prefix Sum" scheme="https://zjuytw.github.io/tags/Prefix-Sum/"/>
    
  </entry>
  
  <entry>
    <title>808. Soup Servings</title>
    <link href="https://zjuytw.github.io/2021/09/11/808.%20Soup%20Servings/"/>
    <id>https://zjuytw.github.io/2021/09/11/808.%20Soup%20Servings/</id>
    <published>2021-09-10T17:11:51.257Z</published>
    <updated>2021-09-10T17:08:37.892Z</updated>
    
    <content type="html"><![CDATA[<h1>808. Soup Servings</h1><h2>Description</h2><p><img src="/2021/09/11/808.%20Soup%20Servings/808-1.png" alt="image-20210911005952145"></p><p><img src="/2021/09/11/808.%20Soup%20Servings/808-2.png" alt="image-20210911010004382"></p><h2>Solution</h2><p>In this problem, because all soup are decresed in multiple <code>25</code>, so we could divid N by 25 then do dp on each one step.</p><p>dp[i] [j] -&gt; the desired value with <code>i</code> ml and <code>j</code> ml soup.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = 0.25 * (dp[i-4][j] + dp[i-3][j-1] + dp[i-2][j-2] + dp[i-1][j-3])</span><br></pre></td></tr></table></figure><p>And we note the corner case are:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = 0.5 (for i &lt;= 0 and j &lt;= 0)</span><br><span class="line">dp[i][j] = 1 (for i = 0, j &gt;= 1)</span><br><span class="line">dp[i][j] = 0 (for i &gt;= 1, j = 0)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">soupServings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        n = <span class="built_in">ceil</span>(<span class="number">1.0</span> * n / <span class="number">25</span>);</span><br><span class="line">        <span class="keyword">if</span>(n &gt;= <span class="number">500</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, vector&lt;<span class="keyword">float</span>&gt;(n+<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//dp[i][j] = 0.25 * (dp[i-4][j] + dp[i-3][j-1] + dp[i-2][j-2] + dp[i-1][j-3])</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                dp[i][j] = <span class="number">0.25</span> * (dp[<span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">4</span>)][j] + dp[<span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">3</span>)][j<span class="number">-1</span>] + dp[<span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">2</span>)][<span class="built_in">max</span>(<span class="number">0</span>, j<span class="number">-2</span>)] + dp[i<span class="number">-1</span>][<span class="built_in">max</span>(<span class="number">0</span>, j<span class="number">-3</span>)]);</span><br><span class="line">                dp[j][i] = <span class="number">0.25</span> * (dp[<span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">4</span>)][i] + dp[<span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">3</span>)][i<span class="number">-1</span>] + dp[<span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">2</span>)][<span class="built_in">max</span>(<span class="number">0</span>, i<span class="number">-2</span>)] + dp[j<span class="number">-1</span>][<span class="built_in">max</span>(<span class="number">0</span>, i<span class="number">-3</span>)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/808.%20Soup%20Servings/808-3.png" alt="image-20210911010735627"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;808. Soup Servings&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/11/808.%20Soup%20Servings/808-1.png&quot; alt=&quot;image-20210911005952145&quot;&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="NO AC first time" scheme="https://zjuytw.github.io/tags/NO-AC-first-time/"/>
    
  </entry>
  
  <entry>
    <title>798. Smallest Rotation with Highest Score</title>
    <link href="https://zjuytw.github.io/2021/09/08/798.%20Smallest%20Rotation%20with%20Highest%20Score/"/>
    <id>https://zjuytw.github.io/2021/09/08/798.%20Smallest%20Rotation%20with%20Highest%20Score/</id>
    <published>2021-09-08T12:34:08.824Z</published>
    <updated>2021-09-08T11:47:22.091Z</updated>
    
    <content type="html"><![CDATA[<h1>798. Smallest Rotation with Highest Score</h1><h2>Description</h2><p><img src="/2021/09/08/798.%20Smallest%20Rotation%20with%20Highest%20Score/798-1.png" alt="image-20210908191353540"></p><h2>Solution</h2><p>Let’s first check how many times we need take to move  <code>ith element</code>  to <code>nums[i]</code> position where is the first index that gets point.</p><p>Take nums = [2,3,1,4, 0] as example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A[0] = 2 move to 2&#x27;s index, k = 3 = (0 - A[0] + 5) % 5 </span><br><span class="line">A[1] = 3 move to 3&#x27;s index, k = 3 = (1 - A[1] + 5) % 5</span><br><span class="line">A[2] = 1 move to 1&#x27;s index, k = 1 = (2 - A[2] + 5) % 5</span><br><span class="line">A[3] = 4 move to 4&#x27;s index, k = 4 = (3 - A[3] + 5) % 5</span><br><span class="line">A[4] = 0 move to 0&#x27;s index, k = 4 = (4 - A[4] + 5) % 5</span><br></pre></td></tr></table></figure><p>For one element, after move <code>k</code> times, it have reached to the point that one more step move will make it lose point. So we define a array to store the index that all element firstly lose point.</p><p>And we could find that when K = <code>k</code>, A[i] is happened to lost point, then k = k+1, A[i] still can’t get point, but the first element on the head of the array rotate back to the tail will get new point.</p><p>So we have the recurrence relation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[k+1] += dp[k] - 1  (Note we are counting the numer of losing point&#x27;s element)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bestRotation</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[(i - nums[i] + <span class="number">1</span> + n) % n] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] += dp[i<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">            res = dp[res] &gt; dp[i] ? i : res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;798. Smallest Rotation with Highest Score&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/08/798.%20Smallest%20Rotation%20with%20Highe</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="NO AC first time" scheme="https://zjuytw.github.io/tags/NO-AC-first-time/"/>
    
  </entry>
  
  <entry>
    <title>502. IPO</title>
    <link href="https://zjuytw.github.io/2021/09/08/502.%20IPO/"/>
    <id>https://zjuytw.github.io/2021/09/08/502.%20IPO/</id>
    <published>2021-09-08T12:34:08.822Z</published>
    <updated>2021-09-08T12:31:56.855Z</updated>
    
    <content type="html"><![CDATA[<h1>502. IPO</h1><h2>Description</h2><p><img src="/2021/09/08/502.%20IPO/502-1.png" alt="image-20210908203015388"></p><p><img src="/2021/09/08/502.%20IPO/502-2.png" alt="image-20210908203024856"></p><h2>Solution</h2><p>Fix capital then find maximal profit by priority_queue</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;a, pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaximizedCapital</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> w, vector&lt;<span class="keyword">int</span>&gt;&amp; profits, vector&lt;<span class="keyword">int</span>&gt;&amp; capital)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//find the maximal profit under current capital</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, less&lt;&gt;&gt; pq;</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; projs;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; profits.<span class="built_in">size</span>(); i++)</span><br><span class="line">            projs.<span class="built_in">push_back</span>(&#123;profits[i], capital[i]&#125;);</span><br><span class="line">        <span class="built_in">sort</span>(projs.<span class="built_in">begin</span>(), projs.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, i;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i = start; i &lt; projs.<span class="built_in">size</span>() &amp;&amp; projs[i].second &lt;= w; i++)</span><br><span class="line">                pq.<span class="built_in">push</span>(projs[i].first);</span><br><span class="line">            start = i;</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> w;</span><br><span class="line">            &#125;</span><br><span class="line">            w += pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;502. IPO&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/08/502.%20IPO/502-1.png&quot; alt=&quot;image-20210908203015388&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/202</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
    <category term="Greedy" scheme="https://zjuytw.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>678. Valid Parenthesis String</title>
    <link href="https://zjuytw.github.io/2021/09/08/678.%20Valid%20Parenthesis%20String/"/>
    <id>https://zjuytw.github.io/2021/09/08/678.%20Valid%20Parenthesis%20String/</id>
    <published>2021-09-08T12:34:08.797Z</published>
    <updated>2021-09-08T08:04:23.715Z</updated>
    
    <content type="html"><![CDATA[<h1>678. Valid Parenthesis String</h1><h2>Description</h2><p><img src="/2021/09/08/678.%20Valid%20Parenthesis%20String/678-1.png" alt="image-20210908155643743"></p><h2>Solution</h2><p>Using a list to store the availiable number of <code>*</code> scaned forward. If we meet a ‘)’ and there is no ‘(‘ in the stack, then we gonna use <code>*</code> to match. </p><p>As for mismatched ‘(‘, we should use <code>*</code> following to match it.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(s.size()+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            count[i+<span class="number">1</span>] = count[i];</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                stk.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                count[i+<span class="number">1</span>]+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stk.<span class="built_in">empty</span>() &amp;&amp; !count[i+<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(!stk.<span class="built_in">empty</span>())    </span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    count[i+<span class="number">1</span>]-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> top = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(count[s.<span class="built_in">size</span>()] - count[top + <span class="number">1</span>] &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            count[s.<span class="built_in">size</span>()]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/08/678.%20Valid%20Parenthesis%20String/678-2.png" alt="image-20210908160331536"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;678. Valid Parenthesis String&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/08/678.%20Valid%20Parenthesis%20String/678-1.png&quot; alt=&quot;i</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Stack" scheme="https://zjuytw.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>1681. Minimum incompatibility</title>
    <link href="https://zjuytw.github.io/2021/09/04/1681.%20Minimum%20Incompatibility/"/>
    <id>https://zjuytw.github.io/2021/09/04/1681.%20Minimum%20Incompatibility/</id>
    <published>2021-09-04T05:44:13.953Z</published>
    <updated>2021-09-04T05:42:29.746Z</updated>
    
    <content type="html"><![CDATA[<h1>1681. Minimum incompatibility</h1><h2>Description</h2><p><img src="/2021/09/04/1681.%20Minimum%20Incompatibility/1681-1.png" alt="image-20210904133436617"></p><p><img src="/2021/09/04/1681.%20Minimum%20Incompatibility/1681-2.png" alt="image-20210904133509355"></p><h2>Solution</h2><p>We firstly compute the <code>cost[i]</code> , which <code>i</code> should be the mask of the elements in one set.</p><p>Then we compute <code>dp[mask]</code> , and the recurrence relation is :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[mask] = min(dp[mask ^ subset] + cost[subset])</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int minimumIncompatibility(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        if(n % k) return -1;</span><br><span class="line">        if(n == k) return 0;</span><br><span class="line">        vector&lt;int&gt; cost((1 &lt;&lt; n));</span><br><span class="line">        vector&lt;int&gt; freq(n+1);</span><br><span class="line">        for(int i = 0; i &lt; 1 &lt;&lt; n; i++)&#123;</span><br><span class="line">            if(__builtin_popcount(i) != n /k)</span><br><span class="line">                continue;</span><br><span class="line">            fill(freq.begin(), freq.end(), 0);</span><br><span class="line">            int flag = 1;</span><br><span class="line">            for(int j = 0; j &lt; n; j++)&#123;</span><br><span class="line">                if(i &amp; (1&lt;&lt;j))&#123;</span><br><span class="line">                    freq[nums[j]]++;</span><br><span class="line">                    if(freq[nums[j]] &gt; 1)&#123;</span><br><span class="line">                        flag = 0;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag)&#123;</span><br><span class="line">                int l = 1, r = n;</span><br><span class="line">                while(!freq[l])</span><br><span class="line">                    l++;</span><br><span class="line">                while(!freq[r])</span><br><span class="line">                    r--;</span><br><span class="line">                cost[i] = r-l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; dp((1 &lt;&lt; n), 1E6);</span><br><span class="line">        dp[0] = 0;</span><br><span class="line">        for(int mask = 0; mask &lt; 1 &lt;&lt; n; mask++)&#123;</span><br><span class="line">            if(__builtin_popcount(mask) %(n/k)) continue;</span><br><span class="line">            //enum subset</span><br><span class="line">            for(int subset = mask; subset &gt; 0; subset = (subset-1)&amp;mask)&#123;</span><br><span class="line">                if(__builtin_popcount(subset) != n/k) continue;</span><br><span class="line">                if(cost[subset])&#123;</span><br><span class="line">                    dp[mask] = min(dp[mask], dp[mask^subset] + cost[subset]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[(1 &lt;&lt; n)-1] == 1E6 ? -1 : dp[(1 &lt;&lt; n) -1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/04/1681.%20Minimum%20Incompatibility/1681-3.png" alt="image-20210904134149578"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1681. Minimum incompatibility&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/04/1681.%20Minimum%20Incompatibility/1681-1.png&quot; alt=&quot;im</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="State Compression" scheme="https://zjuytw.github.io/tags/State-Compression/"/>
    
  </entry>
  
  <entry>
    <title>链表中倒数第k个节点</title>
    <link href="https://zjuytw.github.io/2021/09/04/%E5%89%91%E6%8C%87%20Offer%2022.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>https://zjuytw.github.io/2021/09/04/%E5%89%91%E6%8C%87%20Offer%2022.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</id>
    <published>2021-09-04T05:44:13.951Z</published>
    <updated>2021-09-04T05:43:20.314Z</updated>
    
    <content type="html"><![CDATA[<h1>链表中倒数第k个节点</h1><h2>Description</h2><p><img src="/2021/09/04/%E5%89%91%E6%8C%87%20Offer%2022.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/offer22-1.png" alt="image-20210904131800934"></p><h2>Solution</h2><p>Using fast-slow pointers, let fast pointer firstly walk k step then slow and fast walk togerther.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode *fast = head, *slow = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;链表中倒数第k个节点&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/04/%E5%89%91%E6%8C%87%20Offer%2022.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Two Pointers" scheme="https://zjuytw.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>629. K Inverse Pairs Array</title>
    <link href="https://zjuytw.github.io/2021/09/04/629.%20K%20Inverse%20Pairs%20Array/"/>
    <id>https://zjuytw.github.io/2021/09/04/629.%20K%20Inverse%20Pairs%20Array/</id>
    <published>2021-09-04T05:44:13.945Z</published>
    <updated>2021-09-04T05:43:59.507Z</updated>
    
    <content type="html"><![CDATA[<h1>629. K Inverse Pairs Array</h1><h2>Description</h2><p><img src="/2021/09/04/629.%20K%20Inverse%20Pairs%20Array/629-1.png" alt="image-20210904111922280"></p><h2>Solution</h2><p>The tricky point is how to get the recurrence relation. We could ituitively give <code>dp[i][j]</code> as for i length array, the number of k’s inverse pairs. Then let’s figure out the recurrence relation</p><p>Assume we already have <code>dp[n][k]</code>, then we add one item afterwards. We have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4 5] 6</span><br><span class="line">↑ ↑ ↑ ↑ ↑ ↑</span><br></pre></td></tr></table></figure><p>We can insert 6 into 6 slot to get more <code>5,4,3,2,1,0</code> more inverse pairs.</p><p>so <code>dp[n][k] = dp[n-1][k] + dp[n-1][k-1] + ... + dp[n-1][k - (n-1)]</code></p><p>Then we could use <code>dp[n][k-1] = dp[n-1]][k-1] + dp[n-1][k-2] + ... + dp[n-1][k-1 - (n-1)]</code>  to replace some terms in previous formula. </p><p><code>dp[n][k] = dp[n-1][k] + dp[n][k-1] - dp[n-1][k-n]</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kInversePairs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(k+<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//dp[n][k] = dp[n-1][k] + dp[n-1][k-1] + dp[n-1][k-2] ... + dp[n-1][k-(n-1)]</span></span><br><span class="line">        <span class="comment">//dp[n][k-1] = dp[n-1][k-1] + dp[n-1][k-2] + ... + dp[n-1][k-1 - (n-1)]</span></span><br><span class="line">        <span class="comment">//dp[n][k] = dp[n][k-1] + dp[n-1][k] - dp[n-1][k-n]</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k &amp;&amp; j &lt;= (i<span class="number">-1</span>)*i/<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> val = (dp[i<span class="number">-1</span>][j] - (j &gt;= i ? dp[i<span class="number">-1</span>][j-i] : <span class="number">0</span>) + MOD) % MOD;</span><br><span class="line">                dp[i][j] = (dp[i][j<span class="number">-1</span>] + val) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/04/629.%20K%20Inverse%20Pairs%20Array/629-2.png" alt="image-20210904131030621"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;629. K Inverse Pairs Array&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/04/629.%20K%20Inverse%20Pairs%20Array/629-1.png&quot; alt=&quot;image</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>1987. Number of Unique Good Subsequences</title>
    <link href="https://zjuytw.github.io/2021/08/31/1987.%20Number%20of%20Unique%20Good%20Subsequences/"/>
    <id>https://zjuytw.github.io/2021/08/31/1987.%20Number%20of%20Unique%20Good%20Subsequences/</id>
    <published>2021-08-30T17:30:23.110Z</published>
    <updated>2021-08-30T17:30:13.320Z</updated>
    
    <content type="html"><![CDATA[<h1>1987. Number of Unique Good Subsequences</h1><h2>Description</h2><p><img src="/2021/08/31/1987.%20Number%20of%20Unique%20Good%20Subsequences/1987-1.png" alt="image-20210831012335939"></p><p><img src="/2021/08/31/1987.%20Number%20of%20Unique%20Good%20Subsequences/1987-2.png" alt="image-20210831012343334"></p><h2>Solution</h2><p>Refer to <a href="https://leetcode-cn.com/problems/distinct-subsequences-ii">Distinct Subsequences</a></p><p>We calculate the different subsequence end with <code>ith</code> index.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dp0[i] -&gt; stands for from begin to ith index, subsequence number end with 0</span><br><span class="line">dp1[i] -&gt; stands for from begin to ith index, subsequence number end with 1</span><br><span class="line"></span><br><span class="line">dp1[i] = dp1[i-1] + dp0[i-1] + 1 (for ith is 1)</span><br><span class="line">dp1[i] = dp1[i-1] (for ith is 0)</span><br><span class="line"></span><br><span class="line">dp0[i] = dp1[i-1] + dp0[i-1] (for ith is 0)</span><br><span class="line">dp0[i] = dp0[i-1] (for ith is 1)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfUniqueGoodSubsequences</span><span class="params">(string binary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = binary.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp1</span><span class="params">(n)</span>, <span class="title">dp2</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp1[<span class="number">0</span>] = binary[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag= binary[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(binary[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                dp1[i] = (dp1[i<span class="number">-1</span>] + dp2[i<span class="number">-1</span>] + <span class="number">1</span>)%MOD;</span><br><span class="line">                dp2[i] = dp2[i<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp1[i] = dp1[i<span class="number">-1</span>];</span><br><span class="line">                dp2[i] = (dp2[i<span class="number">-1</span>] + dp1[i<span class="number">-1</span>])%MOD;</span><br><span class="line">                flag= <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; dp1[i] &lt;&lt; &quot; &quot;&lt;&lt;dp2[i] &lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp1[n<span class="number">-1</span>]+dp2[n<span class="number">-1</span>] + flag)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1987. Number of Unique Good Subsequences&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/31/1987.%20Number%20of%20Unique%20Good%20Subs</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>1986. Minimum Number of Work Sessions to Finish the Tasks</title>
    <link href="https://zjuytw.github.io/2021/08/31/1986.%20Minimum%20Number%20of%20Work%20Sessions%20to%20Finish%20the%20Tasks/"/>
    <id>https://zjuytw.github.io/2021/08/31/1986.%20Minimum%20Number%20of%20Work%20Sessions%20to%20Finish%20the%20Tasks/</id>
    <published>2021-08-30T17:30:23.090Z</published>
    <updated>2021-08-30T17:22:57.665Z</updated>
    
    <content type="html"><![CDATA[<h1>1986. Minimum Number of Work Sessions to Finish the Tasks</h1><h2>Description</h2><p><img src="/2021/08/31/1986.%20Minimum%20Number%20of%20Work%20Sessions%20to%20Finish%20the%20Tasks/1986-1.png" alt="image-20210831011729066"></p><p><img src="/2021/08/31/1986.%20Minimum%20Number%20of%20Work%20Sessions%20to%20Finish%20the%20Tasks/1986-2.png" alt="image-20210831011741385"></p><h2>Solution</h2><p>State Compress + DP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firstly compute cost[mask].</span><br><span class="line">dp[mask] = min(dp[subset] + cost[mask ^ subset] &lt;= TimeSession ? 1 : 0)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSessions</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; tasks, <span class="keyword">int</span> sessionTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tasks.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; n, <span class="number">15</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cost</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span>&lt;&lt;i); mask++)&#123;</span><br><span class="line">                cost[mask|(<span class="number">1</span>&lt;&lt;i)] = cost[mask] + tasks[i]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//dp[mask] = min(dp[mask ^ i] + dp[i])</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; n); mask++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = mask; i &gt; <span class="number">0</span>; i = (i<span class="number">-1</span>) &amp; mask)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cost[i] &lt;= sessionTime)</span><br><span class="line">                    dp[mask] = <span class="built_in">min</span>(dp[mask^i] + <span class="number">1</span>, dp[mask]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/31/1986.%20Minimum%20Number%20of%20Work%20Sessions%20to%20Finish%20the%20Tasks/1986-3.png" alt="image-20210831012210092"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1986. Minimum Number of Work Sessions to Finish the Tasks&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/31/1986.%20Minimum%20Number%</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="State Compression" scheme="https://zjuytw.github.io/tags/State-Compression/"/>
    
  </entry>
  
  <entry>
    <title>295. Find Median from Data Stream</title>
    <link href="https://zjuytw.github.io/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/"/>
    <id>https://zjuytw.github.io/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/</id>
    <published>2021-08-27T15:43:53.678Z</published>
    <updated>2021-08-27T15:41:35.849Z</updated>
    
    <content type="html"><![CDATA[<h1>295. Find Median from Data Stream</h1><h2>Description</h2><p><img src="/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/295-1.png" alt="image-20210827232342741"></p><p><img src="/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/295-2.png" alt="image-20210827232353015"></p><h2>Solution</h2><p>Because we are handling a stream problem, if we need resort the array each time it is a costy solution. So if we could have a self-balance binary search tree, we could use the top of the tree as the answer, but just writing a AVL or RBT is not very troublesome. A better solution is to use two priority queue, one is min heap and other is max heap. </p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt; heapMin;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;, less&lt;&gt;&gt; heapMax;</span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(heapMin.<span class="built_in">empty</span>() || heapMin.<span class="built_in">top</span>() &lt;= num)&#123;</span><br><span class="line">            heapMin.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="keyword">if</span>(heapMin.<span class="built_in">size</span>() &gt; heapMax.<span class="built_in">size</span>() + <span class="number">1</span>)&#123;</span><br><span class="line">                heapMax.<span class="built_in">push</span>(heapMin.<span class="built_in">top</span>());</span><br><span class="line">                heapMin.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            heapMax.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="keyword">if</span>(heapMax.<span class="built_in">size</span>() &gt;= heapMin.<span class="built_in">size</span>() + <span class="number">1</span>)&#123;</span><br><span class="line">                heapMin.<span class="built_in">push</span>(heapMax.<span class="built_in">top</span>());</span><br><span class="line">                heapMax.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(heapMax.<span class="built_in">size</span>() == heapMin.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span> * (heapMax.<span class="built_in">top</span>() + heapMin.<span class="built_in">top</span>()) /<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> heapMin.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/295-3.png" alt="image-20210827233938645"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;295. Find Median from Data Stream&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/27/295.%20Find%20Median%20from%20Data%20Stream/295-1</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1000. Minimum Cost to Merge Stones</title>
    <link href="https://zjuytw.github.io/2021/08/27/1000.%20Minimum%20Cost%20to%20Merge%20Stones/"/>
    <id>https://zjuytw.github.io/2021/08/27/1000.%20Minimum%20Cost%20to%20Merge%20Stones/</id>
    <published>2021-08-27T15:43:53.669Z</published>
    <updated>2021-08-27T15:42:41.226Z</updated>
    
    <content type="html"><![CDATA[<h1>1000. Minimum Cost to Merge Stones</h1><h2>Description</h2><p><img src="/2021/08/27/1000.%20Minimum%20Cost%20to%20Merge%20Stones/1000-1.png" alt="image-20210827225529258"></p><p><img src="/2021/08/27/1000.%20Minimum%20Cost%20to%20Merge%20Stones/1000-2.png" alt="image-20210827225539779"></p><h2>Solution</h2><p>Using DP to solve the problem, we have </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j][k] = from ith to jth, the cost to form k&#x27;s piles</span><br></pre></td></tr></table></figure><p>So we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j][k] = min(dp[i][p][1] + dp[p+1][j][k-1]) (p from i to j-1, step is k-1)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mergeStones</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; stones, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((stones.<span class="built_in">size</span>()<span class="number">-1</span>) % (k<span class="number">-1</span>) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">prefix</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>,vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(n+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(k+<span class="number">1</span>, <span class="number">9999999</span>)));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">            prefix[i] = prefix[i<span class="number">-1</span>] + stones[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//initializing...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i][i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//DP</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">2</span>; m &lt;= k; m++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p = i; p &lt; j; p+=k<span class="number">-1</span>)&#123;</span><br><span class="line">                        dp[i][j][m] = <span class="built_in">min</span>(dp[i][j][m], dp[i][p][<span class="number">1</span>] + dp[p+<span class="number">1</span>][j][m<span class="number">-1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = dp[i][j][k] + prefix[j] - prefix[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][n][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1000. Minimum Cost to Merge Stones&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/27/1000.%20Minimum%20Cost%20to%20Merge%20Stones/100</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>881. Boats to Save People</title>
    <link href="https://zjuytw.github.io/2021/08/27/881.%20Boats%20to%20Save%20People/"/>
    <id>https://zjuytw.github.io/2021/08/27/881.%20Boats%20to%20Save%20People/</id>
    <published>2021-08-27T15:43:53.666Z</published>
    <updated>2021-08-27T15:43:34.946Z</updated>
    
    <content type="html"><![CDATA[<h1>881. Boats to Save People</h1><h2>Description</h2><p><img src="/2021/08/27/881.%20Boats%20to%20Save%20People/881-1.png" alt="image-20210827222615085"></p><h2>Solution</h2><p>Greedy, because every boat is required to save most 2 people, so we could greedily let every boat loads 2 people. But a tricky point is, intuitively we should let each boat takes as heavier as possible, but actually, if we could put<code>people[-1] with people[1]</code> instead of <code>people[-1] with people[0]</code>, we still could let <code>people[-2] with people[1]</code>, so just let first and last together and we will get the correct answer.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numRescueBoats</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;people, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> light = <span class="number">0</span>, heavy = people.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (light &lt;= heavy) &#123;</span><br><span class="line">            <span class="keyword">if</span> (people[light] + people[heavy] &gt; limit) &#123;</span><br><span class="line">                --heavy;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++light;</span><br><span class="line">                --heavy;</span><br><span class="line">            &#125;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;881. Boats to Save People&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/27/881.%20Boats%20to%20Save%20People/881-1.png&quot; alt=&quot;image-2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Greedy" scheme="https://zjuytw.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>479. Largest Palindrome Product</title>
    <link href="https://zjuytw.github.io/2021/08/25/479.%20Largest%20Palindrome%20Product/"/>
    <id>https://zjuytw.github.io/2021/08/25/479.%20Largest%20Palindrome%20Product/</id>
    <published>2021-08-25T06:04:07.642Z</published>
    <updated>2021-08-25T05:18:30.669Z</updated>
    
    <content type="html"><![CDATA[<h1>479. Largest Palindrome Product</h1><h2>Description</h2><p><img src="/2021/08/25/479.%20Largest%20Palindrome%20Product/479-1.png" alt="image-20210825130538679"></p><h2>Solution</h2><p>Because two <code>n</code>-digits intergers’ product are range from <code>2n-1</code> digits to <code>2n</code> digits. Our strategy is constructing palindrome by <code>str + reverse(str)</code> . Then we detect from highest <code>n</code>-digits interger to <code>sqrt(palin)</code> to see if it can be divided into 2  <code>n</code> digits numbers.</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestPalindrome</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getPalin</span>(<span class="params">i</span>):</span></span><br><span class="line">            s = <span class="built_in">str</span>(i)</span><br><span class="line">            s += s[::-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span></span><br><span class="line">        low = <span class="built_in">pow</span>(<span class="number">10</span>,n-<span class="number">1</span>)</span><br><span class="line">        high = <span class="built_in">pow</span>(<span class="number">10</span>,n)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(high,low-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            p = getPalin(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(high, <span class="built_in">int</span>(sqrt(p)), -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p % j == <span class="number">0</span> <span class="keyword">and</span> p / j &gt;= low:</span><br><span class="line">                    <span class="keyword">return</span> p % <span class="number">1337</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;479. Largest Palindrome Product&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/479.%20Largest%20Palindrome%20Product/479-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>787. Cheapest Flights Within K Stops</title>
    <link href="https://zjuytw.github.io/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/"/>
    <id>https://zjuytw.github.io/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/</id>
    <published>2021-08-25T06:04:07.640Z</published>
    <updated>2021-08-25T05:51:16.119Z</updated>
    
    <content type="html"><![CDATA[<h1>787. Cheapest Flights Within K Stops</h1><h2>Description</h2><p><img src="/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/787-1.png" alt="image-20210825133449042"></p><p><img src="/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/787-2.png" alt="image-20210825133512600"></p><h2>Solution</h2><p>BFS+cost[] array</p><p>Ignore the vertex with <code>more step &amp;&amp; more cost</code>, just to prune</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCheapestPrice</span>(<span class="params">self, n: <span class="built_in">int</span>, flights: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], src: <span class="built_in">int</span>, dst: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        adjacent = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        cost = [sys.maxsize] * n</span><br><span class="line">        queue = [src]</span><br><span class="line">        cost[src] = <span class="number">0</span></span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> flights:</span><br><span class="line">            adjacent[f[<span class="number">0</span>]].append((f[<span class="number">1</span>],f[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> <span class="keyword">and</span> step &lt;= k:</span><br><span class="line">            size = <span class="built_in">len</span>(queue)</span><br><span class="line">            tmp = cost.copy()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                top = queue[<span class="number">0</span>]</span><br><span class="line">                queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span> (v,e) <span class="keyword">in</span> adjacent[top]:</span><br><span class="line">                    <span class="keyword">if</span>(cost[top] + e &lt; tmp[v]):</span><br><span class="line">                        queue.append(v)</span><br><span class="line">                        tmp[v] = cost[top] + e</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cost)):</span><br><span class="line">                cost[i] = tmp[i]</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> cost[dst] <span class="keyword">is</span> sys.maxsize <span class="keyword">else</span> cost[dst]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;787. Cheapest Flights Within K Stops&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://zjuytw.github.io/tags/BFS/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>790. Domino and Tromino Tiling</title>
    <link href="https://zjuytw.github.io/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/"/>
    <id>https://zjuytw.github.io/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/</id>
    <published>2021-08-25T06:04:07.639Z</published>
    <updated>2021-08-25T06:03:51.012Z</updated>
    
    <content type="html"><![CDATA[<h1>790. Domino and Tromino Tiling</h1><h2>Description</h2><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-1.png" alt="image-20210825135307308"></p><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-2.png" alt="image-20210825135319048"></p><h2>Solution</h2><p>Check the dp state illustrated in picture</p><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-3.png" alt="image-20210825140239577"></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTilings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="number">1</span>+n,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = (dp[<span class="number">0</span>][i<span class="number">-1</span>] + dp[<span class="number">1</span>][i<span class="number">-1</span>] + dp[<span class="number">0</span>][i<span class="number">-2</span>])%MOD;</span><br><span class="line">            dp[<span class="number">1</span>][i] = (dp[<span class="number">0</span>][i<span class="number">-2</span>] * <span class="number">2</span> + dp[<span class="number">1</span>][i<span class="number">-1</span>])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;790. Domino and Tromino Tiling&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>5852. Minimize the Difference Between Target and Chosen Elements</title>
    <link href="https://zjuytw.github.io/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/"/>
    <id>https://zjuytw.github.io/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/</id>
    <published>2021-08-22T15:36:07.532Z</published>
    <updated>2021-08-22T15:35:52.846Z</updated>
    
    <content type="html"><![CDATA[<h1>5852. Minimize the Difference Between Target and Chosen Elements</h1><h2>Description</h2><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-1.png" alt="image-20210822232736812"></p><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-2.png" alt="image-20210822232747878"></p><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-3.png" alt="image-20210822232755203"></p><h2>Solution</h2><p>DFS + memorize visited + pruning</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; visited;</span><br><span class="line">    <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimizeTheDifference</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="built_in">sort</span>(mat[i].<span class="built_in">begin</span>(), mat[i].<span class="built_in">end</span>());</span><br><span class="line">        visited.<span class="built_in">resize</span>(m, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">4901</span>,<span class="number">0</span>));</span><br><span class="line">        stack&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [level, sum] = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(level == mat.<span class="built_in">size</span>())&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(sum - target));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mat[<span class="number">0</span>].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[level][sum + mat[level][i]])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visited[level][sum + mat[level][i]] = <span class="number">1</span>;</span><br><span class="line">                stk.<span class="built_in">push</span>(&#123;level+<span class="number">1</span>, sum + mat[level][i]&#125;);</span><br><span class="line">                <span class="comment">//important pruning situation</span></span><br><span class="line">                <span class="keyword">if</span>(sum + mat[level][i] &gt; target)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-4.png" alt="image-20210822233549504"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5852. Minimize the Difference Between Target and Chosen Elements&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/5852.%20Minimize%2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Pruning" scheme="https://zjuytw.github.io/tags/Pruning/"/>
    
  </entry>
  
  <entry>
    <title>5853. Find Array Given Subset Sums</title>
    <link href="https://zjuytw.github.io/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/"/>
    <id>https://zjuytw.github.io/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/</id>
    <published>2021-08-22T15:36:07.515Z</published>
    <updated>2021-08-22T15:24:37.139Z</updated>
    
    <content type="html"><![CDATA[<h1>5853. Find Array Given Subset Sums</h1><h2>Description</h2><p><img src="/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5853-1.png" alt="image-20210822225103422"></p><p><img src="/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5853-2.png" alt="image-20210822225113726"></p><h2>Solution</h2><p>Firstly, let’s think about a easier question—If <code>sums</code>‘s elements are all positive, how would you solve this?</p><ul><li>Obviously, the minimum one <code>m</code> is the front one in the <code>ans</code> array.</li><li>How to find the next answers?<ul><li>Delete all subset in <code>sums</code> from <code>ans</code> array, which should be $2^{ans.size()-1}$ elements to be deleted</li><li>How to do this in programming?<ul><li> In each iteration, use a <code>mask</code> to mark the combination of <code>ans</code>‘s numbers, note that we just need to delete the combination of new found number and other’s</li><li>Use <code>multiset</code></li></ul></li></ul></li></ul><p>Then how to apply this to this problem? We can add up a positive number to convert the array into with all positive one. Especially,  we add the number of <code>-(sum of all negative number)</code> . Then we apply the algorithm described above into new one, then we could get a temp <code>ans</code> array.</p><ul><li>How to convert the <code>ans</code> into what we want?<ul><li>We notice that after round up, <code>sums</code> array always starts with 0, then the next value is the largest negative value (Because the next value should be like (a + b + c - a- b- c -d), d is exactly the largest negative value)</li><li>So in the <code>ans</code> array, if we could find a serial of numbers which sum up to <code>m</code>, which means we could negate them them to make whole array sum up to <code>0</code>. Then we negate them.</li></ul></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">recoverArray</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; sums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(sums.<span class="built_in">begin</span>(), sums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> front = -sums[<span class="number">0</span>];</span><br><span class="line">        multiset&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> sum : sums)&#123;</span><br><span class="line">            st.<span class="built_in">insert</span>(sum + front);</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(*st.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">1</span>; mask &lt; (<span class="number">1</span>&lt;&lt;i); mask++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((mask &gt;&gt; (i<span class="number">-1</span>)) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sm = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans.<span class="built_in">size</span>(); j++)</span><br><span class="line">                        <span class="keyword">if</span>(mask &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">                            sm += ans[j];</span><br><span class="line">                    st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(sm));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(*st.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sm = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) sm += ans[j];</span><br><span class="line">            <span class="keyword">if</span> (sm == front) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) ans[j] = -ans[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5853. Find Array Given Subset Sums&lt;/h1&gt;



&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Math" scheme="https://zjuytw.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>212. Word Search II</title>
    <link href="https://zjuytw.github.io/2021/08/22/212.%20Word%20Search%20II/"/>
    <id>https://zjuytw.github.io/2021/08/22/212.%20Word%20Search%20II/</id>
    <published>2021-08-21T17:02:24.607Z</published>
    <updated>2021-08-21T15:03:03.983Z</updated>
    
    <content type="html"><![CDATA[<h1>212. Word Search II</h1><h2>Description</h2><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-1.png" alt="image-20210821225834663"></p><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-2.png" alt="image-20210821225848576"></p><h2>Solution</h2><p>A classic usage of Trie Tree(prefix tree).</p><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-3.png" alt="image-20210821225945053"></p><p>Template: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    Trie *next[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">26</span>; i++)</span><br><span class="line">            next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Trie* next[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; dir = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        Trie *root = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word: words)&#123;</span><br><span class="line">            <span class="built_in">buildTree</span>(root, word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                string cur = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(board,i,j,root, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> r, <span class="keyword">int</span> c, Trie* root, string&amp; curStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;next[board[r][c]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Trie *cur = root-&gt;next[board[r][c]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        curStr += board[r][c];</span><br><span class="line">        board[r][c] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;isEnd)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(curStr);</span><br><span class="line">            cur-&gt;isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = r + dir[i], y = c + dir[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= board.<span class="built_in">size</span>() || y &lt; <span class="number">0</span> || y &gt;= board[<span class="number">0</span>].<span class="built_in">size</span>() || board[x][y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(board,x,y,cur,curStr);</span><br><span class="line">        &#125;</span><br><span class="line">        board[r][c] = curStr.<span class="built_in">back</span>();</span><br><span class="line">        curStr.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(Trie *root, string word)</span></span>&#123;</span><br><span class="line">        Trie *cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">                cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(i == word.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cur-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-4.png" alt="image-20210821230155334"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;212. Word Search II&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/212.%20Word%20Search%20II/212-1.png&quot; alt=&quot;image-202108212258346</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Trie Tree" scheme="https://zjuytw.github.io/tags/Trie-Tree/"/>
    
  </entry>
  
  <entry>
    <title>650. 2 Keys Keyboard</title>
    <link href="https://zjuytw.github.io/2021/08/22/650.%202%20Keys%20Keyboard/"/>
    <id>https://zjuytw.github.io/2021/08/22/650.%202%20Keys%20Keyboard/</id>
    <published>2021-08-21T17:02:24.581Z</published>
    <updated>2021-08-21T17:02:11.504Z</updated>
    
    <content type="html"><![CDATA[<h2>650. 2 Keys Keyboard</h2><h2>Description</h2><p><img src="/2021/08/22/650.%202%20Keys%20Keyboard/650-1.png" alt="image-20210822003910383"></p><h2>Solution</h2><ul><li><p>O(n^2), search from 1 to i-1 to find the smallest operation number for dp[i]</p></li><li><p>O(sqrt(n)), all the operations sequences are like : <code>CPPPCPPPPCP...</code>, can be divided into groups (CPPP)(CPP)(CP)…. .If we have each group’s length like <code>g1, g2,g3...</code>, so after first group, there are <code>g1</code> A’s, after second group <code>g1 * g2</code> A’s…</p><p>We want have <code>N = g1 * g2 * g3...*gn</code> A’s, if <code>gi</code> can be divided into product of other two numbers,  denote as <code>gi = p * q</code>, so it can be divided into 2 group, first contains 1<code>C</code> and p-1<code>P</code>, second one contains 1<code>C</code> and q-1<code>P</code>. It is easy to prove that after dividing, we need fewer steps.</p></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="built_in">getFactors</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(f+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= f; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sf = <span class="built_in">getFactors</span>(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sf; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i], dp[j] + i/j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, dp[i] + n/i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFactors</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSteps</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        d = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">while</span> n % d == <span class="number">0</span>:</span><br><span class="line">                ans += d</span><br><span class="line">                n /= d</span><br><span class="line">            d += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;650. 2 Keys Keyboard&lt;/h2&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/650.%202%20Keys%20Keyboard/650-1.png&quot; alt=&quot;image-2021082200391</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Math" scheme="https://zjuytw.github.io/tags/Math/"/>
    
  </entry>
  
</feed>
