<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://zjuytw.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjuytw.github.io/"/>
  <updated>2021-08-25T05:18:30.669Z</updated>
  <id>https://zjuytw.github.io/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>479. Largest Palindrome Product</title>
    <link href="https://zjuytw.github.io/2021/08/25/479.%20Largest%20Palindrome%20Product/"/>
    <id>https://zjuytw.github.io/2021/08/25/479.%20Largest%20Palindrome%20Product/</id>
    <published>2021-08-25T06:04:07.642Z</published>
    <updated>2021-08-25T05:18:30.669Z</updated>
    
    <content type="html"><![CDATA[<h1>479. Largest Palindrome Product</h1><h2>Description</h2><p><img src="/2021/08/25/479.%20Largest%20Palindrome%20Product/479-1.png" alt="image-20210825130538679"></p><h2>Solution</h2><p>Because two <code>n</code>-digits intergersâ€™ product are range from <code>2n-1</code> digits to <code>2n</code> digits. Our strategy is constructing palindrome by <code>str + reverse(str)</code> . Then we detect from highest <code>n</code>-digits interger to <code>sqrt(palin)</code> to see if it can be divided into 2  <code>n</code> digits numbers.</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestPalindrome</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getPalin</span>(<span class="params">i</span>):</span></span><br><span class="line">            s = <span class="built_in">str</span>(i)</span><br><span class="line">            s += s[::-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span></span><br><span class="line">        low = <span class="built_in">pow</span>(<span class="number">10</span>,n-<span class="number">1</span>)</span><br><span class="line">        high = <span class="built_in">pow</span>(<span class="number">10</span>,n)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(high,low-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            p = getPalin(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(high, <span class="built_in">int</span>(sqrt(p)), -<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p % j == <span class="number">0</span> <span class="keyword">and</span> p / j &gt;= low:</span><br><span class="line">                    <span class="keyword">return</span> p % <span class="number">1337</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;479. Largest Palindrome Product&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/479.%20Largest%20Palindrome%20Product/479-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>787. Cheapest Flights Within K Stops</title>
    <link href="https://zjuytw.github.io/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/"/>
    <id>https://zjuytw.github.io/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/</id>
    <published>2021-08-25T06:04:07.640Z</published>
    <updated>2021-08-25T05:51:16.119Z</updated>
    
    <content type="html"><![CDATA[<h1>787. Cheapest Flights Within K Stops</h1><h2>Description</h2><p><img src="/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/787-1.png" alt="image-20210825133449042"></p><p><img src="/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops/787-2.png" alt="image-20210825133512600"></p><h2>Solution</h2><p>BFS+cost[] array</p><p>Ignore the vertex with <code>more step &amp;&amp; more cost</code>, just to prune</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCheapestPrice</span>(<span class="params">self, n: <span class="built_in">int</span>, flights: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], src: <span class="built_in">int</span>, dst: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        adjacent = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        cost = [sys.maxsize] * n</span><br><span class="line">        queue = [src]</span><br><span class="line">        cost[src] = <span class="number">0</span></span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> flights:</span><br><span class="line">            adjacent[f[<span class="number">0</span>]].append((f[<span class="number">1</span>],f[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> <span class="keyword">and</span> step &lt;= k:</span><br><span class="line">            size = <span class="built_in">len</span>(queue)</span><br><span class="line">            tmp = cost.copy()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                top = queue[<span class="number">0</span>]</span><br><span class="line">                queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span> (v,e) <span class="keyword">in</span> adjacent[top]:</span><br><span class="line">                    <span class="keyword">if</span>(cost[top] + e &lt; tmp[v]):</span><br><span class="line">                        queue.append(v)</span><br><span class="line">                        tmp[v] = cost[top] + e</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cost)):</span><br><span class="line">                cost[i] = tmp[i]</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> cost[dst] <span class="keyword">is</span> sys.maxsize <span class="keyword">else</span> cost[dst]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;787. Cheapest Flights Within K Stops&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/787.%20Cheapest%20Flights%20Within%20K%20Stops</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://zjuytw.github.io/tags/BFS/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>790. Domino and Tromino Tiling</title>
    <link href="https://zjuytw.github.io/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/"/>
    <id>https://zjuytw.github.io/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/</id>
    <published>2021-08-25T06:04:07.639Z</published>
    <updated>2021-08-25T06:03:51.012Z</updated>
    
    <content type="html"><![CDATA[<h1>790. Domino and Tromino Tiling</h1><h2>Description</h2><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-1.png" alt="image-20210825135307308"></p><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-2.png" alt="image-20210825135319048"></p><h2>Solution</h2><p>Check the dp state illustrated in picture</p><p><img src="/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-3.png" alt="image-20210825140239577"></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTilings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="number">1</span>+n,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = (dp[<span class="number">0</span>][i<span class="number">-1</span>] + dp[<span class="number">1</span>][i<span class="number">-1</span>] + dp[<span class="number">0</span>][i<span class="number">-2</span>])%MOD;</span><br><span class="line">            dp[<span class="number">1</span>][i] = (dp[<span class="number">0</span>][i<span class="number">-2</span>] * <span class="number">2</span> + dp[<span class="number">1</span>][i<span class="number">-1</span>])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n] % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;790. Domino and Tromino Tiling&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/25/790.%20Domino%20and%20Tromino%20Tiling/790-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>5852. Minimize the Difference Between Target and Chosen Elements</title>
    <link href="https://zjuytw.github.io/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/"/>
    <id>https://zjuytw.github.io/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/</id>
    <published>2021-08-22T15:36:07.532Z</published>
    <updated>2021-08-22T15:35:52.846Z</updated>
    
    <content type="html"><![CDATA[<h1>5852. Minimize the Difference Between Target and Chosen Elements</h1><h2>Description</h2><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-1.png" alt="image-20210822232736812"></p><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-2.png" alt="image-20210822232747878"></p><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-3.png" alt="image-20210822232755203"></p><h2>Solution</h2><p>DFS + memorize visited + pruning</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; visited;</span><br><span class="line">    <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimizeTheDifference</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="built_in">sort</span>(mat[i].<span class="built_in">begin</span>(), mat[i].<span class="built_in">end</span>());</span><br><span class="line">        visited.<span class="built_in">resize</span>(m, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">4901</span>,<span class="number">0</span>));</span><br><span class="line">        stack&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [level, sum] = stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(level == mat.<span class="built_in">size</span>())&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(sum - target));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mat[<span class="number">0</span>].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[level][sum + mat[level][i]])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visited[level][sum + mat[level][i]] = <span class="number">1</span>;</span><br><span class="line">                stk.<span class="built_in">push</span>(&#123;level+<span class="number">1</span>, sum + mat[level][i]&#125;);</span><br><span class="line">                <span class="comment">//important pruning situation</span></span><br><span class="line">                <span class="keyword">if</span>(sum + mat[level][i] &gt; target)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/22/5852.%20Minimize%20the%20Difference%20Between%20Target%20and%20Chosen%20Elements/5852-4.png" alt="image-20210822233549504"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5852. Minimize the Difference Between Target and Chosen Elements&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/5852.%20Minimize%2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Pruning" scheme="https://zjuytw.github.io/tags/Pruning/"/>
    
  </entry>
  
  <entry>
    <title>5853. Find Array Given Subset Sums</title>
    <link href="https://zjuytw.github.io/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/"/>
    <id>https://zjuytw.github.io/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/</id>
    <published>2021-08-22T15:36:07.515Z</published>
    <updated>2021-08-22T15:24:37.139Z</updated>
    
    <content type="html"><![CDATA[<h1>5853. Find Array Given Subset Sums</h1><h2>Description</h2><p><img src="/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5853-1.png" alt="image-20210822225103422"></p><p><img src="/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5853-2.png" alt="image-20210822225113726"></p><h2>Solution</h2><p>Firstly, letâ€™s think about a easier questionâ€”If <code>sums</code>â€˜s elements are all positive, how would you solve this?</p><ul><li>Obviously, the minimum one <code>m</code> is the front one in the <code>ans</code> array.</li><li>How to find the next answers?<ul><li>Delete all subset in <code>sums</code> from <code>ans</code> array, which should be $2^{ans.size()-1}$ elements to be deleted</li><li>How to do this in programming?<ul><li> In each iteration, use a <code>mask</code> to mark the combination of <code>ans</code>â€˜s numbers, note that we just need to delete the combination of new found number and otherâ€™s</li><li>Use <code>multiset</code></li></ul></li></ul></li></ul><p>Then how to apply this to this problem? We can add up a positive number to convert the array into with all positive one. Especially,  we add the number of <code>-(sum of all negative number)</code> . Then we apply the algorithm described above into new one, then we could get a temp <code>ans</code> array.</p><ul><li>How to convert the <code>ans</code> into what we want?<ul><li>We notice that after round up, <code>sums</code> array always starts with 0, then the next value is the largest negative value (Because the next value should be like (a + b + c - a- b- c -d), d is exactly the largest negative value)</li><li>So in the <code>ans</code> array, if we could find a serial of numbers which sum up to <code>m</code>, which means we could negate them them to make whole array sum up to <code>0</code>. Then we negate them.</li></ul></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">recoverArray</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; sums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(sums.<span class="built_in">begin</span>(), sums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> front = -sums[<span class="number">0</span>];</span><br><span class="line">        multiset&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> sum : sums)&#123;</span><br><span class="line">            st.<span class="built_in">insert</span>(sum + front);</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(*st.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">1</span>; mask &lt; (<span class="number">1</span>&lt;&lt;i); mask++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((mask &gt;&gt; (i<span class="number">-1</span>)) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> sm = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans.<span class="built_in">size</span>(); j++)</span><br><span class="line">                        <span class="keyword">if</span>(mask &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">                            sm += ans[j];</span><br><span class="line">                    st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(sm));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(*st.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sm = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) sm += ans[j];</span><br><span class="line">            <span class="keyword">if</span> (sm == front) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) ans[j] = -ans[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5853. Find Array Given Subset Sums&lt;/h1&gt;



&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/5853.%20Find%20Array%20Given%20Subset%20Sums/5</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Math" scheme="https://zjuytw.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>212. Word Search II</title>
    <link href="https://zjuytw.github.io/2021/08/22/212.%20Word%20Search%20II/"/>
    <id>https://zjuytw.github.io/2021/08/22/212.%20Word%20Search%20II/</id>
    <published>2021-08-21T17:02:24.607Z</published>
    <updated>2021-08-21T15:03:03.983Z</updated>
    
    <content type="html"><![CDATA[<h1>212. Word Search II</h1><h2>Description</h2><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-1.png" alt="image-20210821225834663"></p><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-2.png" alt="image-20210821225848576"></p><h2>Solution</h2><p>A classic usage of Trie Tree(prefix tree).</p><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-3.png" alt="image-20210821225945053"></p><p>Template: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    Trie *next[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">26</span>; i++)</span><br><span class="line">            next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Trie* next[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">bool</span> isEnd;</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; dir = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        Trie *root = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> word: words)&#123;</span><br><span class="line">            <span class="built_in">buildTree</span>(root, word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                string cur = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(board,i,j,root, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> r, <span class="keyword">int</span> c, Trie* root, string&amp; curStr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;next[board[r][c]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Trie *cur = root-&gt;next[board[r][c]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        curStr += board[r][c];</span><br><span class="line">        board[r][c] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;isEnd)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(curStr);</span><br><span class="line">            cur-&gt;isEnd = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = r + dir[i], y = c + dir[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= board.<span class="built_in">size</span>() || y &lt; <span class="number">0</span> || y &gt;= board[<span class="number">0</span>].<span class="built_in">size</span>() || board[x][y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(board,x,y,cur,curStr);</span><br><span class="line">        &#125;</span><br><span class="line">        board[r][c] = curStr.<span class="built_in">back</span>();</span><br><span class="line">        curStr.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(Trie *root, string word)</span></span>&#123;</span><br><span class="line">        Trie *cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = word[i];</span><br><span class="line">            <span class="keyword">if</span>(!cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">                cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(i == word.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                cur-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/22/212.%20Word%20Search%20II/212-4.png" alt="image-20210821230155334"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;212. Word Search II&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/212.%20Word%20Search%20II/212-1.png&quot; alt=&quot;image-202108212258346</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Trie Tree" scheme="https://zjuytw.github.io/tags/Trie-Tree/"/>
    
  </entry>
  
  <entry>
    <title>650. 2 Keys Keyboard</title>
    <link href="https://zjuytw.github.io/2021/08/22/650.%202%20Keys%20Keyboard/"/>
    <id>https://zjuytw.github.io/2021/08/22/650.%202%20Keys%20Keyboard/</id>
    <published>2021-08-21T17:02:24.581Z</published>
    <updated>2021-08-21T17:02:11.504Z</updated>
    
    <content type="html"><![CDATA[<h2>650. 2 Keys Keyboard</h2><h2>Description</h2><p><img src="/2021/08/22/650.%202%20Keys%20Keyboard/650-1.png" alt="image-20210822003910383"></p><h2>Solution</h2><ul><li><p>O(n^2), search from 1 to i-1 to find the smallest operation number for dp[i]</p></li><li><p>O(sqrt(n)), all the operations sequences are like : <code>CPPPCPPPPCP...</code>, can be divided into groups (CPPP)(CPP)(CP)â€¦. .If we have each groupâ€™s length like <code>g1, g2,g3...</code>, so after first group, there are <code>g1</code> Aâ€™s, after second group <code>g1 * g2</code> Aâ€™sâ€¦</p><p>We want have <code>N = g1 * g2 * g3...*gn</code> Aâ€™s, if <code>gi</code> can be divided into product of other two numbers,  denote as <code>gi = p * q</code>, so it can be divided into 2 group, first contains 1<code>C</code> and p-1<code>P</code>, second one contains 1<code>C</code> and q-1<code>P</code>. It is easy to prove that after dividing, we need fewer steps.</p></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="built_in">getFactors</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(f == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(f+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= f; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sf = <span class="built_in">getFactors</span>(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sf; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i], dp[j] + i/j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, dp[i] + n/i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFactors</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSteps</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        d = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">while</span> n % d == <span class="number">0</span>:</span><br><span class="line">                ans += d</span><br><span class="line">                n /= d</span><br><span class="line">            d += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;650. 2 Keys Keyboard&lt;/h2&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/22/650.%202%20Keys%20Keyboard/650-1.png&quot; alt=&quot;image-2021082200391</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Math" scheme="https://zjuytw.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>CS5234--Lecture1 Sampling Algorithm of Array</title>
    <link href="https://zjuytw.github.io/2021/08/20/Lec1/"/>
    <id>https://zjuytw.github.io/2021/08/20/Lec1/</id>
    <published>2021-08-20T14:07:30.229Z</published>
    <updated>2021-08-20T14:07:11.046Z</updated>
    
    <content type="html"><![CDATA[<h1>CS5234 --Algorithm at Scale</h1><p>Lec1 mainly talked about two toy problem solving by sampling.</p><h2>Array all 0's ?</h2><p>Given the algorithm,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Repeat s times:</span><br><span class="line">Choose random i in [1,n]</span><br><span class="line">if A[i] = 1 then return False</span><br><span class="line">return True</span><br></pre></td></tr></table></figure><p>Weâ€™d like to guarantee the following statement:</p><ul><li>if all 0â€™s : return <code>true</code></li><li>if $\ge \epsilon n$ 1â€™s : return <code>false</code> (We can promise that &gt;= 2/3 probability to return false and we can adjust the probability by adjusting the sampling times)</li><li>otherwise: return <code>true</code> or <code>false</code></li></ul><p><strong>Proof:</strong></p><p>if there are more than $\epsilon n$ 1â€™s, we can get $Pr(A[i]=1) \ge \epsilon$<br>$$<br>\begin{aligned}<br>Pr(all\ samples\ are\ 0)&amp;\le\ (1-\epsilon)^s\<br>&amp;\le\ (1-\epsilon)^{2/\epsilon}\ (let\ s\ =\ 2/\epsilon)\<br>&amp;\le\ e^{-2}\<br>&amp;\le\ 1/3<br>\end{aligned}<br>$$<br>So this is the error rate, if we want correct rate, itâ€™s &gt;= 2/3, as desired.</p><p><strong>A useful Lemma:</strong><br>$$<br>e^{-x}\ =\ 1 -x + x^2/2-â€¦ \ \ \ \ \ \ \ for(0&lt;x&lt;1)â€”â€”â€”â€”â€”-(1)\<br>1/e^2\le(1-1/x)^x\le1/e\ \ \ \ \ \ \ for(x&gt;2)â€”â€”â€”â€”â€”â€“(2)<br>$$</p><p><strong>Follow up</strong></p><p>What if we want the algorithm to be correct with  probability â‰¥ 1 â€“ Î´?</p><ul><li>Just let error rate inequality right hand be Î´</li></ul><h2>Fraction of 1's?</h2><p>Definition of $\epsilon-close$, the answer of fraction within the $\pm\epsilon$ . And like above, we give the algorithm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">Repeat s times:</span><br><span class="line">Choose random i in [1,n]</span><br><span class="line">sum = sum + A[i]</span><br><span class="line">Return sum/s</span><br></pre></td></tr></table></figure><p>Then, same with the former question, we want to give the guarantee that:</p><ul><li>if all 0â€™s : return <code>0</code></li><li>if $\ge \epsilon n$ 1â€™s : return <code>the true fraction</code>  (We can promise that &gt;= 2/3 probability to return true fraction and we can adjust the probability by adjusting the sampling times)</li><li>otherwise: return arbitrary fraction.</li></ul><p>To give a proof, we introduce <code>Hoeffding Bound</code>, it mainly describes a set of variables which satisfy <code>independent</code>, <code>random variable</code>, <code>bounded</code>, denoted as X_i<br>$$<br>Let\ Z = X_1+X_2+X_3+â€¦X_i\<br>Pr(|Z-Z[E]|\ge\delta)\le2^{-\delta^2/s}<br>$$<br>In the problem case, we have<br>$$<br>\begin{aligned}<br>Pr(|V-E[V]|\ge\epsilon)=&amp;Pr(|sV-sE[V]|\ge\epsilon s)\<br>&amp;(We\ need\ to\ do\ this\ beacuse\ nV\ is\ the\ sum\ of\ sampling\ values)\<br>&amp;\le Pr(|sum - sf|\ge \epsilon s)\<br>&amp;\le 2e^{-(\epsilon s)^2/s}=2e^{-\epsilon^2 s}\ (let\ s=\ 1/\epsilon^2)\<br>&amp;\le1/3<br>\end{aligned}<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CS5234 --Algorithm at Scale&lt;/h1&gt;

&lt;p&gt;Lec1 mainly talked about two toy problem solving by sampling.&lt;/p&gt;
&lt;h2&gt;Array all 0&#39;s ?
&lt;/h2&gt;

&lt;p&gt;Giv</summary>
      
    
    
    
    <category term="Algorithm at Scale" scheme="https://zjuytw.github.io/categories/Algorithm-at-Scale/"/>
    
    
    <category term="Sampling Algorithm" scheme="https://zjuytw.github.io/tags/Sampling-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>481. Magical String</title>
    <link href="https://zjuytw.github.io/2021/08/20/481.%20Magical%20String/"/>
    <id>https://zjuytw.github.io/2021/08/20/481.%20Magical%20String/</id>
    <published>2021-08-20T14:05:20.659Z</published>
    <updated>2021-08-20T14:04:37.179Z</updated>
    
    <content type="html"><![CDATA[<h1>481. Magical String</h1><h2>Description</h2><p><img src="/2021/08/20/481.%20Magical%20String/481-1.png" alt="image-20210820215930110"></p><h2>Solution</h2><p>Use a pointer to record current <code>occurrence</code> of next segment of <code>s</code>. The new added segmentâ€™s consecutive number should be different from back of <code>s</code>.</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">magicalString</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        s = <span class="string">&quot;122&quot;</span></span><br><span class="line">        freq,size,res = <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> <span class="comment">#freq postion pointer</span></span><br><span class="line">        <span class="keyword">while</span> size &lt; n:</span><br><span class="line">            f = <span class="built_in">int</span>(s[freq])</span><br><span class="line">            c = <span class="number">1</span> <span class="keyword">if</span> s[<span class="built_in">len</span>(s)-<span class="number">1</span>] <span class="keyword">is</span> <span class="string">&quot;2&quot;</span> <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">            s += <span class="built_in">str</span>(c) * f</span><br><span class="line">            <span class="keyword">if</span> size + f &gt;= n:</span><br><span class="line">                <span class="keyword">if</span> c == <span class="number">1</span>:</span><br><span class="line">                    res += n - size</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> c == <span class="number">1</span>:</span><br><span class="line">                    res += f</span><br><span class="line">            size += f</span><br><span class="line">            freq += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="/2021/08/20/481.%20Magical%20String/481-2.png" alt="image-20210820220356366"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;481. Magical String&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/20/481.%20Magical%20String/481-1.png&quot; alt=&quot;image-20210820215930110</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="String" scheme="https://zjuytw.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>553. Optimal Division</title>
    <link href="https://zjuytw.github.io/2021/08/20/553.%20Optimal%20Division/"/>
    <id>https://zjuytw.github.io/2021/08/20/553.%20Optimal%20Division/</id>
    <published>2021-08-20T14:05:20.643Z</published>
    <updated>2021-08-20T13:58:11.286Z</updated>
    
    <content type="html"><![CDATA[<h1>553. Optimal Division</h1><h2>Description</h2><p><img src="/2021/08/20/553.%20Optimal%20Division/553-1.png" alt="image-20210820215245763"></p><p><img src="/2021/08/20/553.%20Optimal%20Division/553-2.png" alt="image-20210820215255532"></p><h2>Solution</h2><p>To get the maxium value in the <code>nums</code>, we can fix the numerator and get minium denominator in the lefted numbers. So just let each number divided by later to generate a minium denominator.</p><h2>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optimalDivision</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">            res = <span class="built_in">str</span>(nums[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(nums) == <span class="number">2</span>:</span><br><span class="line">            res = <span class="built_in">str</span>(nums[<span class="number">0</span>]) + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(nums[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                res += <span class="built_in">str</span>(nums[i]) + <span class="string">&quot;/(&quot;</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            res += <span class="built_in">str</span>(nums[i]) + <span class="string">&quot;/&quot;</span></span><br><span class="line">        res = res[:-<span class="number">1</span>]</span><br><span class="line">        res += <span class="string">&quot;)&quot;</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="/2021/08/20/553.%20Optimal%20Division/553-3.png" alt="image-20210820215732062"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;553. Optimal Division&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/20/553.%20Optimal%20Division/553-1.png&quot; alt=&quot;image-2021082021524</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>992. Subarrays with K Different Integers</title>
    <link href="https://zjuytw.github.io/2021/08/19/992.%20Subarrays%20with%20K%20Different%20Integers/"/>
    <id>https://zjuytw.github.io/2021/08/19/992.%20Subarrays%20with%20K%20Different%20Integers/</id>
    <published>2021-08-19T14:54:31.948Z</published>
    <updated>2021-08-19T14:54:17.309Z</updated>
    
    <content type="html"><![CDATA[<h1>992. Subarrays with K Different Integers</h1><h2>Description</h2><p><img src="/2021/08/19/992.%20Subarrays%20with%20K%20Different%20Integers/992-1.png" alt="image-20210819220032733"></p><h2>Solution</h2><p>Quite tricky solution using two pointers, that we can fix the right pointer then move the left pointer to check the subarrays with <code>less equals k</code> elements. Then we can get subarray number by number of array with <code>less equals k+1</code> elemens - number of array with <code>less equals k+1</code> elemens.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getLEK</span>(nums, k) - <span class="built_in">getLEK</span>(nums,k<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLEK</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; bucket;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, l = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(++bucket[nums[i]] == <span class="number">1</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt;= k)</span><br><span class="line">                ;</span><br><span class="line">            <span class="comment">// bucket.size() &gt; k</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(cnt &gt; k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(--bucket[nums[l++]] == <span class="number">0</span>)</span><br><span class="line">                        cnt--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += i - l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/992.%20Subarrays%20with%20K%20Different%20Integers/992-2.png" alt="image-20210819220830914"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;992. Subarrays with K Different Integers&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/19/992.%20Subarrays%20with%20K%20Different%20</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Two Pointers" scheme="https://zjuytw.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>959. Regions Cut By Slashes</title>
    <link href="https://zjuytw.github.io/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/"/>
    <id>https://zjuytw.github.io/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/</id>
    <published>2021-08-19T14:54:31.946Z</published>
    <updated>2021-08-19T14:53:48.004Z</updated>
    
    <content type="html"><![CDATA[<h1>959. Regions Cut By Slashes</h1><h2>Description</h2><p><img src="/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/959-1.png" alt="image-20210819223453843"></p><p><img src="/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/959-2.png" alt="image-20210819223506022"></p><p><img src="/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/959-3.png" alt="image-20210819223642291"></p><p><img src="/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/959-4.png" alt="image-20210819223649217"></p><h2>Solution</h2><p>Two solutions both work:</p><ul><li>DFS, like find connected components in a <code>island-sea question</code>, but we need to deal with the slashes because we can not DFS a half-block. So we can zoom up the grid into 3 * 3 array then map the slash into it.</li><li>Use union-find to union the plots and edges.<ul><li>First, each plot are in its own set, four edges are in one set</li><li>We note that once slash connect two points from the same set, we can get 1 new region. Once points are from different set, we just union them.</li></ul></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; dir = &#123;<span class="number">-1</span>, <span class="number">0</span> , <span class="number">1</span>, <span class="number">0</span> , <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">regionsBySlashes</span><span class="params">(vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">ngrid</span>(<span class="number">3</span>*n, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>*n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i][<span class="number">3</span> * j + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i + <span class="number">1</span>][<span class="number">3</span> * j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i + <span class="number">2</span>][<span class="number">3</span> * j ] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;\\&#x27;</span>)&#123;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i][<span class="number">3</span> * j] = <span class="number">1</span>;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i + <span class="number">1</span>][<span class="number">3</span> * j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    ngrid[<span class="number">3</span> * i + <span class="number">2</span>][<span class="number">3</span> * j + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ngrid.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ngrid.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ngrid[i][j])&#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(ngrid,i,j);</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[r][c])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        grid[r][c] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = dir[i] + r, y = dir[i+<span class="number">1</span>] + c;</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= grid.<span class="built_in">size</span>() || y &lt; <span class="number">0</span> || y &gt;= grid.<span class="built_in">size</span>() || grid[x][y])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(grid,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    father = <span class="built_in">list</span>()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">regionsBySlashes</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        size = <span class="built_in">len</span>(grid)</span><br><span class="line">        father = &#123;(i,j) : (i,j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(size+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size+<span class="number">1</span>)&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size+<span class="number">1</span>):</span><br><span class="line">            father[i,<span class="number">0</span>], father[<span class="number">0</span>,i], father[size,i], father[i,size] = (<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">c</span>):</span></span><br><span class="line">            <span class="keyword">while</span> father[c] != c:</span><br><span class="line">                c = father[c]</span><br><span class="line">            <span class="keyword">return</span> c</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">a,b</span>):</span></span><br><span class="line">            father[a] = find(b)</span><br><span class="line">        </span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                t1, t2 = <span class="built_in">list</span>(), <span class="built_in">list</span>()</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    t1 = find((i+<span class="number">1</span>, j))</span><br><span class="line">                    t2 = find((i, j + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> grid[i][j] == <span class="string">&#x27;\\&#x27;</span>:</span><br><span class="line">                    t1 = find((i, j))</span><br><span class="line">                    t2 = find((i+<span class="number">1</span>, j + <span class="number">1</span>))</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> t1 == t2:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    union(t1,t2)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;959. Regions Cut By Slashes&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/19/959.%20Regions%20Cut%20By%20Slashes/959-1.png&quot; alt=&quot;ima</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Union Find Set" scheme="https://zjuytw.github.io/tags/Union-Find-Set/"/>
    
  </entry>
  
  <entry>
    <title>552. Student Attendance Record II</title>
    <link href="https://zjuytw.github.io/2021/08/18/552.%20Student%20Attendance%20Record%20II/"/>
    <id>https://zjuytw.github.io/2021/08/18/552.%20Student%20Attendance%20Record%20II/</id>
    <published>2021-08-18T14:26:28.863Z</published>
    <updated>2021-08-18T14:20:13.571Z</updated>
    
    <content type="html"><![CDATA[<h1>552. Student Attendance Record II</h1><h2>Description</h2><p><img src="/2021/08/18/552.%20Student%20Attendance%20Record%20II/552-1.png" alt="image-20210818221429258"></p><p><img src="/2021/08/18/552.%20Student%20Attendance%20Record%20II/552-2.png" alt="image-20210818221439535"></p><h2>Solution</h2><p>A typical finite-state machine problem + dp. Just draw a state transfer graph.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1E9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">checkRecord</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p1, p2, l11, l21, l12, l22, a;</span><br><span class="line">        p1 = l11 = a = <span class="number">1</span>;</span><br><span class="line">        p2 = l12 = l21 = l22 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> np1, np2, nl11, nl21, nl12, nl22, na;</span><br><span class="line">            np1 = p1 + l11 + l21;</span><br><span class="line">            nl11 = p1;</span><br><span class="line">            nl21 = l11;</span><br><span class="line">            na = p1 + l11 + l21;</span><br><span class="line">            np2 = a + p2 + l12 + l22;</span><br><span class="line">            nl12 = a + p2;</span><br><span class="line">            nl22 = l12;</span><br><span class="line">            p1 = np1%MOD;</span><br><span class="line">            p2 = np2%MOD;</span><br><span class="line">            l11 = nl11 %MOD;</span><br><span class="line">            l12 = nl12 %MOD;</span><br><span class="line">            l22 = nl22%MOD;</span><br><span class="line">            l21 = nl21%MOD;</span><br><span class="line">            a = na%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        res = (p1 + p2 + l11 + l21 + l12 + l22 + a)%MOD;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/18/552.%20Student%20Attendance%20Record%20II/552-3.png" alt="image-20210818221915220"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;552. Student Attendance Record II&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/18/552.%20Student%20Attendance%20Record%20II/552-1.p</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Finite State Machine" scheme="https://zjuytw.github.io/tags/Finite-State-Machine/"/>
    
  </entry>
  
  <entry>
    <title>501. Find Mode in Binary Search Tree</title>
    <link href="https://zjuytw.github.io/2021/08/18/501.%20Find%20Mode%20in%20Binary%20Search%20Tree/"/>
    <id>https://zjuytw.github.io/2021/08/18/501.%20Find%20Mode%20in%20Binary%20Search%20Tree/</id>
    <published>2021-08-18T14:26:28.861Z</published>
    <updated>2021-08-18T14:25:55.245Z</updated>
    
    <content type="html"><![CDATA[<h1>501. Find Mode in Binary Search Tree</h1><h2>Description</h2><p><img src="/2021/08/18/501.%20Find%20Mode%20in%20Binary%20Search%20Tree/501-1.png" alt="image-20210818222230366"></p><p><img src="/2021/08/18/501.%20Find%20Mode%20in%20Binary%20Search%20Tree/501-2.png" alt="image-20210818222248662"></p><h2>Solution</h2><p>Imagine how we find <code>mode</code> in an array [1 2 2 4 5 6 6 7], we just scan over then use some variables recording the most frequent number. In this BST, we can use inorder-traversal to get this sorted array.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> maxfreq, prev, curfreq;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(maxfreq == <span class="number">0</span>)&#123;</span><br><span class="line">            prev = root-&gt;val;</span><br><span class="line">            curfreq += <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev == root-&gt;val)&#123;</span><br><span class="line">                curfreq+=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curfreq = <span class="number">1</span>;</span><br><span class="line">                prev = root-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curfreq &gt; maxfreq)&#123;</span><br><span class="line">            <span class="keyword">while</span>(res.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            maxfreq = curfreq;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(curfreq == maxfreq)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(root-&gt;val);       </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;501. Find Mode in Binary Search Tree&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/18/501.%20Find%20Mode%20in%20Binary%20Search%20Tr</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BST" scheme="https://zjuytw.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>1012. Numbers With Repeated Digits</title>
    <link href="https://zjuytw.github.io/2021/08/18/1012.%20Numbers%20With%20Repeated%20Digits/"/>
    <id>https://zjuytw.github.io/2021/08/18/1012.%20Numbers%20With%20Repeated%20Digits/</id>
    <published>2021-08-18T14:26:28.832Z</published>
    <updated>2021-08-18T14:20:44.243Z</updated>
    
    <content type="html"><![CDATA[<h1>1012. Numbers With Repeated Digits</h1><h2>Description</h2><p><img src="/2021/08/18/1012.%20Numbers%20With%20Repeated%20Digits/1012-1.png" alt="image-20210818220237725"></p><h2>Solution</h2><ul><li>The most important tricky point, just find integers have no repeated digit!!!</li><li>Then use DFS to solve the problem<ul><li>A naive way is to find the permutation -&gt; TLE</li><li>To speed up, we can directly compute permutation that has less digits than <code>n</code>â€˜s, then use DFS to compute the combination whose digit equals to n</li></ul></li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numDupDigitsAtMostN</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = n;</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            digit ++;</span><br><span class="line">            num.<span class="built_in">push_back</span>(tmp%<span class="number">10</span>);</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(num.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= digit<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">                res += <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res += <span class="number">9</span> * <span class="built_in">Amn</span>(i<span class="number">-1</span>,<span class="number">9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">visited</span><span class="params">(<span class="number">10</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="built_in">dfs</span>(n, visited, <span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">return</span> n - res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; visited, <span class="keyword">int</span> curPos, vector&lt;<span class="keyword">int</span>&gt;&amp; num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>() == curPos)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curPos == <span class="number">0</span> &amp;&amp; i == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; num[curPos])&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                res += <span class="built_in">Amn</span>(num.<span class="built_in">size</span>() - curPos - <span class="number">1</span>, <span class="number">9</span> - curPos);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == num[curPos])&#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[i])</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(n, visited, curPos+<span class="number">1</span>, num);</span><br><span class="line">                visited[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Amn</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            res *= n - i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/18/1012.%20Numbers%20With%20Repeated%20Digits/1012-2.png" alt="image-20210818221153644"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1012. Numbers With Repeated Digits&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/18/1012.%20Numbers%20With%20Repeated%20Digits/1012-</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>526. Beautiful Arrangement</title>
    <link href="https://zjuytw.github.io/2021/08/16/526.%20Beautiful%20Arrangement/"/>
    <id>https://zjuytw.github.io/2021/08/16/526.%20Beautiful%20Arrangement/</id>
    <published>2021-08-16T15:42:31.275Z</published>
    <updated>2021-08-16T14:25:54.194Z</updated>
    
    <content type="html"><![CDATA[<h1>526. Beautiful Arrangement</h1><h2>Description</h2><p><img src="/2021/08/16/526.%20Beautiful%20Arrangement/526-1.png" alt="image-20210816183414471"></p><h2>Solution</h2><ol><li><p>Naively do backtracking</p></li><li><p>DP + State Compression</p><p>use <code>mask</code> to record first <code>num</code> â€˜s integerâ€™s combinations, for example</p><p><code>0101</code> means 1 and 3 are in the first 2 slots of the array. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[mask] = sum of dp[mask^i], which i is suitable for popcount(mask) slot</span><br></pre></td></tr></table></figure></li></ol><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_set&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">suitable</span>(n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span> || j % i == <span class="number">0</span>)</span><br><span class="line">                    suitable[i].<span class="built_in">insert</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtracking</span>(n,<span class="number">1</span>,visited, suitable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> curPos, unordered_set&lt;<span class="keyword">int</span>&gt;&amp; visited, <span class="keyword">const</span> vector&lt;unordered_set&lt;<span class="keyword">int</span>&gt;&gt;&amp; suitable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curPos == n+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.<span class="built_in">count</span>(i) || suitable[curPos].<span class="built_in">count</span>(i) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visited.<span class="built_in">insert</span>(i);</span><br><span class="line">            res += <span class="built_in">backtracking</span>(n, curPos+<span class="number">1</span>, visited, suitable);</span><br><span class="line">            visited.<span class="built_in">erase</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt;n); mask++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = __builtin_popcount(mask);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((mask &amp; (<span class="number">1</span>&lt;&lt;i)) &amp;&amp; (num % (i+<span class="number">1</span>) == <span class="number">0</span> || (i+<span class="number">1</span>) % num == <span class="number">0</span>))&#123;</span><br><span class="line">                    dp[mask] += dp[mask^(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span>&lt;&lt;n) - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;526. Beautiful Arrangement&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/526.%20Beautiful%20Arrangement/526-1.png&quot; alt=&quot;image-202</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Back Tracking" scheme="https://zjuytw.github.io/tags/Back-Tracking/"/>
    
    <category term="State Compression" scheme="https://zjuytw.github.io/tags/State-Compression/"/>
    
  </entry>
  
  <entry>
    <title>282. Expression Add Operators</title>
    <link href="https://zjuytw.github.io/2021/08/16/282.%20Expression%20Add%20Operators/"/>
    <id>https://zjuytw.github.io/2021/08/16/282.%20Expression%20Add%20Operators/</id>
    <published>2021-08-16T15:42:31.273Z</published>
    <updated>2021-08-16T15:41:23.696Z</updated>
    
    <content type="html"><![CDATA[<h1>282. Expression Add Operators</h1><h2>Description</h2><p><img src="/2021/08/16/282.%20Expression%20Add%20Operators/282-1.png" alt="image-20210816233523653"></p><h2>Solution</h2><p>Use tricky DFS to solve it.</p><p><strong>The most important trick:</strong> Because we need to give each expression that leads to the target, so we need to record current string. Then, for<code>+</code> and <code>-</code>, in fact we just need to record the <code>exep value</code> in previous expression. But to treat <code>*</code> rightly, we need record one more variable â€“ lastValue to calculate the expression rightly.</p><p>So if we have, for example 1 2 3 4 5 6 7 8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 2 * 3 DFS(45678)</span><br></pre></td></tr></table></figure><p>â€‹                 â†‘</p><p>To treat this 2 * 3 correctly, we need first record <code>1 + 2</code>= 3, then use <code>3 - 2 + 2 * 3</code> to get the right answer.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">addOperators</span><span class="params">(string num, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(num, (LL)target, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(string&amp; num, LL target, string prevStr, <span class="keyword">int</span> curPos, LL curVal, LL lastVal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>() == curPos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curVal == target)</span><br><span class="line">                res.<span class="built_in">push_back</span>(prevStr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; num.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string curStr = num.<span class="built_in">substr</span>(curPos, i - curPos+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; curStr &lt;&lt;endl;</span></span><br><span class="line">            LL val = <span class="built_in">stoll</span>(curStr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(curStr.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; curStr[<span class="number">0</span>] ==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(curPos==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, curStr, i+<span class="number">1</span>, val, val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;+&quot;</span> + curStr, i+<span class="number">1</span>, curVal + val, val);</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;-&quot;</span> + curStr, i+<span class="number">1</span>, curVal - val, -val);</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;*&quot;</span> + curStr, i+<span class="number">1</span>, curVal - lastVal + lastVal * val, lastVal * val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/16/282.%20Expression%20Add%20Operators/282-2.png" alt="image-20210816234051340"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;282. Expression Add Operators&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/282.%20Expression%20Add%20Operators/282-1.png&quot; alt=&quot;i</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>576. Out of Boundary Paths</title>
    <link href="https://zjuytw.github.io/2021/08/16/576.%20Out%20of%20Boundary%20Paths/"/>
    <id>https://zjuytw.github.io/2021/08/16/576.%20Out%20of%20Boundary%20Paths/</id>
    <published>2021-08-15T17:46:55.651Z</published>
    <updated>2021-08-15T17:29:17.300Z</updated>
    
    <content type="html"><![CDATA[<h1>576. Out of Boundary Paths</h1><h2>Description</h2><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-1.png" alt="image-20210816011409956"></p><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-2.png" alt="image-20210816011436730"></p><h2>Solution</h2><p>DP for each stage.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; directions = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> outCounts = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(m, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>)));</span><br><span class="line">        dp[<span class="number">0</span>][startRow][startColumn] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curcol = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxMove; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> cur = dp[curcol][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(!cur)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">4</span>; z++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = j + directions[z][<span class="number">0</span>], y = k + directions[z][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n)&#123;</span><br><span class="line">                            outCounts = (outCounts + cur) % MOD;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            dp[curcol^<span class="number">1</span>][x][y] = (dp[curcol^<span class="number">1</span>][x][y] + cur) %MOD;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[curcol][j][k] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curcol^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outCounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-3.png" alt="image-20210816012632281"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;576. Out of Boundary Paths&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-1.png&quot; alt=&quot;image</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>5832. Array With Elements Not Equal to Average of Neighbors</title>
    <link href="https://zjuytw.github.io/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/"/>
    <id>https://zjuytw.github.io/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/</id>
    <published>2021-08-15T17:46:55.630Z</published>
    <updated>2021-08-15T17:46:25.708Z</updated>
    
    <content type="html"><![CDATA[<h1>5832. Array With Elements Not Equal to Average of Neighbors</h1><h2>Description</h2><p><img src="/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/5832-1.png" alt="image-20210816013507734"></p><p><img src="/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/5832-2.png" alt="image-20210816013517964"></p><h2>Solution</h2><p>To generate the array in the requirement, my strategy is pick<code>the smallest</code> <code>the largest</code> <code>the second smallest</code> â€¦, because we have <code>the largest</code> * 2 &gt; the sum of the smallest numbers, it should always work.</p><p>Or we can keep looping the swap  the mismatched pair till we get the correct array.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rearrangeArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(res.<span class="built_in">size</span>() != nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums[l++]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution 2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rearrangeArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(res.<span class="built_in">size</span>() != nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums[l++]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5832. Array With Elements Not Equal to Average of Neighbors&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/5832.%20Array%20With%20</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Two Pointers" scheme="https://zjuytw.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>399. Evaluate Division</title>
    <link href="https://zjuytw.github.io/2021/08/14/399.%20Evaluate%20Division/"/>
    <id>https://zjuytw.github.io/2021/08/14/399.%20Evaluate%20Division/</id>
    <published>2021-08-14T13:18:15.761Z</published>
    <updated>2021-08-14T13:17:50.809Z</updated>
    
    <content type="html"><![CDATA[<h1>399. Evaluate Division</h1><h2>Description</h2><p><img src="/2021/08/14/399.%20Evaluate%20Division/399-1.png" alt="image-20210814211436494"></p><p><img src="/2021/08/14/399.%20Evaluate%20Division/399-2.png" alt="image-20210814211447126"></p><h2>Solution</h2><p>Record each equationsâ€™ string name and its corresponding index, used later.</p><p>Then do a <code>floyd search</code> to all strings, find their division.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">calcEquation</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;<span class="keyword">double</span>&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; names;</span><br><span class="line">        unordered_map&lt;string, unordered_map&lt;string, <span class="keyword">double</span>&gt;&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; equations.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(equations[i][<span class="number">0</span>]) == Map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                Map[equations[i][<span class="number">0</span>]][equations[i][<span class="number">0</span>]] = <span class="number">1.0</span>;</span><br><span class="line">                names.<span class="built_in">push_back</span>(equations[i][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(equations[i][<span class="number">1</span>]) == Map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                Map[equations[i][<span class="number">1</span>]][equations[i][<span class="number">1</span>]] = <span class="number">1.0</span>;</span><br><span class="line">                names.<span class="built_in">push_back</span>(equations[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            Map[equations[i][<span class="number">0</span>]][equations[i][<span class="number">1</span>]] = values[i];</span><br><span class="line">            Map[equations[i][<span class="number">1</span>]][equations[i][<span class="number">0</span>]] = <span class="number">1.0</span>/values[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; Map.<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Map.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Map.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j || i == k || j == k)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    string a = names[i], b= names[j], c= names[k];</span><br><span class="line">                    <span class="keyword">if</span>(Map[a].<span class="built_in">find</span>(c) != Map[a].<span class="built_in">end</span>() &amp;&amp; Map[b].<span class="built_in">find</span>(c) != Map[b].<span class="built_in">end</span>())&#123;</span><br><span class="line">                        Map[a][b] = Map[a][c] / Map[b][c];</span><br><span class="line">                        Map[b][a] = Map[b][c] / Map[a][c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">double</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string a = queries[i][<span class="number">0</span>], b = queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(a) == Map.<span class="built_in">end</span>() || Map.<span class="built_in">find</span>(b) == Map.<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Map[a].<span class="built_in">find</span>(b) == Map[a].<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(Map[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;399. Evaluate Division&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/14/399.%20Evaluate%20Division/399-1.png&quot; alt=&quot;image-20210814211</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Floyd" scheme="https://zjuytw.github.io/tags/Floyd/"/>
    
  </entry>
  
</feed>
