<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://zjuytw.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjuytw.github.io/"/>
  <updated>2021-08-13T15:59:27.260Z</updated>
  <id>https://zjuytw.github.io/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>233. Number of Digit One</title>
    <link href="https://zjuytw.github.io/2021/08/13/233.%20Number%20of%20Digit%20One/"/>
    <id>https://zjuytw.github.io/2021/08/13/233.%20Number%20of%20Digit%20One/</id>
    <published>2021-08-13T15:59:46.108Z</published>
    <updated>2021-08-13T15:59:27.260Z</updated>
    
    <content type="html"><![CDATA[<h1>233. Number of Digit One</h1><h2>Description</h2><p><img src="/2021/08/13/233.%20Number%20of%20Digit%20One/233-1.png" alt="image-20210813235350161"></p><h2>Solution</h2><p>We can calculate the number of one on each digit, for example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To count one&#x27;s number on 1234567</span><br><span class="line">we can count one on 1, 10, 100...</span><br><span class="line">If we need to count one on 100, we can have 1234 * 100 + 200</span><br></pre></td></tr></table></figure><p>So we can have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k&#x27;s digit count = [n/10^(k+1)] * 10 ^ k + </span><br><span class="line">min(max(n mod 10^(k+1) - 100, 0), 10^k)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// mulk 表示 10^k</span></span><br><span class="line">        <span class="comment">// 在下面的代码中，可以发现 k 并没有被直接使用到（都是使用 10^k）</span></span><br><span class="line">        <span class="comment">// 但为了让代码看起来更加直观，这里保留了 k</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mulk = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; n &gt;= mulk; ++k) &#123;</span><br><span class="line">            ans += (n / (mulk * <span class="number">10</span>)) * mulk + <span class="built_in">min</span>(<span class="built_in">max</span>(n % (mulk * <span class="number">10</span>) - mulk + <span class="number">1</span>, <span class="number">0LL</span>), mulk);</span><br><span class="line">            mulk *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;233. Number of Digit One&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/13/233.%20Number%20of%20Digit%20One/233-1.png&quot; alt=&quot;image-202</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="tricky" scheme="https://zjuytw.github.io/tags/tricky/"/>
    
  </entry>
  
  <entry>
    <title>388. Longest Absolute File Path</title>
    <link href="https://zjuytw.github.io/2021/08/12/388.%20Longest%20Absolute%20File%20Path/"/>
    <id>https://zjuytw.github.io/2021/08/12/388.%20Longest%20Absolute%20File%20Path/</id>
    <published>2021-08-12T15:52:39.661Z</published>
    <updated>2021-08-12T15:52:17.278Z</updated>
    
    <content type="html"><![CDATA[<h1>388. Longest Absolute File Path</h1><h2>Description</h2><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-1.png" alt="image-20210812234850480"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-2.png" alt="image-20210812234933342"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-3.png" alt="image-20210812234949600"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-4.png" alt="image-20210812234958351"></p><h2>Solution</h2><p>Recollection the use of <code>stringstream</code>:</p><p><a href="http://www.cplusplus.com/reference/sstream/stringstream/">http://www.cplusplus.com/reference/sstream/stringstream/</a></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthLongestPath</span><span class="params">(string input)</span> </span>&#123;</span><br><span class="line">        <span class="function">stringstream <span class="title">ss</span><span class="params">(input)</span></span>;</span><br><span class="line">        string token;</span><br><span class="line">        vector&lt;string&gt; paths;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ss, token, <span class="string">&#x27;\n&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> layer = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; token.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token[i] != <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                layer++;</span><br><span class="line">            &#125;</span><br><span class="line">            token = token.<span class="built_in">substr</span>(layer);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isFile</span>(token))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; layer; i++)</span><br><span class="line">                    length += paths[i].<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(length + (<span class="keyword">int</span>)token.<span class="built_in">size</span>() , res);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(paths.<span class="built_in">size</span>() &gt;= layer+<span class="number">1</span>)</span><br><span class="line">                    paths[layer] = token;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    paths.<span class="built_in">push_back</span>(token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(string&amp; token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : token)</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-5.png" alt="image-20210812235104356"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;388. Longest Absolute File Path&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-1.png&quot; </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="stringstream" scheme="https://zjuytw.github.io/tags/stringstream/"/>
    
  </entry>
  
  <entry>
    <title>516. Longest Palindromic Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/</id>
    <published>2021-08-12T15:52:39.638Z</published>
    <updated>2021-08-12T15:46:21.320Z</updated>
    
    <content type="html"><![CDATA[<h1>516. Longest Palindromic Subsequence</h1><h2>Description</h2><p><img src="/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516-1.png" alt="image-20210812234258586"></p><h2>Solution</h2><p>Use DP to find the longest <code>palindromic subsequence</code> in one interval</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//dp[i][j] =  (i &gt; j) from j to i, longest palinidromic subsequence</span><br><span class="line">//dp[i][j] = dp[i-1][j+1] + 2 (if s[i] == s[j]), else dp[i][j] = dp[i][j+1]</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j] =  (i &gt; j) from j to i, longest palinidromic subsequence</span></span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j+1] + 2 (if s[i] == s[j]), else dp[i][j] = dp[i][j+1]</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>()+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(s.<span class="built_in">size</span>()+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i<span class="number">-1</span>] == s[j<span class="number">-1</span>])</span><br><span class="line">                        dp[i][j] = dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i][j+<span class="number">1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516-2.png" alt="image-20210812234531600"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;516. Longest Palindromic Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>446. Arithmetic Slices II - Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/</id>
    <published>2021-08-11T15:42:52.096Z</published>
    <updated>2021-08-11T15:42:18.197Z</updated>
    
    <content type="html"><![CDATA[<h1>446. Arithmetic Slices II - Subsequence</h1><h2>Description</h2><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-1.png" alt="image-20210811233829175"></p><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-2.png" alt="image-20210811233842286"></p><h2>Solution</h2><p>DP to check out the previous subsequence number satisfied requirement.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][d] = In position i, the number satisfied requirement that difference is d</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="comment">// int res = 0;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_map&lt;LL,<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                LL d = <span class="number">1LL</span> * nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">int</span> cnt = ((dp[j].<span class="built_in">find</span>(d) != dp[j].<span class="built_in">end</span>()) ? dp[j][d] : <span class="number">0</span>);</span><br><span class="line">                res += cnt;</span><br><span class="line">                dp[i][d] += cnt+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-3.png" alt="image-20210811234154579"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;446. Arithmetic Slices II - Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subse</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>679. 24 Game</title>
    <link href="https://zjuytw.github.io/2021/08/11/679.%2024%20Game/"/>
    <id>https://zjuytw.github.io/2021/08/11/679.%2024%20Game/</id>
    <published>2021-08-11T15:42:52.075Z</published>
    <updated>2021-08-11T15:36:55.771Z</updated>
    
    <content type="html"><![CDATA[<h1>679. 24 Game</h1><h2>Description</h2><p><img src="/2021/08/11/679.%2024%20Game/679-1.png" alt="image-20210811232640270"></p><h2>Solution</h2><p>Recursively check all the potential combination of the 4 numbers. In each round, we iteratively select 2 out of N numbers, calculate the result of <code>+, -, *, /</code> then put back the result into next round.</p><p>Don’t forget the function return condition is <code>if N == 1, nums[0] == 24 </code> . And for float number, we should do this in <code>abs() &lt; 1e-6</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint24</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">double</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> card : cards)</span><br><span class="line">            nums.<span class="built_in">push_back</span>(<span class="number">1.0</span> * card);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="keyword">double</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">abs</span>(nums[<span class="number">0</span>] - <span class="number">24</span>) &lt; <span class="number">1e-6</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">double</span> a = nums[i], b = nums[j];</span><br><span class="line">                vector&lt;<span class="keyword">double</span>&gt; newnums;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                        newnums.<span class="built_in">push_back</span>(nums[k]);</span><br><span class="line">                </span><br><span class="line">                newnums.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="comment">//iterate all operators</span></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a + b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a - b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a * b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">                    newnums.<span class="built_in">back</span>() = a / b;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/679.%2024%20Game/679-2.jpg" alt="679-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;679. 24 Game&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/679.%2024%20Game/679-1.png&quot; alt=&quot;image-20210811232640270&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Sol</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>133. Clone Graph</title>
    <link href="https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/"/>
    <id>https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/</id>
    <published>2021-08-10T16:15:38.395Z</published>
    <updated>2021-08-10T16:13:21.379Z</updated>
    
    <content type="html"><![CDATA[<h1>133. Clone Graph</h1><h2>Description</h2><p><img src="/2021/08/11/133.%20Clone%20Graph/133-1.png" alt="image-20210811000504275"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-2.jpg" alt="133-2"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-4.jpg" alt="133-4"><img src="/2021/08/11/133.%20Clone%20Graph/133-3.jpg" alt="133-3"></p><h2>Solution</h2><p>I uses two map to store the <code>visited</code> and <code>waiting</code> nodes, then BFS for the next node be copied.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; neighbors;</span></span><br><span class="line"><span class="comment">    Node() &#123;</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; visited;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; waited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        Node* root = <span class="keyword">new</span> <span class="built_in">Node</span>(node-&gt;val, node-&gt;neighbors);</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        waited[root-&gt;val] = root;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">auto</span> top = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top-&gt;neighbors.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> nbor = top-&gt;neighbors[i];</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(nbor-&gt;val) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">                        <span class="keyword">if</span>(waited.<span class="built_in">find</span>(nbor-&gt;val) == waited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                            next = <span class="keyword">new</span> <span class="built_in">Node</span>(nbor-&gt;val, nbor-&gt;neighbors);</span><br><span class="line">                            waited[nbor-&gt;val] = next;</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                            next = waited[nbor-&gt;val];</span><br><span class="line">                        top-&gt;neighbors[i] = next;</span><br><span class="line">                        q.<span class="built_in">push</span>(top-&gt;neighbors[i]);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        top-&gt;neighbors[i] = visited[nbor-&gt;val];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[top-&gt;val] = top;</span><br><span class="line">                waited.<span class="built_in">erase</span>(top-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/133.%20Clone%20Graph/133-5.jpg" alt="133-5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;133. Clone Graph&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/133.%20Clone%20Graph/133-1.png&quot; alt=&quot;image-20210811000504275&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://zjuytw.github.io/tags/BFS/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>491.Increasing Subsequences</title>
    <link href="https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/"/>
    <id>https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/</id>
    <published>2021-08-10T16:15:38.362Z</published>
    <updated>2021-08-10T16:15:08.836Z</updated>
    
    <content type="html"><![CDATA[<h1>491.Increasing Subsequences</h1><h2>Description</h2><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-1.png" alt="image-20210810235346772"></p><h2>Solution</h2><p>Two solutions:</p><ul><li>DP, use <code>set&lt;vector&lt;int&gt;&gt;</code> to deduplicate</li><li>Back Tracking, don’t forget deduplicating</li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        set&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; Set;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            dp[i].<span class="built_in">push_back</span>(&#123;nums[i]&#125;);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt;= nums[j])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> sequence: dp[j])&#123;</span><br><span class="line">                        <span class="comment">//sequence -&gt; vector&lt;int&gt;</span></span><br><span class="line">                        dp[i].<span class="built_in">push_back</span>(sequence);</span><br><span class="line">                        dp[i].<span class="built_in">back</span>().<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        Set.<span class="built_in">insert</span>(dp[i].<span class="built_in">back</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> seq : Set)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(seq);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution2 :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; curRes;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, curRes);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> curPos, vector&lt;<span class="keyword">int</span>&gt;&amp; curres)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curres.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">            res.<span class="built_in">push_back</span>(curres);</span><br><span class="line">        <span class="keyword">if</span>(curPos == nums.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; seen;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curres.<span class="built_in">size</span>()&gt;<span class="number">0</span> &amp;&amp; nums[i] &lt; curres.<span class="built_in">back</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(seen.<span class="built_in">count</span>(nums[i]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            curres.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, i+<span class="number">1</span>, curres);</span><br><span class="line">            curres.<span class="built_in">pop_back</span>();</span><br><span class="line">            seen.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-2.jpg" alt="491-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;491.Increasing Subsequences&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/491.%20Increasing%20Subsequences/491-1.png&quot; alt=&quot;image-</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Back Tracking" scheme="https://zjuytw.github.io/tags/Back-Tracking/"/>
    
  </entry>
  
  <entry>
    <title>413. Arithmetic Slices</title>
    <link href="https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/"/>
    <id>https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/</id>
    <published>2021-08-10T16:15:38.359Z</published>
    <updated>2021-08-10T16:12:47.366Z</updated>
    
    <content type="html"><![CDATA[<h1>413. Arithmetic Slices</h1><h2>Description</h2><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-1.png" alt="image-20210811000154179"></p><h2>Solution</h2><p>Iteration to find <code>start &amp; end</code> of each <code>Arithmetic</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diff</span><span class="params">(nums.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            diff[i<span class="number">-1</span>] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prev = diff[<span class="number">0</span>], count = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev == diff[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                res += count;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-2.jpg" alt="413-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;413. Arithmetic Slices&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/413.%20Arithmetic%20Slices/413-1.png&quot; alt=&quot;image-20210811000</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Iteration" scheme="https://zjuytw.github.io/tags/Iteration/"/>
    
  </entry>
  
  <entry>
    <title>727. Minimum Window Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/</id>
    <published>2021-08-09T16:39:05.536Z</published>
    <updated>2021-08-09T16:37:26.337Z</updated>
    
    <content type="html"><![CDATA[<h1>727. Minimum Window Subsequence</h1><h2>Description</h2><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png" alt="457-1"></p><h2>Solution</h2><p>There are two solutions, one is original DP(very common solution that must think of it when encounter a string problem), another is Finite State Machine solution.</p><h3>DP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DP[i][j] = the minimum subsequence length k</span><br><span class="line">//e.g, s2[0 : j] is a subsequence of s1[i - k + 1: i]</span><br><span class="line"></span><br><span class="line">if s1[i] == s2[j]</span><br><span class="line">dp[i][j] = dp[i-1][j-1] + 1</span><br><span class="line">else</span><br><span class="line">dp[i][j] = dp[i-1][j] + 1</span><br><span class="line"></span><br><span class="line">return min&#123;dp[i][N]&#125; for i= 1,2,3..M</span><br></pre></td></tr></table></figure><h3>Finite State Machine</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Define a array next[i][ch]: look right from position i, the pos of the nearest ch</span><br><span class="line"></span><br><span class="line">With the next[][], we directly jump into next nearest matched postion without iterate.</span><br><span class="line"></span><br><span class="line">And the way to calculate next is DP, we see from back to front</span><br><span class="line"></span><br><span class="line">next[i][ch] = next[i+1][ch](except next[i][s[i+1] - &#x27;a&#x27;] = i+1)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//DP</span></span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;int&gt;&gt; dp(s1.size() + 1, vector&lt;int&gt;(s2.size() + 1, INT_MAX));</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt;= s1.size(); i++)</span></span><br><span class="line">        <span class="comment">//     dp[i][0] = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j = 1; j &lt;= s2.size() &amp;&amp; j &lt;= i; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(s1[i-1] == s2[j-1] &amp;&amp; dp[i-1][j-1] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j-1] + 1;</span></span><br><span class="line">        <span class="comment">//         else if(s1[i-1] != s2[j-1] &amp;&amp; dp[i-1][j] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j] + 1;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// string res = &quot;&quot;;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if((res == &quot;&quot; &amp;&amp; dp[i][s2.size()] != INT_MAX) || res.size() &gt; dp[i][s2.size()])&#123;</span></span><br><span class="line">        <span class="comment">//         res = s1.substr(i-dp[i][s2.size()], dp[i][s2.size()]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Finite-State-Machine</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">next</span>(s1.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            next[s1.<span class="built_in">size</span>()<span class="number">-1</span>][i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s1.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</span><br><span class="line">                next[i][j] = next[i+<span class="number">1</span>][j];</span><br><span class="line">            next[i][s1[i+<span class="number">1</span>] - <span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> length = INT_MAX, start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i] == s2[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i, s2i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(s2i &lt; s2.<span class="built_in">size</span>() &amp;&amp; next[j][s2[s2i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">-1</span>)&#123;</span><br><span class="line">                    j = next[j][s2[s2i++] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s2i == s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; j - i + <span class="number">1</span>)&#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        length = j - i + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length != INT_MAX)</span><br><span class="line">            res = s1.<span class="built_in">substr</span>(start, length);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-2.png" alt="457-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;727. Minimum Window Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Finite State Machine" scheme="https://zjuytw.github.io/tags/Finite-State-Machine/"/>
    
  </entry>
  
  <entry>
    <title>313. Super Ugly Number</title>
    <link href="https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/"/>
    <id>https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/</id>
    <published>2021-08-09T16:39:05.535Z</published>
    <updated>2021-08-09T16:38:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1>313. Super Ugly Number</h1><h2>Description</h2><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png" alt="image-20210810003242724"></p><h2>Solution</h2><p>Use priority_queue to find the smallest number</p><p>Be careful about integer overflow.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; primes)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">long</span>, vector&lt;<span class="keyword">long</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">long</span> top;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            top = pq.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() == top)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> prime: primes)</span><br><span class="line">                pq.<span class="built_in">push</span>(top * prime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-3.jpg" alt="313-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;313. Super Ugly Number&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png&quot; alt=&quot;image-202108100</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1353. Maximum Number of Events That Can Be Attended</title>
    <link href="https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/"/>
    <id>https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/</id>
    <published>2021-08-09T16:39:05.516Z</published>
    <updated>2021-08-09T16:38:24.239Z</updated>
    
    <content type="html"><![CDATA[<h1>1353. Maximum Number of Events That Can Be Attended</h1><h2>Description</h2><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-1.png" alt="image-20210810002606817"></p><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-2.jpg" alt="1353-2"></p><h2>Solution</h2><p>Use priority_queue to find the closed DDL’s event and handle it in the day.</p><p>There is are tricky programming point that we can directly iterate the whole [earliest start time, latest finish time] to find each day’s best strategy or we can also iterate every sorted event.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(events.<span class="built_in">begin</span>(), events.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">1E5</span>; day++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; events.<span class="built_in">size</span>() &amp;&amp; events[i][<span class="number">0</span>] == day)&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(events[i++][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &lt; day)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &gt;= day)&#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// int curt = events[0][0];</span></span><br><span class="line">        <span class="comment">// int res = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; events.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if(curt == events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//         while(!pq.empty() &amp;&amp; curt &lt; events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//             curt++;</span></span><br><span class="line">        <span class="comment">//             res++;</span></span><br><span class="line">        <span class="comment">//             pq.pop();</span></span><br><span class="line">        <span class="comment">//             while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//                 pq.pop();</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         curt = events[i][0];</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// while(!pq.empty() &amp;&amp; pq.top() &gt;= curt)&#123;</span></span><br><span class="line">        <span class="comment">//     curt++;</span></span><br><span class="line">        <span class="comment">//     res++;</span></span><br><span class="line">        <span class="comment">//     pq.pop();</span></span><br><span class="line">        <span class="comment">//     while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//         pq.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-3.jpg" alt="1353-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1353. Maximum Number of Events That Can Be Attended&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/1353.%20Maximum%20Number%20of%2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Bitcoin lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-19.%20Bitcoin/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-19.%20Bitcoin/</id>
    <published>2021-08-09T09:13:23.361Z</published>
    <updated>2021-08-09T10:06:13.523Z</updated>
    
    <content type="html"><![CDATA[<h1>Bitcoin</h1><p>As mentioned in Satoshi Nakamoto’s paper that bitcoin is aimed to prevent double-spending as well as reduce the cost of third party involvement. </p><p>Bitcoin has three features that makes it Epoch-making</p><ul><li>Decentralization</li><li>Using Peer-to-Peer Technology</li><li>Low-cost transaction</li></ul><h2>Brief Intro </h2><p>Bitcoin is a distributed ledger which implement decentralization. Bitcoin ‘s design should solve Byzantine Generals Problem because it is running through public Internet. Bitcoin systems reply on <em>Proof of Work</em> to verify each node’s validation to prove itself running on a true CPU. Bitcoin also promise that : Malicious nodes’ blockchain won’t grow long, if most of nodes in the network are meritorious.</p><p>For double-spending problem, block-chain ensures that even if blockchain may fork at some point, but only one fork will be accepted in the end.</p><h3>Drawbacks</h3><ul><li>Every new transaction need 10 min before recording on the blockchain</li><li>The trustworthiness grows as the chain grows longer, but still have chance to be waived by receiving a longer chain from other node.</li><li>Waste energy</li></ul><h2>Extends</h2><p>You may read paper and watch lecture to get more detailed information about bitcoin.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Bitcoin&lt;/h1&gt;

&lt;p&gt;As mentioned in Satoshi Nakamoto’s paper that bitcoin is aimed to prevent double-spending as well as reduce the cost of</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Bitcoin" scheme="https://zjuytw.github.io/tags/Bitcoin/"/>
    
  </entry>
  
  <entry>
    <title>6.824 CT lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/</id>
    <published>2021-08-09T09:13:23.356Z</published>
    <updated>2021-08-09T10:45:57.253Z</updated>
    
    <content type="html"><![CDATA[<h1> Certificate Transparency</h1><h2>Introduce</h2><p>First review the vulnerability of HTTP and an example of  Man in the Middle Attack.</p><h4> HTTP</h4><blockquote><p>HTTP is a request response protocol to communicate asynchronously between client and server.</p><p>For websites and pages the browser acts as a client and a web-server like Apache or IIS acts as server. The server hosts the files (like html , audio , video files etc) and returns are responds to client requests with the data. Depending on the request a response contains the status of the request.</p><p>The process involves a series of messages that go back and forth between the client and server. The process starts with initiating a connection. After that a process known as TCP slow start kicks in. At this point data is passed between the two parties via data packets and often requires multiple round trips.</p><p>TCP slow start is designed to gradually expand the amount of data traversing the wire each round trip. The initial packet size is 16kb and doubles on subsequent round trips until a max size is reached. This can vary, but tends to be around 4MB for most connections.</p><p>This process is used because the server does not know how much bandwidth the client can handle. Rather than overflowing the client the server uses a gentle size and continues to increase until a limit is found.</p><p>As data or request bodies move between the client and the server it is done using clear or plain text. This is viewable by anyone or software watching the network traffic.</p><p>This is not that important for general content. However, today even when you don’t think sensitive data is moving between the two parties more sessions do transport identifying information. This is why every website should use TLS to secure HTTP connections.</p></blockquote><h4> Man in the Middle Attack</h4><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/man-in-the-middle-mitm-attack.png" alt="man-in-the-middle-mitm-attack"></p><p>A third-party may easily hijack the connection towards target website and redirect to its own rogue web, for no further check mechanism in HTTP.</p><h4>Certificate, SSL, TLS, HTTPS</h4><p><strong>HTTPS work flow:</strong></p><p><img src="https-connection-sequence-diagram.png" alt="https-connection-sequence-diagram"></p><p>Particularly, server should request a certificate from <em>CA(Certificate Authority)</em>. Whenever client send a connection request to server, it will receive a CERT from server.</p><table><thead><tr><th>Certificate</th></tr></thead><tbody><tr><td>Server name, eg: “gmail.com”</td></tr><tr><td>Public Key of server</td></tr><tr><td>CA’s Signature</td></tr></tbody></table><p>CA’s unique signature ensures that just CA can issue the certificate to server that no one else can counterfeit.</p><p><strong>NOTE:</strong> A vulnerability of this scheme is that once a CA was broken into or something else happened and caused CA issued a malicious certificate. Client may have chance to talk to a rogue web and info may get leaked.</p><h2>Certificate Transparency</h2><p>Certificate Transparency is a system that stores certificate logs which are stored distributed and append-only on CT. CT can provide user certificate verification to keep CA from issuing malicious certificate and the certificate even keep in CA for longer time.</p><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/CT_work_flow.png" alt="CT work flow"></p><p>CT promises following:</p><ul><li>Certificates are deposited in public, transparent logs</li><li>Logs are cryptographically monitored</li></ul><h3>Implementation</h3><p>Each certificates are stored as a node in Merkle Tree in CT. <img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/MerkleTree.png" alt="Merkle Tree"></p><p>Each node in each level is the value of the output of <em>cryptographic hash function</em> that maps an arbitrary-size message <em>M</em> to a small fixed-size output H(<em>M</em>), with the property that it is infeasible in practice to produce any pair of distinct messages <em>M1</em> ≠ <em>M2</em> with identical hashes H(<em>M1</em>) = H(<em>M2</em>). And the we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h(0, K) = H(record K)</span><br><span class="line">h(L+1, K) = H(h(L, 2 K), h(L, 2 K+1))</span><br></pre></td></tr></table></figure><p>With the property of above, we can determine whether a specific certificate stored in the tree, we can recompute hash(<em>the certificate</em>) and the hash value of its siblings and relatives to finally get the top-level’s hash. If H(4,0) == recomputed H(4,0), then proved.</p><p><strong>Example:</strong></p><p>For example, suppose we want to prove that a certain bit string <em>B</em> is in fact record 9 in a tree of 16 records with top-level hash <em>T</em>. We can provide those bits along with the other hash inputs needed to reconstruct the overall tree hash using those bits. Specifically, the client can derive as well as we can that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">T = h(4, 0)</span><br><span class="line">= H(h(3, 0), h(3, 1))</span><br><span class="line">= H(h(3, 0), H(h(2, 2), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(h(1, 4), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), h(0, 9)), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), H(record 9)), h(1, 5)), h(2, 3)))</span><br><span class="line">= H(h(3, 0), H(H(H(h(0, 8), H(B)), h(1, 5)), h(2, 3)))</span><br></pre></td></tr></table></figure><h3> Fork Attack (Fork Consistency)</h3><p>The proof of fork consistency, image a log servers have a chain of logs and once the log server wants to fork (like, to trick a user for a malicious certificate but not seen by other monitors etc.) CT has a mechanism to detect the inconsistency by <em>gossip</em></p><p><img src="/2021/08/09/6.824-18.%20Certificate%20Transparency(Fork%20Consistency)/ForkConsistencyEg.png" alt="Fork Consistency eg"></p><p>Like the example, once a log server has a fork line that starts with B for bogus and have a current STH(signed tree head, the top-level hash value). We can simply calculate if STH1’s log a prefix log of STH2’s log by the same way prove if STH1’s log is inside STH2’s log tree.</p><p>If return a false, which means STH1 is on a different fork.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt; Certificate Transparency&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;First review the vulnerability of HTTP and an example of  Man in the Middle Attac</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Certificate Transparency" scheme="https://zjuytw.github.io/tags/Certificate-Transparency/"/>
    
  </entry>
  
  <entry>
    <title>6.824 COPS lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-17.COPS(Causal%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-17.COPS(Causal%20Consistency)/</id>
    <published>2021-08-09T09:13:23.348Z</published>
    <updated>2021-08-09T10:06:00.232Z</updated>
    
    <content type="html"><![CDATA[<h1> COPS</h1><h2>Introduce</h2><p>Still the website Front-End read from DB storage cluster model. We are gonna explore another possibility as local read and local write to speed up transactions. How to achieve <em>stronger</em> Consistency in terms of CAP Theorem.</p><p>Consider [Spanner](./13.Spanner(Strong Consistency RW).md) and [Memcache](./16.Memcache(Cache Consistency).md)’s scheme</p><ul><li>Spanner</li></ul><blockquote><p>Linearizability</p><p>For R/W transaction, Use PAXOS and 2PC to write to remote replication. (Wait for quorum’s acknowledge)</p><p>For R/O transaction, read from local. Use Snapshot Isolation and TrueTime clock mechanism to ensure local serializability.</p></blockquote><ul><li>Memcache</li></ul><blockquote><p>Eventual Consistency</p><p>Introduce memcache layer to achieve write to DB and read from memcache.</p><p>Write need receive DB’s acknowledge and read has no need to wait.</p></blockquote><p>For COPS,  it figures out a new way to make more efficient read and write by implementing <em>causal consistency</em>, which is stronger than eventual consistency but weaker than linearizability.</p><h2>Implementation</h2><p><img src="/2021/08/09/6.824-17.COPS(Causal%20Consistency)/COPS.png" alt="COPS"></p><p>COPS, aka Cluster of Order-Preserving Servers, a key-value store that delivers causal-consistency model across the wide-area. Every Data Center has a local COPS cluster, which maintains a complete replica of stored data. So client can just talk to local cluster for data’s read and write.</p><p>In each Data Center, data are divided into many shards, which is linearizable and clients access each partition independently. So the whole cluster is linearizable as well. The problem comes when clusters communicate with each other to remain sync. </p><p>To achieve causal consistency, COPS have a prime node be responsible for local writing. After local writing is finished, prime will send it to other cluster’s prime node, and a version number will be sent as well to keep causal order.</p><h2> Causality</h2><p>​     <em>Potential Causality definition</em> </p><ul><li><p><strong>Execution Thread</strong>. If a and b are two operations in a single thread of execution, then a -&gt; b if operation a happens before operation b</p></li><li><p><strong>Gets From</strong>. If a is a put operation and b is a get operation that returns the value written by a, then a -&gt; b</p></li><li><p><strong>Transitivity</strong>. For operations a, b, and c, if a -&gt; b and b -&gt; c, then a -&gt; c</p></li></ul><p><strong>Example</strong>:</p><p><img src="/2021/08/09/6.824-17.COPS(Causal%20Consistency)/causal.png" alt="causal"></p><p>We can learn from the figure that <em>put(z,5)</em> is derived from <em>get(x) = 4</em>, which means to execute <em>put(z,5)</em> we have ensured that what is logically happened earlier than it. </p><p><strong>Note:</strong> If the system can not tell weather two operation’s happening order, since there is no explicit reason about they, We can simply define they are concurrent, so system can decide the order they happen. But for two <em>put</em> concurrently write to the same key, there is a conflict.</p><p>So to deal with conflicts, <code>Last write win</code> is a proper way to deal with it but if we want to do<code>append &amp; atomical count</code> like thing, this strategy may not work.</p><h2> Context</h2><p>Each client maintains a context to explicitly mark their state. After each operation, the client will append a entry of keys’ version. So DC can  simply use this entries to verify the dependencies of one operation.</p><p><strong>Example</strong>:</p><p>We have 3 Data Centers, and one client calls put(Z, value, Zver3, Xver2, Yver4) to put Z = value. To forward this operation to other DC, DC1 will check the dependencies of Zver3, Xver2, Yver4 in other DC, if others’ are not in this stage, it will wait till other DCs reach or exceed the dependencies’ version number</p><h2>Lamport Timestamp</h2><p>To achieve global order, COPS use <code>Lamport Timestamp in higher bits + unique ID For Data Center in lower bits</code> . Combining with Logical timeclock and Wall Clock, we can give a global sequence despite of large inaccuracy.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tmax = highest version seen (from self and others)</span><br><span class="line">T = max(Tmax + 1, wall-clock time)</span><br></pre></td></tr></table></figure><h2>Write</h2><p>Client -&gt; Local Data Store Cluster -&gt; other DCs</p><p>When client sends a <em>put(key, value …)</em> , client library will calculate the dependencies according to the context. The local prime will wait till cluster has indeed store all the dependencies( check by version number). Then send to remote clusters, do the same.</p><h2>Read</h2><p>Read from local cluster, the library function provide both read the latest version of key and a specific older one by explicitly send a context with get.</p><h2> limitation </h2><ul><li><p>Causal Consistency can not be aware of external dependency. For example, Alice told Bob to check a new status of the key, and then Bob sent a get request via client. Now Bob may see old value of key because the system do not know that Alice calls Bob yields Bob’s get request.</p><p>And this is also discussed by lamport in &lt;Time, Clocks, and the Ordering of Events in a Distributed System&gt;</p></li><li><p>It’s hard to manage conflict, <code>Last write win</code> is not generic </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt; COPS&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Still the website Front-End read from DB storage cluster model. We are gonna explore another possibil</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="COPS" scheme="https://zjuytw.github.io/tags/COPS/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Memcache lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/</id>
    <published>2021-08-09T09:13:23.342Z</published>
    <updated>2021-08-09T10:05:56.458Z</updated>
    
    <content type="html"><![CDATA[<h1>Memcahce at Facebook </h1><h2>Intro</h2><p>In a popular webserver scenario, we have web application that clients send request (especially most reads and a few writes) to Data Base, and as we both know things get worse when one peer in the system suffer a throughput bottleneck. To achieve better performance and also get stronger consistency.</p><ul><li>Single Web Server(eg, running on Apache Tomcat) + Single  DataBase(eg, MySQL/ Oracle)</li></ul><p>​        &#8595; </p><ul><li><p>Muti-Stateless Web Server + Single DB</p><p>&#8595;</p></li><li><p>Mutl-Stateless Web Server + DB cluster(sharded  by key, in both scheme and table layer)</p></li></ul><p>​       &#8595;</p><ul><li>Mutl-Stateless Web Server + Memcache (For speeding up reads) + DB cluster</li></ul><h2>Implementation</h2><p>Facebook noticed that their customers consume an ordered of magnitude more content that they create, so fetching data is the domain element for the performance bottleneck. Also, they have various storage services, like MySQL, HDFS etc, which means a flexible caching strategy is needed.</p><p>Finally, they came up with an architecture that separate caching layer from the persistence layer, which means that for a group a Web server, they combine with a group of Memcache to form a <em>Front-End Cluster</em>, then a Front-End Cluster combine with a data-completed DB to form a <em>region</em>(AKA Data Center). So as the distributed spread of region, users from different area of USA can access to the Web server with lowest latency by choosing different region.</p><p><img src="/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/Memcache1.png" alt="Memcache1"></p><p>Because of the tolerance of stale message differs in different situation</p><ul><li>User can stand for transient stale data, but not too long</li><li>User tend to observe their latest data after writing it</li></ul><p>So the Memcache can achieve eventual consistency by using its R/W strategy.<img src="/2021/08/09/6.824-16.Memcache(Cache%20Consistency)/Memcache2.png" alt="Memcache2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Read Scheme:</span><br><span class="line">v = get(k)</span><br><span class="line">if v == nil</span><br><span class="line">v = fetch from DB</span><br><span class="line">set(k,v)</span><br><span class="line"></span><br><span class="line">Write Scheme:</span><br><span class="line">send k,v to DB</span><br><span class="line">delete(k) in MC</span><br></pre></td></tr></table></figure><h4>Hint</h4><ul><li><p>This scheme can not prevent users from seeing stale data</p><ul><li>If user read exactly after <em>line 8</em>, at this point, Memcache still holds the stale data but DB has updated the key to the new value</li></ul></li><li><p>Q: Why not delete key in the MC first before <em>send k,v to DB</em>?</p><ul><li>A: Because if at the time deleted the key in MC but another server did not see key in MC, it will send fetch to DB then may get the stale data that might be deleted afterwards and store to MC. Then MC may store the stale data until another write is fired up.</li></ul></li><li><p>Q: Why not just set(k,v) in MV in <em>line 9</em></p><ul><li>A : Because delete is idempotent while set is not. Check in the example:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C1 : x = 1 -&gt; DB</span><br><span class="line">C2 : x = 2 -&gt; DB</span><br><span class="line"> set(x,2)</span><br><span class="line">C1 : set(x,1)</span><br><span class="line">// makes stale data stored</span><br></pre></td></tr></table></figure></li><li><p>Prime &amp; Secondary Scheme</p><ul><li>For many regions, there is one master region and many salve region</li><li>Local Read and Prime Write<ul><li>For read, each FE read use <em>Read Scheme</em> in local region. This is super fast</li><li>For write, slave’s write need to be send to primary region</li></ul></li><li>Prime&amp;Secondary replication, primary DB always send info to remote DB to stay in sync</li></ul></li></ul><h2>Performance</h2><p>Let’s talk about two parallel process strategies.</p><ul><li>Partition<ul><li>increase RAM efficiency that each Key just store once </li><li>Not good for  some hot keys</li><li>Client may talk to many part for one website’s resource</li></ul></li><li>Replication<ul><li>Good for hot key</li><li>Fewer TCP connection</li><li>RAM wasted for more replica</li></ul></li></ul><p>For Facebook’s architecture, we have two completed replicated asynchronized region that brings fault-tolerance also low-latency for different area’s user. In each region, FB partitioned DB then using many Memcache to cache hot keys to reduce DB’s load. There is also a regional Memcache cluster in each region to cache those not too hot keys.</p><h2> Lease</h2><p> FB uses lease mechanism to fix the <em>Thunder Herd and Race Condition</em>.</p><ul><li><p>Thunder Herd – If many FE are simultaneously read the same key from Memcache and at this time, one FE do a write() and delete the old key in Memcache. Then DB may have the risk of flooded by too many queries for one key.</p></li><li><p>Race Condition – Example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C1 : get(k) -&gt; miss</span><br><span class="line">C1 : read k from DB -&gt; value1</span><br><span class="line">C2 : write k = value2 -&gt; DB</span><br><span class="line">C2 : delete(k) to MC</span><br><span class="line">C1 : set(k,v1) to MC</span><br><span class="line">// In this situation, stale data of value1 will store on MC forever</span><br></pre></td></tr></table></figure><h4>Solution</h4><p>To each get(k), Memcache server should issue FE a lease for a period of time.</p><ul><li>Thunder Herd, if one FE get the lease, then others that also send get(k) will block till the first FE calls put(k,v, l) or lease expired</li><li>Race Condition, C1’s get(k) will be issued a lease, but C2’s delete will invalid the old lease, the when C1 fetch value1 from DB then calls put(k,v1, l), the Memcache server will reject it.</li></ul></li></ul><h2>Extend</h2><p>Another introduce of twitter’s cache system in <a href="https://tanxinyu.work/twitter-cache-analysis-thesis/">Twitter 内存缓存系统分析论文阅读</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Memcahce at Facebook &lt;/h1&gt;

&lt;h2&gt;Intro&lt;/h2&gt;

&lt;p&gt;In a popular webserver scenario, we have web application that clients send request (espec</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Memcache@FB" scheme="https://zjuytw.github.io/tags/Memcache-FB/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Spark lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/</id>
    <published>2021-08-09T09:13:23.335Z</published>
    <updated>2021-08-09T10:06:04.918Z</updated>
    
    <content type="html"><![CDATA[<h1>Spark</h1><h2>Introduce</h2><p>Spark is a successor of MapReduce to process distributed big-data computing tasks.  Frameworks like MapReduce, Dryad, and Spark help data scientists to focus on their business rather than wasting time on designing the distributed tasks and fault-tolerance. </p><p>There are some constraints in previous frameworks that MapReduce lacks abstractions for leveraging distributed memory so makes it inefficient for those that reuse intermediate results across multiple computations and lacks high interactive flexibility, programmers may have trouble implementing some complex algorithms. </p><p>Spark is an implementation of a new abstraction called resilient distributed datasets(RDDs), which are fault-tolerant, parallel data structures that let users explicitly persist intermediate results in memory, control their partitioning to optimize data placement, and manipulate them using a rich set of operators.</p><h2> RDD</h2><p>RDD(Resilient Distributed Dataset) is a collection of Read-Only and Partitioned records. RDDs can only be created through deterministic operations on either 1) data in stable storage or 2) other RDDs. Spark uses <em>Lineage</em> to keep track of how each RDD is transformed from previous datasets.<img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/lineage.jpg" alt="lineage"></p><p>Spark provides <em>Action</em> as well as <em>Transformation</em>. Action calculate RDDs and gets a result. Transformation imports data from external sources or transform an old RDD to a new Read-Only RDD.</p><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/Transformation_Action.jpg" alt="Transformation_Action"></p><h2>Computation Schedule</h2><p>RDDs are stored in distributed servers, so when we need to do Transformation,  systems need to fetch previous RDD in the corresponding servers. There are two kinds of Transformations that forms different dependency between RDDs</p><ul><li>Narrow Dependency : Each partition of the parent RDD is used by at most one partition of  the child RDD.</li><li>Wide Dependency : Multiple child partitions may depend on the parent RDD.</li></ul><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/Dependencies.png" alt="Dependencies"></p><p>Spark speeds up Transformation by optimizing the Transformations related to <em>Narrow Dependency</em>. First, narrow dependencies allow for pipelined execution on one cluster node, which can compute all the parent partitions.  Second, recovery after a node failure is more efficient with a narrow dependency, as only the lost parent partitions need to be recomputed.</p><p>In contrast, in a lineage graph with wide dependencies, a single failed node might cause the loss of some partition form all the ancestors of an RDD, requiring a complete re-execution.</p><p>Overall, a RDD are consistent of  the following elements:</p><ul><li>Its partitions</li><li>Its parent partitions</li><li>Transformation</li><li>Its metadata(eg, data type, storage position etc.)</li></ul><p><img src="/2021/08/09/6.824-15.Spark(Big%20Data%20Process)/stage.jpg" alt="stage"></p><p>When user calls Action to process computation on RDD, Spark will build different stages according to lineages. Hence, Spark can build a job stage that contains as many Narrow Dependencies as possible to speed up the whole system’s efficiency. The boundaries of the stages are the shuffle operations required for wide dependencies, or any already computed partitions that can short-circuit the computations of a parent RDD. After building the job stages, Spark then launches tasks to compute missing partitions from each stage until it has computed the target RDD.</p><p>While scheduling Tasks, Spark assigns tasks to machines based on data locality. The task will directly be processed by those nodes that is already holds the partition needed in memory. Otherwise, if a task processes a partition for which the containing RDD provides preferred locations(eg, an HDFS file), we send it to those.</p><h2>Fault-Tolerance</h2><p>Spark can re-compute the content of a failed RDD by dependencies from lineage graph. But there is a wide dependency during the re-computation, which means we have to re-compute all the RDD it depends, also, Spark won’t store all the RDD in the memory, or it will soon run out of memory. So we have to manually do persist, if necessary. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.persist(REPLICATE)</span><br></pre></td></tr></table></figure><h2>Conclusion</h2><p>Spark RDD has the feature of:</p><ul><li>Store all info directly on memory</li><li>Interactive API</li><li>Find both Narrow and Wide Dependencies, while narrow one is more efficiency</li><li>Have Checkpoint to failover from wide dependency failure</li></ul><p>But we still need to be aware that Spark is not a replacement for MapReduce: For those model and algorithms already fit in MapReduce, Spark won’t have a more efficient result for them.</p><p>&lt;h2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Spark&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Spark is a successor of MapReduce to process distributed big-data computing tasks.  Frameworks like M</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Spark" scheme="https://zjuytw.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>6.824 CRAQ lecture note(Pending for updated)</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-14.OCC(FaRM)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-14.OCC(FaRM)/</id>
    <published>2021-08-09T09:13:23.329Z</published>
    <updated>2021-08-09T10:44:28.217Z</updated>
    
    <content type="html"><![CDATA[<h1>FaRM (To be updated...)</h1><h2>Introduce</h2><p>Microsoft’s main memory distributed computing platform, FaRM can provide distributed transactions with serializability, high performance, durability, and high availability using RDMA and a new, inexpensive approach to providing non-volatile DRAM.</p><h3>NVRAM</h3><ul><li>Strategy to become non-volatile:<ul><li>Using battery as back-up power, once the electric power fails, the system goes with battery and do all context saving work then shut down</li><li><strong>Note:</strong> This scheme is just helpful when encounters power failure, is not applicable for hardware/ software failure. –Because otherwise the system just shut down directly.</li></ul></li></ul><h2>Optimistic Concurrency Control</h2><p>For a optimistic lock, we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Xaction begin</span><br><span class="line">read all values without lock</span><br><span class="line">use a buffer to store write</span><br><span class="line">commit write</span><br><span class="line">Xaction end</span><br></pre></td></tr></table></figure><p>Before commit transaction to storage, system need to verify the validation of the transaction. If success, then commit, else abort all the operation related to transaction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tx.create()</span><br><span class="line">o = tx.copyRead(OID)</span><br><span class="line">o.value += 1</span><br><span class="line">tx.write(OID, o)</span><br><span class="line">ok := tx.commt()</span><br></pre></td></tr></table></figure><h2>Transaction Management</h2><p><img src="/2021/08/09/6.824-14.OCC(FaRM)/Farm1.jpg" alt="Farm1"></p><p> <img src="/2021/08/09/6.824-14.OCC(FaRM)/OCC_commit_protocol.png" alt="OCC commit protocol"></p><p>Refer to the above figures about server layout and OCC commit protocol. Let’s talk about FaRM’s transaction management. FaRM uses OCC and 2PC to achieve its serializability.</p><p><strong>2PC strategy</strong></p><ul><li> Read without lock, read(&amp; value, &amp;version)</li><li>use one-side RDMA to read</li><li>Lock the revised data<ul><li>primary polling for data which is (use DRMA to poll)<ul><li>locked, so send reject</li><li>VERS changed, then send reject</li><li>else, then set the lock and send yes.( To avoid racing, use CHECK&amp;SET atomic operation here)</li></ul></li></ul></li><li>do validation for those no changed shard<ul><li>To check if version changed or locked]</li></ul></li><li>Commit</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;FaRM (To be updated...)&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Microsoft’s main memory distributed computing platform, FaRM can provide distribute</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="FaRM" scheme="https://zjuytw.github.io/tags/FaRM/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Spanner lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/</id>
    <published>2021-08-09T09:13:19.948Z</published>
    <updated>2021-08-09T10:05:42.935Z</updated>
    
    <content type="html"><![CDATA[<h1>Spanner </h1><h1>Introduce</h1><p>Spanner is Google’s scalable, multi-version, globally-distributed, and synchronously-replicated data. Spanner is the first global distributed Database and support external consistency. It is a big framework, but I just want to focus on some particular points – Mainly about external consistency and True-Time mechanism.</p><p>You may look for more detailed illustration on Google’s Spanner paper or other’s blog about spanner.</p><h2>Consistency</h2><p><img src="/2021/08/09/6.824-13.Spanner(Strong%20Consistency%20RW)/spanner1.webp" alt="spanner1"></p><p>Assume that if we have 3 Data Centers, we have to send data across all data centers to keep consistency.  To keep a strong consistency, Google uses paxos to send logs and reach consensus. Moreover, google has its True-Time mechanism to reach external consistency, but let’s talk about it later.</p><h3>R/W transactions</h3><p>For a transaction both need to read and write,spanner uses 2PC.</p><ul><li>Pick a unique transaction ID to identify</li><li>Do all the reads first then do all writes</li><li>Send read request to all leaders in DCs, then DC lock the resources and reply</li><li>Choose a leader as transaction coordinator</li><li>Send writes request to all leaders, and leader gonna send prepared msg to followers into paxos log to make sure leader isn’t crashed and lost lock</li><li>Once one leader finishes promising to followers, it sends a Yes to the coordinator</li><li>Once coordinate received all Yes signal, it start to commit writes to its followers</li><li>Then tell other leader to commit</li></ul><h3>R/O transactions</h3><p>For Read-Only transactions, spanner speeds up this type by no 2PC and no locks.</p><blockquote><p> Start with a question that why we not directly read the latest value of each key needed?</p><p>Answer: </p><p>For a transaction T3 that print(x,y), if we have the timeline of below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1 :  wx,wy,commit</span><br><span class="line">T2 :                      wx,wy,commit               </span><br><span class="line">T3 :                 Rx                 Ry</span><br></pre></td></tr></table></figure><p>T3 just saw x,y yielded by different transaction which breaks the serializability.</p></blockquote><p>From the example above, we know that our read need to fetch data in the same version. So spanner need to at least reach level of <em>Snapshot Isolation</em>.</p><pre><code>&lt;h4&gt; Snapshot Isolation&lt;/h4&gt;</code></pre><p>Spanner gives each transaction a timestamp, which makes all transactions execute in Timestamp order.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R/W&#x27;s TS = commit time</span><br><span class="line">R/O&#x27;s TS = start time</span><br></pre></td></tr></table></figure><p> Because Spanner has a multi-versions DB, that stores many versions (Not all version but a transient period’s versions). For R/O Xactions, DB can find the value with latest version less than R/O’s start time.</p><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T1 @TS10:  wx,wy,commit()</span><br><span class="line">                    ⬆x@10 = 9, y@10 = 10</span><br><span class="line">T2 @TS20:                      wx,wy,commit</span><br><span class="line">                               ⬆x@20 = 8, y@10 = 12</span><br><span class="line">T3 @TS15:                 Rx                 Ry</span><br><span class="line">   ⬆ read the TS of 10</span><br></pre></td></tr></table></figure><blockquote><p>Q: what if local replica is minority, how to get latest version less than TS?</p><p>A: Every paxos peer gets log from leader, if one follower’s last log’s Timestamp &lt; TS, it will wait for leader’s msg till last log’s TS exceeds required TS</p></blockquote><h2> True-Time mechanism</h2><p>Because of working volts and inner CPU frequency , it is likely every DC’s time can not keep sync without outside’s help. We have two consequence:</p><blockquote><ol><li><p>R/O transaction’s TS too large</p><p> Answer: correct in practice but slow, it will wait for paxo replicas to catch up</p></li><li><p>R/O transaction’s TS too small</p><p>Answer: it may miss recent writes, and not external consistent</p></li></ol></blockquote><p>In Spanner’s scheme, Google has a satellites to keep synchronize its official time to each DC.  In considering of latency in transportation, Spanner give each TT a range to mark its {earliest, latest} arrival time.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TT interval = [Earliest, Latest]</span><br></pre></td></tr></table></figure><p>And we have a start rule: </p><ul><li><p>TS = TT.now(). latest</p></li><li><p>For R/O, TS is the latest TT on start</p></li><li><p>For R/W, TS is the latest TT on commit</p></li><li><p>Commit Delay strategy</p><ul><li>R/W transaction delays till transaction’s commit time &lt; TS.now().earliest</li><li>To make sure commit time in the past.</li></ul></li></ul><h2>Extends</h2><p>There are many details I haven’t covered, if you are interest in them. You can just search on Google for English Blogs, as for Chinese Blogs, I do recommend <a href="https://www.jianshu.com/p/6ae6e7989161">Google-Spanner 论文的思考</a> and <a href="https://toutiao.io/posts/zdqrx0/preview">Spanner, 真时和CAP理论</a></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Spanner &lt;/h1&gt;

&lt;h1&gt;Introduce&lt;/h1&gt;

&lt;p&gt;Spanner is Google’s scalable, multi-version, globally-distributed, and synchronously-replicated da</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Spanner" scheme="https://zjuytw.github.io/tags/Spanner/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Frangipani lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-11.Frangipani(Cache%20Consitency)/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-11.Frangipani(Cache%20Consitency)/</id>
    <published>2021-08-09T09:12:42.351Z</published>
    <updated>2021-08-09T10:05:31.237Z</updated>
    
    <content type="html"><![CDATA[<h1>Frangipani(To be updaed)</h1><h2>Introduce</h2><p>While Frangipani is a paper published in 1997, I just want to talk about cache consistency in detail.</p><p>The paper are mainly discussed following 3 aspects:</p><ul><li>cache coherence</li><li>distributed transactions</li><li>distributed crash recovery</li></ul><h2>Cache consistency</h2><p>Rules for cache coherence</p><ul><li>No cached data without data’s lock</li><li>acquire lock then read from petal</li><li>write to petal then release lock</li></ul><h2>Extends</h2><p>For more details, you may refer to this Blog<a href="https://www.cnblogs.com/jamgun/p/14668522.html">Frangipani: A Scalable Distributed File System 论文阅读</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Frangipani(To be updaed)&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;While Frangipani is a paper published in 1997, I just want to talk about cache con</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
    <category term="Frangipani" scheme="https://zjuytw.github.io/tags/Frangipani/"/>
    
  </entry>
  
  <entry>
    <title>6.824 Aurora lecture note</title>
    <link href="https://zjuytw.github.io/2021/08/09/6.824-10.Aurora/"/>
    <id>https://zjuytw.github.io/2021/08/09/6.824-10.Aurora/</id>
    <published>2021-08-09T09:11:36.427Z</published>
    <updated>2021-08-09T10:05:22.628Z</updated>
    
    <content type="html"><![CDATA[<h1>Aurora</h1><h2>Introduce</h2><p>Amazon Aurora is a relational database service for OLTP workloads offered as part of Amazon Web Services. Aurora is designed to address the constraint of bottleneck of network throughput, it also allows for fast crash recovery, failovers to replicas and fault-tolerant.</p><h2> History</h2><h3> EC2</h3><p>EC2 is Elastic Cloud 2 for short. Users can rent instances of EC to deploy their Web Server or DB services. </p><p>Each instance of EC2 are running in the Virtual Machine on the physical node, and all their storage is redirected to a external locally attached disk via VMM(Virtual Machine Monitor). </p><ul><li>For stateless web server, EC2 is convenient for its scalability and high-performance</li><li>For a storage system like DB service, there are bunch of contraint:<ul><li>Limited expansion : MySQL on EC2 is not able to do write expansion</li><li>Limited fault-tolerance : Once the node fails, we can not access to locally attached disk for data</li></ul></li></ul><p><img src="/2021/08/09/6.824-10.Aurora/EC2.png" alt="EC2"></p><h3>EBS</h3><p>EBS is Elastic Block Store for short. It is the progress of EC2 that Amazon uses a multiple instances of EBS to do a <em>Chain-Replication</em> to have fault-tolerance.</p><p>Constraints:</p><ul><li>Network bottleneck because of large amount of data is sending by network</li><li>Not FT, for Amazon always put EBS in same Data Center.</li></ul><h3>RDS</h3><p>To deal with the constraints mentioned above, Amazon provides a more fault-tolerance system,  Relational Database Service<img src="/2021/08/09/6.824-10.Aurora/Aurora-RDS.png" alt="Aurora-RDS"></p><p>Compared with EBS, RDS can survive if a whole AZ(Available Zone) fails, but have to send write between primary and replica, which means the performance of write decreases as well as the data of cross-AZ increases dramatically.</p><h2> Aurora</h2><p>For a new system, Amazon was eager to have both fault-tolerance and performance done well, as following:</p><ul><li>Write although one AZ down</li><li>Read although one AZ down + one replica down</li><li>Minor slow won’t affect overall efficiency</li><li>Fast Re-replication</li></ul><p><img src="/2021/08/09/6.824-10.Aurora/Aurora.png" alt="Aurora"></p><p>Feature of Aurora:</p><ul><li>Only send log record– The storage server can apply the log to page, so Aurora can just apply log without applying dirty page, which reduces the network workload</li><li>Only 4 Nodes required to make consensus</li></ul><h3>Quorum Scheme</h3><p>If we have:</p><ul><li>N Replicas<ul><li>W for Writers’ consensus to move</li><li>R for Readers’ consensus to move</li></ul></li><li>R + W = N +1, this makes sure W &amp; R will get least one overlap</li></ul><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = 3</span><br><span class="line">R = W = 2 or R=3, W = 1</span><br><span class="line">We can adjust speed of R or W by adjusting the number of them</span><br></pre></td></tr></table></figure><p>In Aurora, N = 6, W = 4, R =3</p><h3>Conclusion</h3><p>In a word, Aurora optimized data transportation type and used quorum write scheme which got 35 times speeds up compared with RDS’s MySQL.</p><h2>Extends</h2><p>You can find more detailed description of Aurora’s work flow in <a href="https://zhuanlan.zhihu.com/p/319806107">Amazon Aurora: 避免分布式一致性</a> and <a href="https://zhuanlan.zhihu.com/p/338582762">浅谈Amazon Aurora</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Aurora&lt;/h1&gt;

&lt;h2&gt;Introduce&lt;/h2&gt;

&lt;p&gt;Amazon Aurora is a relational database service for OLTP workloads offered as part of Amazon Web Serv</summary>
      
    
    
    
    <category term="6.824" scheme="https://zjuytw.github.io/categories/6-824/"/>
    
    
    <category term="Aurora" scheme="https://zjuytw.github.io/tags/Aurora/"/>
    
    <category term="Distributed Systems" scheme="https://zjuytw.github.io/tags/Distributed-Systems/"/>
    
  </entry>
  
</feed>
