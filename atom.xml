<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yitao&#39;s Blog</title>
  
  
  <link href="https://zjuytw.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjuytw.github.io/"/>
  <updated>2021-08-16T14:25:54.194Z</updated>
  <id>https://zjuytw.github.io/</id>
  
  <author>
    <name>Wang Yitao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>526. Beautiful Arrangement</title>
    <link href="https://zjuytw.github.io/2021/08/16/526.%20Beautiful%20Arrangement/"/>
    <id>https://zjuytw.github.io/2021/08/16/526.%20Beautiful%20Arrangement/</id>
    <published>2021-08-16T15:42:31.275Z</published>
    <updated>2021-08-16T14:25:54.194Z</updated>
    
    <content type="html"><![CDATA[<h1>526. Beautiful Arrangement</h1><h2>Description</h2><p><img src="/2021/08/16/526.%20Beautiful%20Arrangement/526-1.png" alt="image-20210816183414471"></p><h2>Solution</h2><ol><li><p>Naively do backtracking</p></li><li><p>DP + State Compression</p><p>use <code>mask</code> to record first <code>num</code> ‘s integer’s combinations, for example</p><p><code>0101</code> means 1 and 3 are in the first 2 slots of the array. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[mask] = sum of dp[mask^i], which i is suitable for popcount(mask) slot</span><br></pre></td></tr></table></figure></li></ol><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_set&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">suitable</span>(n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span> || j % i == <span class="number">0</span>)</span><br><span class="line">                    suitable[i].<span class="built_in">insert</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtracking</span>(n,<span class="number">1</span>,visited, suitable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> curPos, unordered_set&lt;<span class="keyword">int</span>&gt;&amp; visited, <span class="keyword">const</span> vector&lt;unordered_set&lt;<span class="keyword">int</span>&gt;&gt;&amp; suitable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curPos == n+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.<span class="built_in">count</span>(i) || suitable[curPos].<span class="built_in">count</span>(i) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visited.<span class="built_in">insert</span>(i);</span><br><span class="line">            res += <span class="built_in">backtracking</span>(n, curPos+<span class="number">1</span>, visited, suitable);</span><br><span class="line">            visited.<span class="built_in">erase</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countArrangement</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt;n); mask++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = __builtin_popcount(mask);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((mask &amp; (<span class="number">1</span>&lt;&lt;i)) &amp;&amp; (num % (i+<span class="number">1</span>) == <span class="number">0</span> || (i+<span class="number">1</span>) % num == <span class="number">0</span>))&#123;</span><br><span class="line">                    dp[mask] += dp[mask^(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span>&lt;&lt;n) - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;526. Beautiful Arrangement&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/526.%20Beautiful%20Arrangement/526-1.png&quot; alt=&quot;image-202</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Back Tracking" scheme="https://zjuytw.github.io/tags/Back-Tracking/"/>
    
    <category term="State Compression" scheme="https://zjuytw.github.io/tags/State-Compression/"/>
    
  </entry>
  
  <entry>
    <title>282. Expression Add Operators</title>
    <link href="https://zjuytw.github.io/2021/08/16/282.%20Expression%20Add%20Operators/"/>
    <id>https://zjuytw.github.io/2021/08/16/282.%20Expression%20Add%20Operators/</id>
    <published>2021-08-16T15:42:31.273Z</published>
    <updated>2021-08-16T15:41:23.696Z</updated>
    
    <content type="html"><![CDATA[<h1>282. Expression Add Operators</h1><h2>Description</h2><p><img src="/2021/08/16/282.%20Expression%20Add%20Operators/282-1.png" alt="image-20210816233523653"></p><h2>Solution</h2><p>Use tricky DFS to solve it.</p><p><strong>The most important trick:</strong> Because we need to give each expression that leads to the target, so we need to record current string. Then, for<code>+</code> and <code>-</code>, in fact we just need to record the <code>exep value</code> in previous expression. But to treat <code>*</code> rightly, we need record one more variable – lastValue to calculate the expression rightly.</p><p>So if we have, for example 1 2 3 4 5 6 7 8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 2 * 3 DFS(45678)</span><br></pre></td></tr></table></figure><p>​                 ↑</p><p>To treat this 2 * 3 correctly, we need first record <code>1 + 2</code>= 3, then use <code>3 - 2 + 2 * 3</code> to get the right answer.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">addOperators</span><span class="params">(string num, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(num, (LL)target, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(string&amp; num, LL target, string prevStr, <span class="keyword">int</span> curPos, LL curVal, LL lastVal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>() == curPos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curVal == target)</span><br><span class="line">                res.<span class="built_in">push_back</span>(prevStr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; num.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string curStr = num.<span class="built_in">substr</span>(curPos, i - curPos+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; curStr &lt;&lt;endl;</span></span><br><span class="line">            LL val = <span class="built_in">stoll</span>(curStr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(curStr.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; curStr[<span class="number">0</span>] ==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(curPos==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, curStr, i+<span class="number">1</span>, val, val);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;+&quot;</span> + curStr, i+<span class="number">1</span>, curVal + val, val);</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;-&quot;</span> + curStr, i+<span class="number">1</span>, curVal - val, -val);</span><br><span class="line">                <span class="built_in">dfs</span>(num, target, prevStr + <span class="string">&quot;*&quot;</span> + curStr, i+<span class="number">1</span>, curVal - lastVal + lastVal * val, lastVal * val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/16/282.%20Expression%20Add%20Operators/282-2.png" alt="image-20210816234051340"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;282. Expression Add Operators&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/282.%20Expression%20Add%20Operators/282-1.png&quot; alt=&quot;i</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>576. Out of Boundary Paths</title>
    <link href="https://zjuytw.github.io/2021/08/16/576.%20Out%20of%20Boundary%20Paths/"/>
    <id>https://zjuytw.github.io/2021/08/16/576.%20Out%20of%20Boundary%20Paths/</id>
    <published>2021-08-15T17:46:55.651Z</published>
    <updated>2021-08-15T17:29:17.300Z</updated>
    
    <content type="html"><![CDATA[<h1>576. Out of Boundary Paths</h1><h2>Description</h2><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-1.png" alt="image-20210816011409956"></p><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-2.png" alt="image-20210816011436730"></p><h2>Solution</h2><p>DP for each stage.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> maxMove, <span class="keyword">int</span> startRow, <span class="keyword">int</span> startColumn)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; directions = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> outCounts = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(m, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>)));</span><br><span class="line">        dp[<span class="number">0</span>][startRow][startColumn] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curcol = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxMove; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> cur = dp[curcol][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(!cur)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">4</span>; z++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = j + directions[z][<span class="number">0</span>], y = k + directions[z][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n)&#123;</span><br><span class="line">                            outCounts = (outCounts + cur) % MOD;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            dp[curcol^<span class="number">1</span>][x][y] = (dp[curcol^<span class="number">1</span>][x][y] + cur) %MOD;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[curcol][j][k] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curcol^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outCounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-3.png" alt="image-20210816012632281"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;576. Out of Boundary Paths&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/576.%20Out%20of%20Boundary%20Paths/576-1.png&quot; alt=&quot;image</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>5832. Array With Elements Not Equal to Average of Neighbors</title>
    <link href="https://zjuytw.github.io/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/"/>
    <id>https://zjuytw.github.io/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/</id>
    <published>2021-08-15T17:46:55.630Z</published>
    <updated>2021-08-15T17:46:25.708Z</updated>
    
    <content type="html"><![CDATA[<h1>5832. Array With Elements Not Equal to Average of Neighbors</h1><h2>Description</h2><p><img src="/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/5832-1.png" alt="image-20210816013507734"></p><p><img src="/2021/08/16/5832.%20Array%20With%20Elements%20Not%20Equal%20to%20Average%20of%20Neighbors/5832-2.png" alt="image-20210816013517964"></p><h2>Solution</h2><p>To generate the array in the requirement, my strategy is pick<code>the smallest</code> <code>the largest</code> <code>the second smallest</code> …, because we have <code>the largest</code> * 2 &gt; the sum of the smallest numbers, it should always work.</p><p>Or we can keep looping the swap  the mismatched pair till we get the correct array.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rearrangeArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(res.<span class="built_in">size</span>() != nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums[l++]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution 2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rearrangeArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(res.<span class="built_in">size</span>() != nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums[l++]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;5832. Array With Elements Not Equal to Average of Neighbors&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/16/5832.%20Array%20With%20</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
    <category term="Two Pointers" scheme="https://zjuytw.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>399. Evaluate Division</title>
    <link href="https://zjuytw.github.io/2021/08/14/399.%20Evaluate%20Division/"/>
    <id>https://zjuytw.github.io/2021/08/14/399.%20Evaluate%20Division/</id>
    <published>2021-08-14T13:18:15.761Z</published>
    <updated>2021-08-14T13:17:50.809Z</updated>
    
    <content type="html"><![CDATA[<h1>399. Evaluate Division</h1><h2>Description</h2><p><img src="/2021/08/14/399.%20Evaluate%20Division/399-1.png" alt="image-20210814211436494"></p><p><img src="/2021/08/14/399.%20Evaluate%20Division/399-2.png" alt="image-20210814211447126"></p><h2>Solution</h2><p>Record each equations’ string name and its corresponding index, used later.</p><p>Then do a <code>floyd search</code> to all strings, find their division.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">calcEquation</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;<span class="keyword">double</span>&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; names;</span><br><span class="line">        unordered_map&lt;string, unordered_map&lt;string, <span class="keyword">double</span>&gt;&gt; Map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; equations.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(equations[i][<span class="number">0</span>]) == Map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                Map[equations[i][<span class="number">0</span>]][equations[i][<span class="number">0</span>]] = <span class="number">1.0</span>;</span><br><span class="line">                names.<span class="built_in">push_back</span>(equations[i][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(equations[i][<span class="number">1</span>]) == Map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                Map[equations[i][<span class="number">1</span>]][equations[i][<span class="number">1</span>]] = <span class="number">1.0</span>;</span><br><span class="line">                names.<span class="built_in">push_back</span>(equations[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            Map[equations[i][<span class="number">0</span>]][equations[i][<span class="number">1</span>]] = values[i];</span><br><span class="line">            Map[equations[i][<span class="number">1</span>]][equations[i][<span class="number">0</span>]] = <span class="number">1.0</span>/values[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; Map.<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Map.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Map.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j || i == k || j == k)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    string a = names[i], b= names[j], c= names[k];</span><br><span class="line">                    <span class="keyword">if</span>(Map[a].<span class="built_in">find</span>(c) != Map[a].<span class="built_in">end</span>() &amp;&amp; Map[b].<span class="built_in">find</span>(c) != Map[b].<span class="built_in">end</span>())&#123;</span><br><span class="line">                        Map[a][b] = Map[a][c] / Map[b][c];</span><br><span class="line">                        Map[b][a] = Map[b][c] / Map[a][c];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">double</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string a = queries[i][<span class="number">0</span>], b = queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(Map.<span class="built_in">find</span>(a) == Map.<span class="built_in">end</span>() || Map.<span class="built_in">find</span>(b) == Map.<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Map[a].<span class="built_in">find</span>(b) == Map[a].<span class="built_in">end</span>())</span><br><span class="line">                res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(Map[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;399. Evaluate Division&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/14/399.%20Evaluate%20Division/399-1.png&quot; alt=&quot;image-20210814211</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Floyd" scheme="https://zjuytw.github.io/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>1583. Count Unhappy Friends</title>
    <link href="https://zjuytw.github.io/2021/08/14/1583.%20Count%20Unhappy%20Friends/"/>
    <id>https://zjuytw.github.io/2021/08/14/1583.%20Count%20Unhappy%20Friends/</id>
    <published>2021-08-14T13:18:15.685Z</published>
    <updated>2021-08-14T13:12:40.008Z</updated>
    
    <content type="html"><![CDATA[<h1>1583. Count Unhappy Friends</h1><h2>Description</h2><p><img src="/2021/08/14/1583.%20Count%20Unhappy%20Friends/1583-1.png" alt="image-20210814210934272"></p><p><img src="/2021/08/14/1583.%20Count%20Unhappy%20Friends/1583-2.png" alt="image-20210814210946985"></p><h2>Solution</h2><p>Iterate all potential pair<code>(i,j)</code> to see if they are ranked higher in each <code>preference</code> </p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">unhappyFriends</span><span class="params">(<span class="keyword">int</span> n, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; preferences, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; <span class="built_in">perfers</span>(n);</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="keyword">int</span> res  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)&#123;</span><br><span class="line">                perfers[j][preferences[j][i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> pair: pairs)&#123;</span><br><span class="line">            Map[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">            Map[pair[<span class="number">1</span>]] = pair[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">visited</span><span class="params">(n,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Map[i] == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(perfers[i][j] &lt; perfers[i][Map[i]] &amp;&amp; perfers[j][i] &lt; perfers[j][Map[j]])&#123;</span><br><span class="line">                    res += visited[i] == <span class="number">0</span>;</span><br><span class="line">                    res += visited[j] == <span class="number">0</span>;</span><br><span class="line">                    visited[i] = <span class="number">1</span>;</span><br><span class="line">                    visited[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1583. Count Unhappy Friends&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/14/1583.%20Count%20Unhappy%20Friends/1583-1.png&quot; alt=&quot;imag</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 Page Table</title>
    <link href="https://zjuytw.github.io/2021/08/14/Lab3%20Page%20Table/"/>
    <id>https://zjuytw.github.io/2021/08/14/Lab3%20Page%20Table/</id>
    <published>2021-08-14T06:51:27.776Z</published>
    <updated>2021-08-14T06:51:16.805Z</updated>
    
    <content type="html"><![CDATA[<h1>Page Table(No Completed)</h1><p>In this section, we are about to explore page tables and modify them to simplify the functions that copy data from user space to kernel space.</p><p>Before start the lab, we shall have a well understand on how page table works and how the functions in <code>vm.c</code> and <code>proc.c</code> works. Especially <code>walk, map, unmap...</code></p><p><strong>Note:</strong> Because the new semester has began and I am a little overwhelmed by the workload. So I decided to stop the lab and go to recollect the algorithm analysis tools I learned in undergraduate.(TUT, or I may have a unhappy semester)</p><h2>Lab</h2><ul><li><p>Vmprint</p><p>This part is easy, just look <code>freewalk()</code>,then mimic the procedural of  look at page table use the index to find pte-&gt; go to next page table…</p></li><li><p>Kernel page table per process</p><p>This part need us to give each process its own copy of the kernel page. Before we modify, when the kernel need to user a user pointer’s value, it need first translate the pointer to a physical address then because kernel page table is a direct mapping to physical address, we can directly treat these PA as VA.</p><p>After this part and next part, we shall be able to directly dereference user’s pointer in kernel.</p><ul><li>To achieve the copy of kernel page table<ul><li>First, <code>alloc</code> a new page table to each process</li><li>Map the kernel stack to this page table, as well as many other address under ‘KERNBASE aka <code>0x80000000</code>‘ and Trampoline</li><li>Modify the <code>scheduler</code> to make sure whenever a proc is running on CPU, <code>satp</code> will change its MMU to the new kernel page table</li><li>Also, when execute <code>freeproc</code>, we need to free process’s kernel page table. Note that we should not free the physical memory, so we need to implement our own <code>freewalk</code>.</li></ul></li></ul></li><li><p>Simplify copyin() / copyinstr()</p><p>In this part, we should do furtherly to copy <code>user_pagetable</code> into <code>kernel_pagetable</code>, so we need to walk the <code>user_pagetable</code> ‘s <code>pa</code> and mapping the <code>pa</code> into <code>kernel_pagetable</code> </p><ul><li>First, change the <code>copyin &amp; copyinstr</code> functions to use <code>copyin_new &amp; copyinstr_new</code> in kernel/vmcopyin.c</li><li>Because <code>exec, fork, growproc</code> will change process’s page table, so we change <code>kernel_pagetable</code> after process’s page table is changed.</li><li>Copy page table to <code>kernel_pagetable</code> from [0, p-&gt;sz]<ul><li>We simply walk the va of <code>user_pagetable</code> to find pa then map (va, pa)’s record in kernel page table</li><li>Remember to set off the <code>PTE_U</code></li></ul></li><li>Revise <code>exec, fork, growproc</code> functions<ul><li>In <code>growproc</code>, if argument <code>n</code> &lt; 0, we need to unmap the page table</li></ul></li><li>Don’t forget to copy pagetable for first user process in <code>user_init</code></li></ul></li></ul><p><img src="/2021/08/14/Lab3%20Page%20Table/lab3-2.jpg" alt="lab3-2"></p><p><img src="/2021/08/14/Lab3%20Page%20Table/lab3-3.jpg" alt="lab3-3"></p><p>(The failed information is I haven’t wrote questions and time text, just ignore it!)</p><h2> Questions</h2><p><strong>I just stopped here, for helping me to resume the page table stuff after this semester.</strong></p><blockquote><p>Explain the output of vmprint in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1?</p></blockquote><p>Answer: </p><blockquote><p>Explain why the third test srcva + len &lt; srcva is necessary in copyin_new(): give values for srcva and len for which the first two test fail (i.e., they will not cause to return -1) but for which the third one is true (resulting in returning -1).</p></blockquote><p>Answer:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Page Table(No Completed)&lt;/h1&gt;

&lt;p&gt;In this section, we are about to explore page tables and modify them to simplify the functions that co</summary>
      
    
    
    
    <category term="6.S081" scheme="https://zjuytw.github.io/categories/6-S081/"/>
    
    
    <category term="xv6" scheme="https://zjuytw.github.io/tags/xv6/"/>
    
    <category term="Memory Management" scheme="https://zjuytw.github.io/tags/Memory-Management/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 System Calls</title>
    <link href="https://zjuytw.github.io/2021/08/14/Lab2%20Syscalls/"/>
    <id>https://zjuytw.github.io/2021/08/14/Lab2%20Syscalls/</id>
    <published>2021-08-14T06:51:27.773Z</published>
    <updated>2021-08-14T06:50:49.420Z</updated>
    
    <content type="html"><![CDATA[<h1>System Calls(pending the challenge)</h1><p>In the lab, we will get deeper into OS than the previous one. We are about to implement the ‘bridge’ between user and kernel mode, then implement two specific <code>syscall</code> to be called by user’s program.</p><h2>Lab</h2><p>The two labs are symmetry overall, so I just describe how to do a system call.</p><p>To make our own <code>syscall</code>s,we should know how the syscall works between user &amp; kernel mode.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   user function</span><br><span class="line">     ↓</span><br><span class="line">      wrapped interface</span><br><span class="line">-----------------------------↓(ecall)--------------------------------------</span><br><span class="line">     syscall()</span><br><span class="line">      ↓</span><br><span class="line">kernel sys_(syscall&#x27;s name)</span><br></pre></td></tr></table></figure><p>In this framework, there are some points:</p><ul><li>How to use ecall?<ul><li>We first declare a wrapped function in <code>user/user.h</code>, then implement it in <code>user/usys.S</code> which are assembly code generated by <code>user/usys.pl</code>, the assembly code are used to load the syscall number into <code>a7</code> register.</li></ul></li><li>In kernel mode how to fetch argument?<ul><li>Refer to other functions in <code>kernel/sysproc.c</code>, we can use <code>argint()</code> in <code>kernel/syscall.c</code> to fetch argument from stack</li></ul></li><li>syscall() in <code>kernel/syscall.c</code> , what’s its function?<ul><li>It precedes after ecall, fetches the <code>a7</code> then executes corresponding syscall, then put the return value into <code>a0</code></li></ul></li></ul><h3> Trace</h3><ul><li><p>Remember to put your new syscall number into every part a syscall can involve with, especially don’t forget set the function point entry in <code>syscall.c</code>‘s array.</p></li><li><p>The function uses mask to mark all system call it wants to trace, so each bit on mask is a syscall you should check. Use <code>mask &amp; 1 &lt;&lt; syscallnum </code> to check it.</p></li></ul><p><img src="/2021/08/14/Lab2%20Syscalls/Lab2-1.png" alt="Lab2-1"></p><h3>Sysinfo</h3><ul><li>The way kernel mode gives back argument to user mode is to call <code>copyout</code> which maps return args’ virtual memory back to physical memory then revises it to target value.</li><li>The collections of free memory and processes is not too hard, we can just iterate the freemem linklist and process array.</li></ul><p><img src="/2021/08/14/Lab2%20Syscalls/lab2-2.png" alt="lab2-2"></p><h2>Conclusion</h2><p>In this lab, we breakthrough the barrier between u/k mode, the whole detailed system call process is in front of us. But there are still many information we need to get into, <code>mmap, pages management , process management</code>, etc.</p><p>Also, I have not started challenges, because I am about to begin my graduate life in NUS, hopefully I can go back here and finish them someday!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;System Calls(pending the challenge)&lt;/h1&gt;

&lt;p&gt;In the lab, we will get deeper into OS than the previous one. We are about to implement the</summary>
      
    
    
    
    <category term="6.S081" scheme="https://zjuytw.github.io/categories/6-S081/"/>
    
    
    <category term="xv6" scheme="https://zjuytw.github.io/tags/xv6/"/>
    
    <category term="Syscall" scheme="https://zjuytw.github.io/tags/Syscall/"/>
    
  </entry>
  
  <entry>
    <title>6.S081 Lab1 Unix Utilities</title>
    <link href="https://zjuytw.github.io/2021/08/14/Lab1%20Unix%20utilities/"/>
    <id>https://zjuytw.github.io/2021/08/14/Lab1%20Unix%20utilities/</id>
    <published>2021-08-14T06:51:27.770Z</published>
    <updated>2021-08-14T06:51:21.854Z</updated>
    
    <content type="html"><![CDATA[<h1>Xv6 and Unix utilities</h1><p>In this lab, we gonna implement many interesting and useful programs like, <code>sleep, pingpong, primes, find, and xargs </code>. There are some points I want to emphasize, though this lab is not so hard.</p><h2>Before Start</h2><p>My experiment environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VM: VMware workstation</span><br><span class="line">Linux ubuntu 20.04</span><br></pre></td></tr></table></figure><p> I can not find corresponding software in <code>apt-get</code> when my kernel was at 16.04 or 18.04, so I have to update to 20.04.</p><h2>Lab</h2><p>The structure we should know before programming is that, there are kernel’s and user’s code, when I need to do something on <code>system level</code>, we should call kernel’s function. Gracefully, we have many wrapped interface on users’ functions that we can directly call them. Check them in <code>user/user.h</code></p><h3>sleep</h3><p>Skip</p><h3>    pingpong</h3><p>Note that in pipe[2], pipe[0] is for receiving data and pipe[1] is for writing into.</p><h3>primes</h3><p>The brief of this algorithm is used in the situation that, assume you have a bunch of machines, to find primes given a list of numbers which continuously +1 one after another. And each stage selects one minimum number and it is exactly prime, then verify other numbers do not have the prime as their factor. Then send left numbers into next stage…</p><p><img src="/2021/08/14/Lab1%20Unix%20utilities/lab1-1.png" alt="lab1-1"></p><p>Just use recursion to find next stage’s number and send to the child’s process</p><h3>find</h3><p>Refer to <code>user/ls.c</code>, that is a good template.</p><p>What I want to mention is some points of File System</p><p><strong>struct state</strong> is the information a file descriptor refers to, stored in inode and can be fetched by fstat(fd, &amp;st)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define T_DIR 1 // Directory</span><br><span class="line">#define T_FILE 2 // File</span><br><span class="line">#define T_DEVICE 3 // Device</span><br><span class="line">struct stat &#123;</span><br><span class="line">int dev; // File system’s disk device</span><br><span class="line">uint ino; // Inode number</span><br><span class="line">short type; // Type of file</span><br><span class="line">short nlink; // Number of links to file</span><br><span class="line">uint64 size; // Size of file in bytes</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>struct dirent</strong> serves the same a file descriptor’s information, but it mainly provides file’s name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct dirent</span><br><span class="line">&#123;</span><br><span class="line">    long d_ino; /* inode number */</span><br><span class="line">    off_t d_off; /* offset to this dirent */</span><br><span class="line">    unsigned short d_reclen; /* length of this d_name */</span><br><span class="line">    unsigned char d_type; /* the type of d_name */</span><br><span class="line">    char d_name [NAME_MAX+1]; /* file name (null-terminated) */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>xargs</h2><p>This program helps me to understand xargs a lot, thanks gosh.</p><p>To implement <code>xargs</code>, we need first process <code>stdin</code> because <code>pipe</code> will redirect xargs’s stdin to last program’s stdout. When this done, we can user<code>exec()</code> to execute the command after xargs. Note that when processing stdin, we should read or gets byte by byte and when once encounter ‘\n’, do command.</p><h2>Conclusion</h2><p>This programs helps me to review the usage of them and help me dabble into <code>fork(), exec(), pipe(), and file systems</code></p><p><strong>Note:</strong> when programming for a child process, just use <code>exit</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Xv6 and Unix utilities&lt;/h1&gt;

&lt;p&gt;In this lab, we gonna implement many interesting and useful programs like, &lt;code&gt;sleep, pingpong, primes</summary>
      
    
    
    
    <category term="6.S081" scheme="https://zjuytw.github.io/categories/6-S081/"/>
    
    
    <category term="xv6" scheme="https://zjuytw.github.io/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>233. Number of Digit One</title>
    <link href="https://zjuytw.github.io/2021/08/13/233.%20Number%20of%20Digit%20One/"/>
    <id>https://zjuytw.github.io/2021/08/13/233.%20Number%20of%20Digit%20One/</id>
    <published>2021-08-13T15:59:46.108Z</published>
    <updated>2021-08-15T17:49:08.496Z</updated>
    
    <content type="html"><![CDATA[<h1>233. Number of Digit One</h1><h2>Description</h2><p><img src="/2021/08/13/233.%20Number%20of%20Digit%20One/233-1.png" alt="image-20210813235350161"></p><h2>Solution</h2><p>We can calculate the number of one on each digit, for example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To count one&#x27;s number on 1234567</span><br><span class="line">we can count one on 1, 10, 100...</span><br><span class="line">If we need to count one on 100, we can have 1234 * 100 + 100</span><br></pre></td></tr></table></figure><p>So we can have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k&#x27;s digit count = [n/10^(k+1)] * 10 ^ k + </span><br><span class="line">min(max(n mod 10^(k+1) - 100, 0), 10^k)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// mulk 表示 10^k</span></span><br><span class="line">        <span class="comment">// 在下面的代码中，可以发现 k 并没有被直接使用到（都是使用 10^k）</span></span><br><span class="line">        <span class="comment">// 但为了让代码看起来更加直观，这里保留了 k</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mulk = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; n &gt;= mulk; ++k) &#123;</span><br><span class="line">            ans += (n / (mulk * <span class="number">10</span>)) * mulk + <span class="built_in">min</span>(<span class="built_in">max</span>(n % (mulk * <span class="number">10</span>) - mulk + <span class="number">1</span>, <span class="number">0LL</span>), mulk);</span><br><span class="line">            mulk *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;233. Number of Digit One&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/13/233.%20Number%20of%20Digit%20One/233-1.png&quot; alt=&quot;image-202</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Tricky" scheme="https://zjuytw.github.io/tags/Tricky/"/>
    
  </entry>
  
  <entry>
    <title>388. Longest Absolute File Path</title>
    <link href="https://zjuytw.github.io/2021/08/12/388.%20Longest%20Absolute%20File%20Path/"/>
    <id>https://zjuytw.github.io/2021/08/12/388.%20Longest%20Absolute%20File%20Path/</id>
    <published>2021-08-12T15:52:39.661Z</published>
    <updated>2021-08-15T17:50:01.012Z</updated>
    
    <content type="html"><![CDATA[<h1>388. Longest Absolute File Path</h1><h2>Description</h2><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-1.png" alt="image-20210812234850480"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-2.png" alt="image-20210812234933342"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-3.png" alt="image-20210812234949600"></p><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-4.png" alt="image-20210812234958351"></p><h2>Solution</h2><p>Recollection the use of <code>stringstream</code>:</p><p><a href="http://www.cplusplus.com/reference/sstream/stringstream/">http://www.cplusplus.com/reference/sstream/stringstream/</a></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthLongestPath</span><span class="params">(string input)</span> </span>&#123;</span><br><span class="line">        <span class="function">stringstream <span class="title">ss</span><span class="params">(input)</span></span>;</span><br><span class="line">        string token;</span><br><span class="line">        vector&lt;string&gt; paths;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">getline</span>(ss, token, <span class="string">&#x27;\n&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> layer = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; token.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(token[i] != <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                layer++;</span><br><span class="line">            &#125;</span><br><span class="line">            token = token.<span class="built_in">substr</span>(layer);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isFile</span>(token))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; layer; i++)</span><br><span class="line">                    length += paths[i].<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(length + (<span class="keyword">int</span>)token.<span class="built_in">size</span>() , res);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(paths.<span class="built_in">size</span>() &gt;= layer+<span class="number">1</span>)</span><br><span class="line">                    paths[layer] = token;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    paths.<span class="built_in">push_back</span>(token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isFile</span><span class="params">(string&amp; token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : token)</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-5.png" alt="image-20210812235104356"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;388. Longest Absolute File Path&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/12/388.%20Longest%20Absolute%20File%20Path/388-1.png&quot; </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Stringstream" scheme="https://zjuytw.github.io/tags/Stringstream/"/>
    
  </entry>
  
  <entry>
    <title>516. Longest Palindromic Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/</id>
    <published>2021-08-12T15:52:39.638Z</published>
    <updated>2021-08-12T15:46:21.320Z</updated>
    
    <content type="html"><![CDATA[<h1>516. Longest Palindromic Subsequence</h1><h2>Description</h2><p><img src="/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516-1.png" alt="image-20210812234258586"></p><h2>Solution</h2><p>Use DP to find the longest <code>palindromic subsequence</code> in one interval</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//dp[i][j] =  (i &gt; j) from j to i, longest palinidromic subsequence</span><br><span class="line">//dp[i][j] = dp[i-1][j+1] + 2 (if s[i] == s[j]), else dp[i][j] = dp[i][j+1]</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp[i][j] =  (i &gt; j) from j to i, longest palinidromic subsequence</span></span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j+1] + 2 (if s[i] == s[j]), else dp[i][j] = dp[i][j+1]</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>()+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(s.<span class="built_in">size</span>()+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[i<span class="number">-1</span>] == s[j<span class="number">-1</span>])</span><br><span class="line">                        dp[i][j] = dp[i<span class="number">-1</span>][j+<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dp[i][j] = <span class="built_in">max</span>(dp[i][j+<span class="number">1</span>], dp[i<span class="number">-1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.<span class="built_in">size</span>()][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516-2.png" alt="image-20210812234531600"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;516. Longest Palindromic Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/12/516.%20Longest%20Palindromic%20Subsequence/516</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>446. Arithmetic Slices II - Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/</id>
    <published>2021-08-11T15:42:52.096Z</published>
    <updated>2021-08-11T15:42:18.197Z</updated>
    
    <content type="html"><![CDATA[<h1>446. Arithmetic Slices II - Subsequence</h1><h2>Description</h2><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-1.png" alt="image-20210811233829175"></p><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-2.png" alt="image-20210811233842286"></p><h2>Solution</h2><p>DP to check out the previous subsequence number satisfied requirement.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][d] = In position i, the number satisfied requirement that difference is d</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="comment">// int res = 0;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;unordered_map&lt;LL,<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                LL d = <span class="number">1LL</span> * nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">int</span> cnt = ((dp[j].<span class="built_in">find</span>(d) != dp[j].<span class="built_in">end</span>()) ? dp[j][d] : <span class="number">0</span>);</span><br><span class="line">                res += cnt;</span><br><span class="line">                dp[i][d] += cnt+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subsequence/446-3.png" alt="image-20210811234154579"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;446. Arithmetic Slices II - Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/446.%20Arithmetic%20Slices%20II%20-%20Subse</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>679. 24 Game</title>
    <link href="https://zjuytw.github.io/2021/08/11/679.%2024%20Game/"/>
    <id>https://zjuytw.github.io/2021/08/11/679.%2024%20Game/</id>
    <published>2021-08-11T15:42:52.075Z</published>
    <updated>2021-08-11T15:36:55.771Z</updated>
    
    <content type="html"><![CDATA[<h1>679. 24 Game</h1><h2>Description</h2><p><img src="/2021/08/11/679.%2024%20Game/679-1.png" alt="image-20210811232640270"></p><h2>Solution</h2><p>Recursively check all the potential combination of the 4 numbers. In each round, we iteratively select 2 out of N numbers, calculate the result of <code>+, -, *, /</code> then put back the result into next round.</p><p>Don’t forget the function return condition is <code>if N == 1, nums[0] == 24 </code> . And for float number, we should do this in <code>abs() &lt; 1e-6</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint24</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">double</span>&gt; nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> card : cards)</span><br><span class="line">            nums.<span class="built_in">push_back</span>(<span class="number">1.0</span> * card);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="keyword">double</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">abs</span>(nums[<span class="number">0</span>] - <span class="number">24</span>) &lt; <span class="number">1e-6</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">double</span> a = nums[i], b = nums[j];</span><br><span class="line">                vector&lt;<span class="keyword">double</span>&gt; newnums;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                        newnums.<span class="built_in">push_back</span>(nums[k]);</span><br><span class="line">                </span><br><span class="line">                newnums.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="comment">//iterate all operators</span></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a + b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a - b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                newnums.<span class="built_in">back</span>() = a * b;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">                    newnums.<span class="built_in">back</span>() = a / b;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">dfs</span>(newnums)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/679.%2024%20Game/679-2.jpg" alt="679-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;679. 24 Game&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/679.%2024%20Game/679-1.png&quot; alt=&quot;image-20210811232640270&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Sol</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>133. Clone Graph</title>
    <link href="https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/"/>
    <id>https://zjuytw.github.io/2021/08/11/133.%20Clone%20Graph/</id>
    <published>2021-08-10T16:15:38.395Z</published>
    <updated>2021-08-10T16:13:21.379Z</updated>
    
    <content type="html"><![CDATA[<h1>133. Clone Graph</h1><h2>Description</h2><p><img src="/2021/08/11/133.%20Clone%20Graph/133-1.png" alt="image-20210811000504275"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-2.jpg" alt="133-2"></p><p><img src="/2021/08/11/133.%20Clone%20Graph/133-4.jpg" alt="133-4"><img src="/2021/08/11/133.%20Clone%20Graph/133-3.jpg" alt="133-3"></p><h2>Solution</h2><p>I uses two map to store the <code>visited</code> and <code>waiting</code> nodes, then BFS for the next node be copied.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; neighbors;</span></span><br><span class="line"><span class="comment">    Node() &#123;</span></span><br><span class="line"><span class="comment">        val = 0;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = vector&lt;Node*&gt;();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; visited;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Node*&gt; waited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">cloneGraph</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        Node* root = <span class="keyword">new</span> <span class="built_in">Node</span>(node-&gt;val, node-&gt;neighbors);</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        waited[root-&gt;val] = root;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">auto</span> top = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top-&gt;neighbors.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> nbor = top-&gt;neighbors[i];</span><br><span class="line">                    <span class="keyword">if</span>(visited.<span class="built_in">find</span>(nbor-&gt;val) == visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                        Node *next = <span class="literal">nullptr</span>;</span><br><span class="line">                        <span class="keyword">if</span>(waited.<span class="built_in">find</span>(nbor-&gt;val) == waited.<span class="built_in">end</span>())&#123;</span><br><span class="line">                            next = <span class="keyword">new</span> <span class="built_in">Node</span>(nbor-&gt;val, nbor-&gt;neighbors);</span><br><span class="line">                            waited[nbor-&gt;val] = next;</span><br><span class="line">                        &#125;<span class="keyword">else</span></span><br><span class="line">                            next = waited[nbor-&gt;val];</span><br><span class="line">                        top-&gt;neighbors[i] = next;</span><br><span class="line">                        q.<span class="built_in">push</span>(top-&gt;neighbors[i]);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        top-&gt;neighbors[i] = visited[nbor-&gt;val];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                visited[top-&gt;val] = top;</span><br><span class="line">                waited.<span class="built_in">erase</span>(top-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/133.%20Clone%20Graph/133-5.jpg" alt="133-5"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;133. Clone Graph&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/133.%20Clone%20Graph/133-1.png&quot; alt=&quot;image-20210811000504275&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="BFS" scheme="https://zjuytw.github.io/tags/BFS/"/>
    
    <category term="DFS" scheme="https://zjuytw.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>491.Increasing Subsequences</title>
    <link href="https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/"/>
    <id>https://zjuytw.github.io/2021/08/11/491.%20Increasing%20Subsequences/</id>
    <published>2021-08-10T16:15:38.362Z</published>
    <updated>2021-08-10T16:15:08.836Z</updated>
    
    <content type="html"><![CDATA[<h1>491.Increasing Subsequences</h1><h2>Description</h2><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-1.png" alt="image-20210810235346772"></p><h2>Solution</h2><p>Two solutions:</p><ul><li>DP, use <code>set&lt;vector&lt;int&gt;&gt;</code> to deduplicate</li><li>Back Tracking, don’t forget deduplicating</li></ul><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        set&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; Set;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            dp[i].<span class="built_in">push_back</span>(&#123;nums[i]&#125;);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt;= nums[j])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> sequence: dp[j])&#123;</span><br><span class="line">                        <span class="comment">//sequence -&gt; vector&lt;int&gt;</span></span><br><span class="line">                        dp[i].<span class="built_in">push_back</span>(sequence);</span><br><span class="line">                        dp[i].<span class="built_in">back</span>().<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        Set.<span class="built_in">insert</span>(dp[i].<span class="built_in">back</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> seq : Set)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(seq);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Solution2 :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; curRes;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, curRes);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> curPos, vector&lt;<span class="keyword">int</span>&gt;&amp; curres)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curres.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">            res.<span class="built_in">push_back</span>(curres);</span><br><span class="line">        <span class="keyword">if</span>(curPos == nums.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; seen;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = curPos; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curres.<span class="built_in">size</span>()&gt;<span class="number">0</span> &amp;&amp; nums[i] &lt; curres.<span class="built_in">back</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(seen.<span class="built_in">count</span>(nums[i]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            curres.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtrack</span>(nums, i+<span class="number">1</span>, curres);</span><br><span class="line">            curres.<span class="built_in">pop_back</span>();</span><br><span class="line">            seen.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/491.%20Increasing%20Subsequences/491-2.jpg" alt="491-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;491.Increasing Subsequences&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/491.%20Increasing%20Subsequences/491-1.png&quot; alt=&quot;image-</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Back Tracking" scheme="https://zjuytw.github.io/tags/Back-Tracking/"/>
    
  </entry>
  
  <entry>
    <title>413. Arithmetic Slices</title>
    <link href="https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/"/>
    <id>https://zjuytw.github.io/2021/08/11/413.%20Arithmetic%20Slices/</id>
    <published>2021-08-10T16:15:38.359Z</published>
    <updated>2021-08-10T16:12:47.366Z</updated>
    
    <content type="html"><![CDATA[<h1>413. Arithmetic Slices</h1><h2>Description</h2><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-1.png" alt="image-20210811000154179"></p><h2>Solution</h2><p>Iteration to find <code>start &amp; end</code> of each <code>Arithmetic</code></p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diff</span><span class="params">(nums.size()<span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            diff[i<span class="number">-1</span>] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prev = diff[<span class="number">0</span>], count = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev == diff[i])&#123;</span><br><span class="line">                count++;</span><br><span class="line">                res += count;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/11/413.%20Arithmetic%20Slices/413-2.jpg" alt="413-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;413. Arithmetic Slices&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/11/413.%20Arithmetic%20Slices/413-1.png&quot; alt=&quot;image-20210811000</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Iteration" scheme="https://zjuytw.github.io/tags/Iteration/"/>
    
  </entry>
  
  <entry>
    <title>727. Minimum Window Subsequence</title>
    <link href="https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/"/>
    <id>https://zjuytw.github.io/2021/08/10/727.%20Minimum%20Window%20Subsequence/</id>
    <published>2021-08-09T16:39:05.536Z</published>
    <updated>2021-08-09T16:37:26.337Z</updated>
    
    <content type="html"><![CDATA[<h1>727. Minimum Window Subsequence</h1><h2>Description</h2><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png" alt="457-1"></p><h2>Solution</h2><p>There are two solutions, one is original DP(very common solution that must think of it when encounter a string problem), another is Finite State Machine solution.</p><h3>DP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DP[i][j] = the minimum subsequence length k</span><br><span class="line">//e.g, s2[0 : j] is a subsequence of s1[i - k + 1: i]</span><br><span class="line"></span><br><span class="line">if s1[i] == s2[j]</span><br><span class="line">dp[i][j] = dp[i-1][j-1] + 1</span><br><span class="line">else</span><br><span class="line">dp[i][j] = dp[i-1][j] + 1</span><br><span class="line"></span><br><span class="line">return min&#123;dp[i][N]&#125; for i= 1,2,3..M</span><br></pre></td></tr></table></figure><h3>Finite State Machine</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Define a array next[i][ch]: look right from position i, the pos of the nearest ch</span><br><span class="line"></span><br><span class="line">With the next[][], we directly jump into next nearest matched postion without iterate.</span><br><span class="line"></span><br><span class="line">And the way to calculate next is DP, we see from back to front</span><br><span class="line"></span><br><span class="line">next[i][ch] = next[i+1][ch](except next[i][s[i+1] - &#x27;a&#x27;] = i+1)</span><br></pre></td></tr></table></figure><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//DP</span></span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;int&gt;&gt; dp(s1.size() + 1, vector&lt;int&gt;(s2.size() + 1, INT_MAX));</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt;= s1.size(); i++)</span></span><br><span class="line">        <span class="comment">//     dp[i][0] = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j = 1; j &lt;= s2.size() &amp;&amp; j &lt;= i; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(s1[i-1] == s2[j-1] &amp;&amp; dp[i-1][j-1] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j-1] + 1;</span></span><br><span class="line">        <span class="comment">//         else if(s1[i-1] != s2[j-1] &amp;&amp; dp[i-1][j] != INT_MAX)</span></span><br><span class="line">        <span class="comment">//             dp[i][j] = dp[i-1][j] + 1;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// string res = &quot;&quot;;</span></span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= s1.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if((res == &quot;&quot; &amp;&amp; dp[i][s2.size()] != INT_MAX) || res.size() &gt; dp[i][s2.size()])&#123;</span></span><br><span class="line">        <span class="comment">//         res = s1.substr(i-dp[i][s2.size()], dp[i][s2.size()]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Finite-State-Machine</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">next</span>(s1.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            next[s1.<span class="built_in">size</span>()<span class="number">-1</span>][i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s1.<span class="built_in">size</span>()<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</span><br><span class="line">                next[i][j] = next[i+<span class="number">1</span>][j];</span><br><span class="line">            next[i][s1[i+<span class="number">1</span>] - <span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> length = INT_MAX, start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i] == s2[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i, s2i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(s2i &lt; s2.<span class="built_in">size</span>() &amp;&amp; next[j][s2[s2i] - <span class="string">&#x27;a&#x27;</span>] != <span class="number">-1</span>)&#123;</span><br><span class="line">                    j = next[j][s2[s2i++] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s2i == s2.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; j - i + <span class="number">1</span>)&#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        length = j - i + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length != INT_MAX)</span><br><span class="line">            res = s1.<span class="built_in">substr</span>(start, length);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-2.png" alt="457-2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;727. Minimum Window Subsequence&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/727.%20Minimum%20Window%20Subsequence/457-1.png&quot; al</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="No AC first time" scheme="https://zjuytw.github.io/tags/No-AC-first-time/"/>
    
    <category term="DP" scheme="https://zjuytw.github.io/tags/DP/"/>
    
    <category term="Finite State Machine" scheme="https://zjuytw.github.io/tags/Finite-State-Machine/"/>
    
  </entry>
  
  <entry>
    <title>313. Super Ugly Number</title>
    <link href="https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/"/>
    <id>https://zjuytw.github.io/2021/08/10/313.%20Super%20Ugly%20Number/</id>
    <published>2021-08-09T16:39:05.535Z</published>
    <updated>2021-08-09T16:38:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1>313. Super Ugly Number</h1><h2>Description</h2><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png" alt="image-20210810003242724"></p><h2>Solution</h2><p>Use priority_queue to find the smallest number</p><p>Be careful about integer overflow.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nthSuperUglyNumber</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; primes)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">long</span>, vector&lt;<span class="keyword">long</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">long</span> top;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            top = pq.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() == top)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> prime: primes)</span><br><span class="line">                pq.<span class="built_in">push</span>(top * prime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/313.%20Super%20Ugly%20Number/313-3.jpg" alt="313-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;313. Super Ugly Number&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/313.%20Super%20Ugly%20Number/313-1.png&quot; alt=&quot;image-202108100</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
  <entry>
    <title>1353. Maximum Number of Events That Can Be Attended</title>
    <link href="https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/"/>
    <id>https://zjuytw.github.io/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/</id>
    <published>2021-08-09T16:39:05.516Z</published>
    <updated>2021-08-09T16:38:24.239Z</updated>
    
    <content type="html"><![CDATA[<h1>1353. Maximum Number of Events That Can Be Attended</h1><h2>Description</h2><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-1.png" alt="image-20210810002606817"></p><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-2.jpg" alt="1353-2"></p><h2>Solution</h2><p>Use priority_queue to find the closed DDL’s event and handle it in the day.</p><p>There is are tricky programming point that we can directly iterate the whole [earliest start time, latest finish time] to find each day’s best strategy or we can also iterate every sorted event.</p><h2>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(events.<span class="built_in">begin</span>(), events.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">1E5</span>; day++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; events.<span class="built_in">size</span>() &amp;&amp; events[i][<span class="number">0</span>] == day)&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(events[i++][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &lt; day)</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>() &gt;= day)&#123;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// int curt = events[0][0];</span></span><br><span class="line">        <span class="comment">// int res = 0;</span></span><br><span class="line">        <span class="comment">// for(int i = 0; i &lt; events.size(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if(curt == events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//         while(!pq.empty() &amp;&amp; curt &lt; events[i][0])&#123;</span></span><br><span class="line">        <span class="comment">//             curt++;</span></span><br><span class="line">        <span class="comment">//             res++;</span></span><br><span class="line">        <span class="comment">//             pq.pop();</span></span><br><span class="line">        <span class="comment">//             while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//                 pq.pop();</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         curt = events[i][0];</span></span><br><span class="line">        <span class="comment">//         pq.push(events[i][1]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// while(!pq.empty() &amp;&amp; pq.top() &gt;= curt)&#123;</span></span><br><span class="line">        <span class="comment">//     curt++;</span></span><br><span class="line">        <span class="comment">//     res++;</span></span><br><span class="line">        <span class="comment">//     pq.pop();</span></span><br><span class="line">        <span class="comment">//     while(!pq.empty() &amp;&amp; pq.top() &lt; curt)</span></span><br><span class="line">        <span class="comment">//         pq.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/10/1353.%20Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended/1353-3.jpg" alt="1353-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1353. Maximum Number of Events That Can Be Attended&lt;/h1&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/2021/08/10/1353.%20Maximum%20Number%20of%2</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://zjuytw.github.io/categories/Leetcode/"/>
    
    
    <category term="Priority Queue" scheme="https://zjuytw.github.io/tags/Priority-Queue/"/>
    
  </entry>
  
</feed>
